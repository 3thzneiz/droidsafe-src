<java.util.Calendar: java.lang.Object clone()>  ->_SOURCE_
<com.google.android.maps.GeoPoint: boolean equals(java.lang.Object)>  ->_SOURCE_
<com.google.android.maps.GeoPoint: int hashCode()>  ->_SOURCE_
<java.util.Locale: java.lang.String toString()>  ->_SOURCE_
<java.io.File: java.lang.String toString()>  ->_SOURCE_
<java.util.Calendar: java.lang.String toString()>  ->_SOURCE_
<java.util.Date: java.lang.String toString()>  ->_SOURCE_
<java.net.Inet6Address: java.lang.String toString()>  ->_SOURCE_
<java.net.InetAddress: java.lang.String toString()>  ->_SOURCE_
<android.telephony.SignalStrength: java.lang.String toString()>  ->_SOURCE_
<android.telephony.ServiceState: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.Connection: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.CallForwardInfo: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.DataCallState: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.IccCardStatus: java.lang.String toString()>  ->_SOURCE_
<android.telephony.NeighboringCellInfo: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.SmsResponse: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.IccIoResult: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.DriverCall: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.AdnRecord: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.IccServiceTable: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.SmsHeader: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker$TxRxSum: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.ApnSetting: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.RestrictedState: java.lang.String toString()>  ->_SOURCE_
<android.telephony.SmsMessage$SubmitPdu: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase$SubmitPduBase: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.CallerInfo: java.lang.String toString()>  ->_SOURCE_
<com.google.android.maps.GeoPoint: java.lang.String toString()>  ->_SOURCE_
<java.io.ObjectInputStream: int read()>  ->_SOURCE_
<java.io.ObjectInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.ObjectInputStream: java.lang.Object readObject()>  ->_SOURCE_
<java.lang.System: java.lang.String getProperty(java.lang.String)>  ->_SOURCE_
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>  ->_SOURCE_
<java.lang.System: java.lang.SecurityManager getSecurityManager()>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>  ->_SOURCE_
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.ClassLoader getParent()>  ->_SOURCE_
<android.app.LoadedApk$WarningContextClassLoader: java.net.URL getResource(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>  ->_SOURCE_
<android.app.LoadedApk$WarningContextClassLoader: java.util.Enumeration getResources(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>  ->_SOURCE_
<android.app.LoadedApk$WarningContextClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>  ->_SOURCE_
<dalvik.system.BaseDexClassLoader: java.lang.Package getPackage(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>  ->_SOURCE_
<java.lang.ClassLoader: java.lang.Package[] getPackages()>  ->_SOURCE_
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>  ->_SOURCE_
<java.lang.reflect.Field: int getInt(java.lang.Object)>  ->_SOURCE_
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>  ->_SOURCE_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])>  ->_SOURCE_
<java.net.URL: java.io.InputStream openStream()>  ->_SOURCE_
<java.io.ObjectInputStream: int read()>  ->_SOURCE_
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()>  ->_SOURCE_
<java.io.FileInputStream: int read()>  ->_SOURCE_
<java.io.ByteArrayInputStream: int read()>  ->_SOURCE_
<java.util.zip.CheckedInputStream: int read()>  ->_SOURCE_
<java.util.jar.JarFile$JarFileInputStream: int read()>  ->_SOURCE_
<java.util.zip.InflaterInputStream: int read()>  ->_SOURCE_
<java.io.PushbackInputStream: int read()>  ->_SOURCE_
<javax.crypto.CipherInputStream: int read()>  ->_SOURCE_
<org.apache.commons.codec.binary.Base64InputStream: int read()>  ->_SOURCE_
<java.io.FilterInputStream: int read()>  ->_SOURCE_
<android.content.res.AssetManager$AssetInputStream: int read()>  ->_SOURCE_
<libcore.net.url.FtpURLInputStream: int read()>  ->_SOURCE_
<java.nio.SocketChannelImpl$SocketChannelInputStream: int read()>  ->_SOURCE_
<android.os.MemoryFile$MemoryInputStream: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLInputStream: int read()>  ->_SOURCE_
<java.util.zip.ZipFile$RAFStream: int read()>  ->_SOURCE_
<java.net.PlainSocketImpl$PlainSocketInputStream: int read()>  ->_SOURCE_
<android.net.LocalSocketImpl$SocketInputStream: int read()>  ->_SOURCE_
<libcore.net.http.AbstractHttpInputStream: int read()>  ->_SOURCE_
<gov.nist.javax.sip.parser.Pipeline: int read()>  ->_SOURCE_
<android.app.backup.BackupDataInputStream: int read()>  ->_SOURCE_
<android.bluetooth.BluetoothInputStream: int read()>  ->_SOURCE_
<android.drm.mobile1.DrmRawContent$DrmInputStream: int read()>  ->_SOURCE_
<android.filterfw.core.SerializedFrame$DirectByteInputStream: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLBufferedInput: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLStreamedInput: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream: int read()>  ->_SOURCE_
<org.apache.http.conn.EofSensorInputStream: int read()>  ->_SOURCE_
<org.apache.http.impl.io.ContentLengthInputStream: int read()>  ->_SOURCE_
<org.apache.http.impl.io.IdentityInputStream: int read()>  ->_SOURCE_
<org.apache.http.impl.io.ChunkedInputStream: int read()>  ->_SOURCE_
<org.bouncycastle.asn1.DefiniteLengthInputStream: int read()>  ->_SOURCE_
<org.bouncycastle.asn1.IndefiniteLengthInputStream: int read()>  ->_SOURCE_
<org.bouncycastle.asn1.ConstructedOctetStream: int read()>  ->_SOURCE_
<android.speech.srec.MicrophoneInputStream: int read()>  ->_SOURCE_
<android.speech.srec.UlawEncoderInputStream: int read()>  ->_SOURCE_
<java.io.PipedInputStream: int read()>  ->_SOURCE_
<java.io.SequenceInputStream: int read()>  ->_SOURCE_
<java.io.StringBufferInputStream: int read()>  ->_SOURCE_
<java.nio.channels.Channels$ChannelInputStream: int read()>  ->_SOURCE_
<java.io.InputStream: int read()>  ->_SOURCE_
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>  ->_SOURCE_
<java.io.DataInputStream: int read(byte[])>  ->_SOURCE_
<org.apache.commons.net.telnet.TelnetInputStream: int read(byte[])>  ->_SOURCE_
<android.content.res.AssetManager$AssetInputStream: int read(byte[])>  ->_SOURCE_
<android.net.LocalSocketImpl$SocketInputStream: int read(byte[])>  ->_SOURCE_
<android.app.backup.BackupDataInputStream: int read(byte[])>  ->_SOURCE_
<android.drm.mobile1.DrmRawContent$DrmInputStream: int read(byte[])>  ->_SOURCE_
<org.apache.http.conn.EofSensorInputStream: int read(byte[])>  ->_SOURCE_
<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[])>  ->_SOURCE_
<org.apache.http.impl.io.ChunkedInputStream: int read(byte[])>  ->_SOURCE_
<android.speech.srec.MicrophoneInputStream: int read(byte[])>  ->_SOURCE_
<android.speech.srec.UlawEncoderInputStream: int read(byte[])>  ->_SOURCE_
<java.io.InputStream: int read(byte[])>  ->_SOURCE_
<java.io.ObjectInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.FileInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.ByteArrayInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.DataInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.CheckedInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.GZIPInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.ZipFile$ZipInflaterInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.InflaterInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.PushbackInputStream: int read(byte[],int,int)>  ->_SOURCE_
<javax.crypto.CipherInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.commons.codec.binary.Base64InputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.FilterInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>  ->_SOURCE_
<libcore.net.url.FtpURLInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.nio.SocketChannelImpl$SocketChannelInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.os.MemoryFile$MemoryInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.ZipFile$RAFStream: int read(byte[],int,int)>  ->_SOURCE_
<java.net.PlainSocketImpl$PlainSocketInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.net.LocalSocketImpl$SocketInputStream: int read(byte[],int,int)>  ->_SOURCE_
<libcore.net.http.FixedLengthInputStream: int read(byte[],int,int)>  ->_SOURCE_
<libcore.net.http.UnknownLengthHttpInputStream: int read(byte[],int,int)>  ->_SOURCE_
<libcore.net.http.ChunkedInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.app.backup.BackupDataInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.bluetooth.BluetoothInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.drm.mobile1.DrmRawContent$DrmInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.filterfw.core.SerializedFrame$DirectByteInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.http.conn.EofSensorInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.http.impl.io.IdentityInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.http.impl.io.ChunkedInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.bouncycastle.asn1.DefiniteLengthInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.bouncycastle.asn1.IndefiniteLengthInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.bouncycastle.asn1.ConstructedOctetStream: int read(byte[],int,int)>  ->_SOURCE_
<android.speech.srec.MicrophoneInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.speech.srec.UlawEncoderInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.PipedInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.SequenceInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.StringBufferInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.nio.channels.Channels$ChannelInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.InputStream: int read(byte[],int,int)>  ->_SOURCE_
<droidsafe.runtime.DroidSafeAndroidRuntime: java.lang.String getUnmodeledTaintString(java.lang.String)>  ->_SOURCE_
<droidsafe.runtime.DroidSafeAndroidRuntime: int getUnmodeledTaintInt()>  ->_SOURCE_
<droidsafe.runtime.DroidSafeAndroidRuntime: short getUnmodeledTaintShort()>  ->_SOURCE_
<droidsafe.runtime.DroidSafeAndroidRuntime: byte getUnmodeledTaintByte()>  ->_SOURCE_
<droidsafe.runtime.DroidSafeAndroidRuntime: boolean getUnmodeledTaintBoolean()>  ->_SOURCE_
<droidsafe.runtime.DroidSafeAndroidRuntime: char getUnmodeledTaintChar()>  ->_SOURCE_
<droidsafe.runtime.DroidSafeAndroidRuntime: float getUnmodeledTaintFloat()>  ->_SOURCE_
<droidsafe.runtime.DroidSafeAndroidRuntime: double getUnmodeledTaintDouble()>  ->_SOURCE_
<droidsafe.runtime.DroidSafeAndroidRuntime: long getUnmodeledTaintLong()>  ->_SOURCE_
<java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>  ->_SOURCE_
<java.util.Locale: java.lang.String getDisplayName()>  ->_SOURCE_
<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>  ->_SOURCE_
<java.util.Locale: java.lang.String toString()>  ->_SOURCE_
<java.io.File: java.lang.String getAbsolutePath()>  ->_SOURCE_
<java.io.File: java.lang.String getCanonicalPath()>  ->_SOURCE_
<java.io.File: java.lang.String getName()>  ->_SOURCE_
<java.io.File: java.lang.String getParent()>  ->_SOURCE_
<java.io.File: java.lang.String getPath()>  ->_SOURCE_
<java.io.File: long lastModified()>  ->_SOURCE_
<java.io.File: java.lang.String[] list()>  ->_SOURCE_
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>  ->_SOURCE_
<java.io.File: java.io.File[] listFiles()>  ->_SOURCE_
<java.io.File: java.lang.String toString()>  ->_SOURCE_
<java.util.Properties: java.lang.String getProperty(java.lang.String)>  ->_SOURCE_
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>  ->_SOURCE_
<java.lang.SecurityManager: java.lang.Object getSecurityContext()>  ->_SOURCE_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>  ->_SOURCE_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>  ->_SOURCE_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>  ->_SOURCE_
<java.lang.Runtime: java.lang.Process exec(java.lang.String)>  ->_SOURCE_
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])>  ->_SOURCE_
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>  ->_SOURCE_
<java.io.FileInputStream: void <init>(java.io.File)>  ->_SOURCE_
<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>  ->_SOURCE_
<java.io.FileInputStream: void <init>(java.lang.String)>  ->_SOURCE_
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>  ->_SOURCE_
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()>  ->_SOURCE_
<java.io.FileInputStream: int read()>  ->_SOURCE_
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.FileInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.ObjectInputStream: int read()>  ->_SOURCE_
<java.io.ObjectInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.ObjectInputStream: java.lang.Object readObject()>  ->_SOURCE_
<java.io.DataInputStream: void <init>(java.io.InputStream)>  ->_SOURCE_
<java.io.DataInputStream: int read(byte[])>  ->_SOURCE_
<java.io.DataInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.DataInputStream: boolean readBoolean()>  ->_SOURCE_
<java.io.DataInputStream: byte readByte()>  ->_SOURCE_
<java.io.DataInputStream: char readChar()>  ->_SOURCE_
<java.io.DataInputStream: double readDouble()>  ->_SOURCE_
<java.io.DataInputStream: float readFloat()>  ->_SOURCE_
<java.io.DataInputStream: void readFully(byte[])>  ->_SOURCE_
<java.io.DataInputStream: void readFully(byte[],int,int)>  ->_SOURCE_
<java.io.DataInputStream: int readInt()>  ->_SOURCE_
<java.io.DataInputStream: java.lang.String readLine()>  ->_SOURCE_
<java.io.DataInputStream: long readLong()>  ->_SOURCE_
<java.io.DataInputStream: short readShort()>  ->_SOURCE_
<java.io.DataInputStream: int readUnsignedByte()>  ->_SOURCE_
<java.io.DataInputStream: int readUnsignedShort()>  ->_SOURCE_
<java.io.DataInputStream: java.lang.String readUTF()>  ->_SOURCE_
<java.io.ByteArrayInputStream: int read()>  ->_SOURCE_
<java.io.ByteArrayInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.content.Context: android.content.ContentResolver getContentResolver()>  ->_SOURCE_
<android.content.Context: java.lang.CharSequence getText(int)>  ->_SOURCE_
<android.content.Context: java.lang.String getString(int)>  ->_SOURCE_
<android.content.Context: java.lang.String getString(int,java.lang.Object[])>  ->_SOURCE_
<android.app.ContextImpl: android.content.res.Resources$Theme getTheme()>  ->_SOURCE_
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>  ->_SOURCE_
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>  ->_SOURCE_
<android.test.mock.MockContext: android.content.res.Resources$Theme getTheme()>  ->_SOURCE_
<android.content.Context: android.content.res.Resources$Theme getTheme()>  ->_SOURCE_
<android.app.ContextImpl: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>  ->_SOURCE_
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>  ->_SOURCE_
<android.test.mock.MockContext: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>  ->_SOURCE_
<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>  ->_SOURCE_
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>  ->_SOURCE_
<android.app.Activity: android.content.Intent getIntent()>  ->_SOURCE_
<android.app.Activity: int getChangingConfigurations()>  ->_SOURCE_
<android.app.Activity: java.lang.String getCallingPackage()>  ->_SOURCE_
<android.app.Service: android.app.Application getApplication()>  ->_SOURCE_
<android.app.Service: java.lang.String getClassName()>  ->_SOURCE_
<android.content.BroadcastReceiver: int getResultCode()>  ->_SOURCE_
<android.content.BroadcastReceiver: java.lang.String getResultData()>  ->_SOURCE_
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>  ->_SOURCE_
<android.content.BroadcastReceiver: boolean getAbortBroadcast()>  ->_SOURCE_
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult getPendingResult()>  ->_SOURCE_
<android.content.BroadcastReceiver: boolean getDebugUnregister()>  ->_SOURCE_
<droidsafe.concrete.DSCursor: boolean isFirst()>  ->_SOURCE_
<droidsafe.concrete.DSCursor: boolean isLast()>  ->_SOURCE_
<droidsafe.concrete.DSCursor: boolean isBeforeFirst()>  ->_SOURCE_
<android.database.Cursor: java.lang.String getColumnName(int)>  ->_SOURCE_
<android.database.AbstractCursor: java.lang.String getColumnName(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: java.lang.String getColumnName(int)>  ->_SOURCE_
<android.database.CursorWrapper: java.lang.String getColumnName(int)>  ->_SOURCE_
<android.database.Cursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.MatrixCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.MergeCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<com.android.internal.database.SortCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.AbstractCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<droidsafe.concrete.DSCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.CursorWrapper: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.Cursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.MatrixCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.MergeCursor: byte[] getBlob(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.AbstractCursor: byte[] getBlob(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.CursorWrapper: byte[] getBlob(int)>  ->_SOURCE_
<android.database.Cursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.MatrixCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.MergeCursor: java.lang.String getString(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.AbstractCursor: java.lang.String getString(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.app.DownloadManager$CursorTranslator: java.lang.String getString(int)>  ->_SOURCE_
<android.database.CursorWrapper: java.lang.String getString(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: short getShort(int)>  ->_SOURCE_
<android.database.MatrixCursor: short getShort(int)>  ->_SOURCE_
<android.database.MergeCursor: short getShort(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: short getShort(int)>  ->_SOURCE_
<android.database.CursorWrapper: short getShort(int)>  ->_SOURCE_
<android.database.Cursor: int getInt(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: int getInt(int)>  ->_SOURCE_
<android.database.MatrixCursor: int getInt(int)>  ->_SOURCE_
<android.database.MergeCursor: int getInt(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: int getInt(int)>  ->_SOURCE_
<android.database.AbstractCursor: int getInt(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: int getInt(int)>  ->_SOURCE_
<android.app.DownloadManager$CursorTranslator: int getInt(int)>  ->_SOURCE_
<android.database.CursorWrapper: int getInt(int)>  ->_SOURCE_
<android.database.Cursor: long getLong(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: long getLong(int)>  ->_SOURCE_
<android.database.MatrixCursor: long getLong(int)>  ->_SOURCE_
<android.database.MergeCursor: long getLong(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: long getLong(int)>  ->_SOURCE_
<android.database.AbstractCursor: long getLong(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: long getLong(int)>  ->_SOURCE_
<android.app.DownloadManager$CursorTranslator: long getLong(int)>  ->_SOURCE_
<android.database.CursorWrapper: long getLong(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: float getFloat(int)>  ->_SOURCE_
<android.database.MatrixCursor: float getFloat(int)>  ->_SOURCE_
<android.database.MergeCursor: float getFloat(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: float getFloat(int)>  ->_SOURCE_
<android.database.CursorWrapper: float getFloat(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: double getDouble(int)>  ->_SOURCE_
<android.database.MatrixCursor: double getDouble(int)>  ->_SOURCE_
<android.database.MergeCursor: double getDouble(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: double getDouble(int)>  ->_SOURCE_
<android.database.CursorWrapper: double getDouble(int)>  ->_SOURCE_
<android.database.Cursor: int getType(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: int getType(int)>  ->_SOURCE_
<android.database.MatrixCursor: int getType(int)>  ->_SOURCE_
<android.database.MergeCursor: int getType(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: int getType(int)>  ->_SOURCE_
<android.database.AbstractCursor: int getType(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: int getType(int)>  ->_SOURCE_
<android.database.CursorWrapper: int getType(int)>  ->_SOURCE_
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()>  ->_SOURCE_
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()>  ->_SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()>  ->_SOURCE_
<android.database.AbstractCursor: android.os.Bundle getExtras()>  ->_SOURCE_
<android.database.CursorWrapper: android.os.Bundle getExtras()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getScheme()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getScheme()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getScheme()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getAuthority()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getAuthority()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getAuthority()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedAuthority()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedAuthority()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedAuthority()>  ->_SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getUserInfo()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getUserInfo()>  ->_SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getEncodedUserInfo()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedUserInfo()>  ->_SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getHost()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getHost()>  ->_SOURCE_
<android.net.Uri$AbstractHierarchicalUri: int getPort()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: int getPort()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getQuery()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getQuery()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getQuery()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedQuery()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedQuery()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedQuery()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getFragment()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getFragment()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getFragment()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedFragment()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedFragment()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedFragment()>  ->_SOURCE_
<android.net.Uri: java.lang.String toSafeString()>  ->_SOURCE_
<android.net.Uri: java.util.Set getQueryParameterNames()>  ->_SOURCE_
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>  ->_SOURCE_
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>  ->_SOURCE_
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>  ->_SOURCE_
<android.app.ContextImpl: android.content.res.Resources$Theme getTheme()>  ->_SOURCE_
<android.app.ContextImpl: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>  ->_SOURCE_
<java.lang.VMClassLoader: java.net.URL getResource(java.lang.String)>  ->_SOURCE_
<java.lang.VMClassLoader: java.util.List getResources(java.lang.String)>  ->_SOURCE_
<libcore.net.url.FtpURLConnection: void connect()>  ->_SOURCE_
<libcore.net.url.FileURLConnection: void connect()>  ->_SOURCE_
<libcore.net.url.JarURLConnectionImpl: void connect()>  ->_SOURCE_
<libcore.net.http.HttpURLConnectionImpl: void connect()>  ->_SOURCE_
<libcore.net.http.HttpsURLConnectionImpl: void connect()>  ->_SOURCE_
<java.net.URLConnection: void connect()>  ->_SOURCE_
<java.net.URLConnection: java.io.InputStream getInputStream()>  ->_SOURCE_
<java.util.Calendar: java.util.Locale[] getAvailableLocales()>  ->_SOURCE_
<java.util.Calendar: java.util.Calendar getInstance()>  ->_SOURCE_
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>  ->_SOURCE_
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>  ->_SOURCE_
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>  ->_SOURCE_
<java.util.Calendar: java.lang.Object clone()>  ->_SOURCE_
<java.util.Calendar: int get(int)>  ->_SOURCE_
<java.util.GregorianCalendar: int getActualMaximum(int)>  ->_SOURCE_
<java.util.Calendar: int getActualMaximum(int)>  ->_SOURCE_
<java.util.GregorianCalendar: int getActualMinimum(int)>  ->_SOURCE_
<java.util.Calendar: int getActualMinimum(int)>  ->_SOURCE_
<java.util.Calendar: int getFirstDayOfWeek()>  ->_SOURCE_
<java.util.GregorianCalendar: int getGreatestMinimum(int)>  ->_SOURCE_
<java.util.GregorianCalendar: int getLeastMaximum(int)>  ->_SOURCE_
<java.util.GregorianCalendar: int getMaximum(int)>  ->_SOURCE_
<java.util.Calendar: int getMinimalDaysInFirstWeek()>  ->_SOURCE_
<java.util.GregorianCalendar: int getMinimum(int)>  ->_SOURCE_
<java.util.Calendar: java.util.Date getTime()>  ->_SOURCE_
<java.util.Calendar: long getTimeInMillis()>  ->_SOURCE_
<java.util.Calendar: java.util.TimeZone getTimeZone()>  ->_SOURCE_
<java.util.Calendar: java.lang.String toString()>  ->_SOURCE_
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>  ->_SOURCE_
<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>  ->_SOURCE_
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>  ->_SOURCE_
<java.util.Date: int getHours()>  ->_SOURCE_
<java.util.Date: int getMinutes()>  ->_SOURCE_
<java.sql.Timestamp: long getTime()>  ->_SOURCE_
<java.util.Date: long getTime()>  ->_SOURCE_
<java.util.Date: java.lang.String toString()>  ->_SOURCE_
<java.nio.FileChannelImpl: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.net.InetSocketAddress: int getPort()>  ->_SOURCE_
<java.net.InetSocketAddress: java.lang.String getHostName()>  ->_SOURCE_
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>  ->_SOURCE_
<java.net.InetAddress: java.lang.String getHostAddress()>  ->_SOURCE_
<java.net.InetAddress: java.lang.String getHostName()>  ->_SOURCE_
<java.net.InetAddress: java.lang.String getCanonicalHostName()>  ->_SOURCE_
<java.net.Inet6Address: java.lang.String toString()>  ->_SOURCE_
<java.net.InetAddress: java.lang.String toString()>  ->_SOURCE_
<java.nio.DatagramChannelImpl: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.channels.DatagramChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.SocketChannelImpl: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.SocketChannelImpl: long read(java.nio.ByteBuffer[],int,int)>  ->_SOURCE_
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[],int,int)>  ->_SOURCE_
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])>  ->_SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document parse(org.xml.sax.InputSource)>  ->_SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document newDocument()>  ->_SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.DOMImplementation getDOMImplementation()>  ->_SOURCE_
<java.io.BufferedReader: int read()>  ->_SOURCE_
<java.io.InputStreamReader: int read()>  ->_SOURCE_
<java.io.StringReader: int read()>  ->_SOURCE_
<java.io.PushbackReader: int read()>  ->_SOURCE_
<java.io.FilterReader: int read()>  ->_SOURCE_
<java.io.CharArrayReader: int read()>  ->_SOURCE_
<java.io.Reader: int read()>  ->_SOURCE_
<java.io.Reader: int read(char[])>  ->_SOURCE_
<java.io.BufferedReader: int read(char[],int,int)>  ->_SOURCE_
<java.io.InputStreamReader: int read(char[],int,int)>  ->_SOURCE_
<java.io.StringReader: int read(char[],int,int)>  ->_SOURCE_
<java.io.PushbackReader: int read(char[],int,int)>  ->_SOURCE_
<java.io.FilterReader: int read(char[],int,int)>  ->_SOURCE_
<java.io.CharArrayReader: int read(char[],int,int)>  ->_SOURCE_
<org.apache.commons.net.io.DotTerminatedMessageReader: int read(char[],int,int)>  ->_SOURCE_
<java.io.Reader: int read(char[],int,int)>  ->_SOURCE_
<java.io.Reader: int read(java.nio.CharBuffer)>  ->_SOURCE_
<java.io.BufferedReader: int read()>  ->_SOURCE_
<java.io.BufferedReader: int read(char[],int,int)>  ->_SOURCE_
<java.io.BufferedReader: java.lang.String readLine()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getTagName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttribute(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DocumentType getDoctype()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMImplementation getImplementation()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getDocumentElement()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getInputEncoding()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlEncoding()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: boolean getXmlStandalone()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlVersion()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: boolean getStrictErrorChecking()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getDocumentURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMConfiguration getDomConfig()>  ->_SOURCE_
<java.io.InputStreamReader: int read()>  ->_SOURCE_
<java.io.InputStreamReader: int read(char[],int,int)>  ->_SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: java.lang.Object getAttribute(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: boolean getFeature(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentFragmentImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.EntityReferenceImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CDATASectionImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CommentImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentFragmentImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.EntityReferenceImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CDATASectionImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.TextImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CommentImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getParentNode()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getParentNode()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.NodeList getChildNodes()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NodeList getChildNodes()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getFirstChild()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getFirstChild()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getLastChild()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getLastChild()>  ->_SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getPreviousSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getPreviousSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getNextSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getNextSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getNextSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Document getOwnerDocument()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNamespaceURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNamespaceURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNamespaceURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getPrefix()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getPrefix()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getPrefix()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getLocalName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getLocalName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getLocalName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getBaseURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getUserData(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeListImpl: int getLength()>  ->_SOURCE_
<java.lang.DroidSafeProcess: int exitValue()>  ->_SOURCE_
<java.lang.ProcessManager$ProcessImpl: java.io.InputStream getInputStream()>  ->_SOURCE_
<java.lang.DroidSafeProcess: java.io.InputStream getInputStream()>  ->_SOURCE_
<java.lang.Process: java.io.InputStream getInputStream()>  ->_SOURCE_
<java.io.DataInputStream: boolean readBoolean()>  ->_SOURCE_
<java.io.DataInputStream: byte readByte()>  ->_SOURCE_
<java.io.DataInputStream: char readChar()>  ->_SOURCE_
<java.io.DataInputStream: double readDouble()>  ->_SOURCE_
<java.io.DataInputStream: float readFloat()>  ->_SOURCE_
<java.io.DataInputStream: void readFully(byte[])>  ->_SOURCE_
<java.io.DataInputStream: void readFully(byte[],int,int)>  ->_SOURCE_
<java.io.DataInputStream: int readInt()>  ->_SOURCE_
<java.io.DataInputStream: java.lang.String readLine()>  ->_SOURCE_
<java.io.DataInputStream: long readLong()>  ->_SOURCE_
<java.io.DataInputStream: short readShort()>  ->_SOURCE_
<java.io.DataInputStream: int readUnsignedByte()>  ->_SOURCE_
<java.io.DataInputStream: int readUnsignedShort()>  ->_SOURCE_
<java.io.DataInputStream: java.lang.String readUTF()>  ->_SOURCE_
<java.io.DataInputStream: void <init>(java.io.InputStream)>  ->_SOURCE_
<java.util.zip.CheckedInputStream: int read()>  ->_SOURCE_
<java.util.jar.JarFile$JarFileInputStream: int read()>  ->_SOURCE_
<java.util.zip.InflaterInputStream: int read()>  ->_SOURCE_
<java.io.PushbackInputStream: int read()>  ->_SOURCE_
<javax.crypto.CipherInputStream: int read()>  ->_SOURCE_
<org.apache.commons.codec.binary.Base64InputStream: int read()>  ->_SOURCE_
<java.io.FilterInputStream: int read()>  ->_SOURCE_
<java.io.DataInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.CheckedInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.GZIPInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.ZipFile$ZipInflaterInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.InflaterInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.PushbackInputStream: int read(byte[],int,int)>  ->_SOURCE_
<javax.crypto.CipherInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.commons.codec.binary.Base64InputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.FilterInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.database.ContentObserver: android.database.IContentObserver getContentObserver()>  ->_SOURCE_
<android.database.ContentObserver: android.database.IContentObserver releaseContentObserver()>  ->_SOURCE_
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>  ->_SOURCE_
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>  ->_SOURCE_
<android.content.ContentResolver: java.util.List getCurrentSyncs()>  ->_SOURCE_
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  ->_SOURCE_
<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>  ->_SOURCE_
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>  ->_SOURCE_
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>  ->_SOURCE_
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>  ->_SOURCE_
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>  ->_SOURCE_
<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)>  ->_SOURCE_
<android.os.Parcel: void readStringArray(java.lang.String[])>  ->_SOURCE_
<android.os.Parcel: java.lang.String[] readStringArray()>  ->_SOURCE_
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>  ->_SOURCE_
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>  ->_SOURCE_
<android.content.res.Resources: java.lang.String getString(int)>  ->_SOURCE_
<android.content.res.Resources: java.lang.CharSequence getText(int)>  ->_SOURCE_
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>  ->_SOURCE_
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>  ->_SOURCE_
<android.content.res.Resources: java.lang.String[] getStringArray(int)>  ->_SOURCE_
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>  ->_SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>  ->_SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>  ->_SOURCE_
<android.content.res.TypedArray: java.lang.String getString(int)>  ->_SOURCE_
<android.content.res.TypedArray: boolean getBoolean(int,boolean)>  ->_SOURCE_
<android.content.res.TypedArray: int getInt(int,int)>  ->_SOURCE_
<android.content.res.TypedArray: float getFloat(int,float)>  ->_SOURCE_
<android.content.res.TypedArray: int getColor(int,int)>  ->_SOURCE_
<android.content.res.TypedArray: int getInteger(int,int)>  ->_SOURCE_
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>  ->_SOURCE_
<android.content.res.TypedArray: int getResourceId(int,int)>  ->_SOURCE_
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>  ->_SOURCE_
<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>  ->_SOURCE_
<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>  ->_SOURCE_
<android.content.SharedPreferences: int getInt(java.lang.String,int)>  ->_SOURCE_
<android.content.SharedPreferences: long getLong(java.lang.String,long)>  ->_SOURCE_
<android.content.SharedPreferences: float getFloat(java.lang.String,float)>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.ArrayList getDbStats()>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: int getVersion()>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: long getPageSize()>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>  ->_SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>  ->_SOURCE_
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>  ->_SOURCE_
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>  ->_SOURCE_
<android.net.wifi.WifiManager: java.util.List getScanResults()>  ->_SOURCE_
<android.net.wifi.WifiManager: int getFrequencyBand()>  ->_SOURCE_
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>  ->_SOURCE_
<android.net.wifi.WifiManager: int getWifiState()>  ->_SOURCE_
<android.net.wifi.WifiManager: int getWifiApState()>  ->_SOURCE_
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()>  ->_SOURCE_
<android.net.wifi.WifiManager: java.lang.String getConfigFile()>  ->_SOURCE_
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>  ->_SOURCE_
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)>  ->_SOURCE_
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()>  ->_SOURCE_
<android.net.ThrottleManager: long getResetTime(java.lang.String)>  ->_SOURCE_
<android.net.ThrottleManager: long getPeriodStartTime(java.lang.String)>  ->_SOURCE_
<android.net.ThrottleManager: long getByteCount(java.lang.String,int,int,int)>  ->_SOURCE_
<android.net.ThrottleManager: long getCliffThreshold(java.lang.String,int)>  ->_SOURCE_
<android.net.ThrottleManager: int getCliffLevel(java.lang.String,int)>  ->_SOURCE_
<android.net.ThrottleManager: java.lang.String getHelpUri()>  ->_SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.TextServicesManager getInstance()>  ->_SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>  ->_SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()>  ->_SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)>  ->_SOURCE_
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)>  ->_SOURCE_
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger()>  ->_SOURCE_
<android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>  ->_SOURCE_
<android.net.NetworkPolicyManager: long computeNextCycleBoundary(long,android.net.NetworkPolicy)>  ->_SOURCE_
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()>  ->_SOURCE_
<android.net.NetworkPolicyManager: int getUidPolicy(int)>  ->_SOURCE_
<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()>  ->_SOURCE_
<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()>  ->_SOURCE_
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)>  ->_SOURCE_
<android.app.ActivityManager: java.util.List getRunningAppProcesses()>  ->_SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>  ->_SOURCE_
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>  ->_SOURCE_
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()>  ->_SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>  ->_SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>  ->_SOURCE_
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>  ->_SOURCE_
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>  ->_SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getNetworkClass(int)>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>  ->_SOURCE_
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getCurrentPhoneType()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getPhoneType()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getNetworkType()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getSimState()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getLteOnCdmaMode()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMsisdn()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getVoiceMessageCount()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimImpi()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getIsimImpu()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getCallState()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getDataActivity()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getDataState()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getCdmaEriIconIndex()>  ->_SOURCE_
<android.telephony.TelephonyManager: int getCdmaEriIconMode()>  ->_SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()>  ->_SOURCE_
<android.location.LocationManager: java.util.List getAllProviders()>  ->_SOURCE_
<android.location.LocationManager: java.util.List getProviders(boolean)>  ->_SOURCE_
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>  ->_SOURCE_
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>  ->_SOURCE_
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>  ->_SOURCE_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>  ->_SOURCE_
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>  ->_SOURCE_
<android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)>  ->_SOURCE_
<android.net.ConnectivityManager: int getNetworkPreference()>  ->_SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>  ->_SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>  ->_SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>  ->_SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>  ->_SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()>  ->_SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)>  ->_SOURCE_
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>  ->_SOURCE_
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>  ->_SOURCE_
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>  ->_SOURCE_
<android.net.ConnectivityManager: boolean getMobileDataEnabled()>  ->_SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()>  ->_SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()>  ->_SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()>  ->_SOURCE_
<android.net.ConnectivityManager: int tether(java.lang.String)>  ->_SOURCE_
<android.net.ConnectivityManager: int untether(java.lang.String)>  ->_SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()>  ->_SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()>  ->_SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()>  ->_SOURCE_
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)>  ->_SOURCE_
<android.net.ConnectivityManager: android.net.ProxyProperties getGlobalProxy()>  ->_SOURCE_
<android.net.ConnectivityManager: android.net.ProxyProperties getProxy()>  ->_SOURCE_
<android.net.ConnectivityManager: boolean isNetworkSupported(int)>  ->_SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getEncodedUserInfo()>  ->_SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getUserInfo()>  ->_SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getHost()>  ->_SOURCE_
<android.net.Uri$AbstractHierarchicalUri: int getPort()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getScheme()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedAuthority()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getAuthority()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedQuery()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getQuery()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedFragment()>  ->_SOURCE_
<android.net.Uri$StringUri: java.lang.String getFragment()>  ->_SOURCE_
<android.net.Uri$PathPart: java.lang.String getEncoded()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getScheme()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getAuthority()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedAuthority()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getQuery()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedQuery()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getFragment()>  ->_SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedFragment()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getScheme()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getSchemeSpecificPart()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getAuthority()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedAuthority()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getQuery()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedQuery()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getFragment()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedFragment()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getUserInfo()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedUserInfo()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getHost()>  ->_SOURCE_
<android.net.Uri$OpaqueUri: int getPort()>  ->_SOURCE_
<android.net.Uri$Part: java.lang.String getEncoded()>  ->_SOURCE_
<android.net.Uri$PathPart: java.lang.String getEncoded()>  ->_SOURCE_
<android.net.Uri$Part: java.lang.String getEncoded()>  ->_SOURCE_
<android.net.Uri$AbstractPart: java.lang.String getDecoded()>  ->_SOURCE_
<android.content.BroadcastReceiver$PendingResult: int getResultCode()>  ->_SOURCE_
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()>  ->_SOURCE_
<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)>  ->_SOURCE_
<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()>  ->_SOURCE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>  ->_SOURCE_
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>  ->_SOURCE_
<android.content.ContentProviderOperation: android.net.Uri getUri()>  ->_SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getNamespaceUri(int)>  ->_SOURCE_
<org.kxml2.io.KXmlParser: java.lang.String getNamespaceUri(int)>  ->_SOURCE_
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>  ->_SOURCE_
<android.view.View: android.graphics.Bitmap getDrawingCache()>  ->_SOURCE_
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>  ->_SOURCE_
<android.view.View: android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config,int,boolean)>  ->_SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.Menu getMenu()>  ->_SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getTitle()>  ->_SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getSubtitle()>  ->_SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.View getCustomView()>  ->_SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.MenuInflater getMenuInflater()>  ->_SOURCE_
<android.widget.CursorAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.CursorAdapter: android.database.Cursor swapCursor(android.database.Cursor)>  ->_SOURCE_
<android.widget.Gallery: int getChildDrawingOrder(int,int)>  ->_SOURCE_
<android.os.Message: android.os.Bundle getData()>  ->_SOURCE_
<com.android.internal.os.IDropBoxManagerService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.database.IContentObserver$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.content.IContentService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.app.IServiceConnection$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.statusbar.IStatusBarService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.IThrottleManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesSessionListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.INetworkPolicyListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.media.IAudioService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.os.ServiceManagerNative: android.os.IBinder asBinder()>  ->_SOURCE_
<android.nfc.INfcAdapter$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.nfc.INfcTag$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.nfc.INfcAdapterExtras$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.textservice.ISpellCheckerSession$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.nfc.INdefPushCallback$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.ISms$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.database.BulkCursorNative: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.sip.ISipService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.sip.ISipSessionListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.IWapPushManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.INetworkStatsService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetoothCallback$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetoothHealthCallback$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.media.IMediaScannerService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.speech.tts.ITextToSpeechService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.security.IKeyChainService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.speech.IRecognitionService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.hardware.SensorManager: float[] getOrientation(float[],float[])>  ->_SOURCE_
<com.android.internal.os.IDropBoxManagerService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<libcore.net.http.HttpsURLConnectionImpl: void connect()>  ->_SOURCE_
<libcore.net.url.JarURLConnectionImpl: void connect()>  ->_SOURCE_
<libcore.net.url.FtpURLConnection: void connect()>  ->_SOURCE_
<libcore.net.http.HttpURLConnectionImpl: void connect()>  ->_SOURCE_
<libcore.net.http.HttpURLConnectionImpl: int getResponseCode()>  ->_SOURCE_
<libcore.net.url.FileURLConnection: void connect()>  ->_SOURCE_
<java.io.Reader: int read(java.nio.CharBuffer)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getInetAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getInetAddress()>  ->_SOURCE_
<java.net.Socket: java.net.InetAddress getInetAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.InputStream getInputStream()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.InputStream getInputStream()>  ->_SOURCE_
<java.net.Socket: java.io.InputStream getInputStream()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getKeepAlive()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getKeepAlive()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getLocalAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getLocalAddress()>  ->_SOURCE_
<java.net.Socket: java.net.InetAddress getLocalAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getLocalPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getLocalPort()>  ->_SOURCE_
<java.net.Socket: int getLocalPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.OutputStream getOutputStream()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.OutputStream getOutputStream()>  ->_SOURCE_
<java.net.Socket: java.io.OutputStream getOutputStream()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getPort()>  ->_SOURCE_
<java.net.Socket: int getPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoLinger()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoLinger()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getReceiveBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getReceiveBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSendBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSendBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoTimeout()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getSoTimeout()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoTimeout()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getTcpNoDelay()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getTcpNoDelay()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getLocalSocketAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getLocalSocketAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getRemoteSocketAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getRemoteSocketAddress()>  ->_SOURCE_
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getReuseAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getReuseAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getOOBInline()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getOOBInline()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getTrafficClass()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getTrafficClass()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.FileDescriptor getFileDescriptor$()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.io.FileDescriptor getFileDescriptor$()>  ->_SOURCE_
<java.util.GregorianCalendar: int getActualMaximum(int)>  ->_SOURCE_
<java.util.GregorianCalendar: int getActualMinimum(int)>  ->_SOURCE_
<java.util.GregorianCalendar: int getGreatestMinimum(int)>  ->_SOURCE_
<java.util.GregorianCalendar: java.util.Date getGregorianChange()>  ->_SOURCE_
<java.util.GregorianCalendar: int getLeastMaximum(int)>  ->_SOURCE_
<java.util.GregorianCalendar: int getMaximum(int)>  ->_SOURCE_
<java.util.GregorianCalendar: int getMinimum(int)>  ->_SOURCE_
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])>  ->_SOURCE_
<java.nio.SocketChannelImpl: long read(java.nio.ByteBuffer[],int,int)>  ->_SOURCE_
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[],int,int)>  ->_SOURCE_
<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.FileChannelImpl: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.DatagramChannelImpl: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.channels.DatagramChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.SocketChannelImpl: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.PipeImpl$PipeSourceChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.channels.Channels$InputStreamChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.net.DatagramPacket: java.net.InetAddress getAddress()>  ->_SOURCE_
<java.net.DatagramPacket: byte[] getData()>  ->_SOURCE_
<java.net.DatagramPacket: int getLength()>  ->_SOURCE_
<java.net.DatagramPacket: int getOffset()>  ->_SOURCE_
<java.net.DatagramPacket: int getPort()>  ->_SOURCE_
<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>  ->_SOURCE_
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>  ->_SOURCE_
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>  ->_SOURCE_
<java.net.NetworkInterface: java.lang.String getName()>  ->_SOURCE_
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>  ->_SOURCE_
<java.net.NetworkInterface: java.lang.String getDisplayName()>  ->_SOURCE_
<java.net.Inet6Address: java.lang.String toString()>  ->_SOURCE_
<java.nio.FileChannelImpl: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>  ->_SOURCE_
<java.net.DatagramSocket: int getLocalPort()>  ->_SOURCE_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void receive(java.net.DatagramPacket)>  ->_SOURCE_
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>  ->_SOURCE_
<java.nio.DatagramChannelImpl: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.SocketChannelImpl: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.SocketChannelImpl: long read(java.nio.ByteBuffer[],int,int)>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: boolean getSpecified()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.Element getOwnerElement()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeNamespace()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getEntities()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getNotations()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getInternalSubset()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMImplementationImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getWholeText()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getTarget()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getData()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: java.lang.Object getParameter(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: org.w3c.dom.DOMStringList getParameterNames()>  ->_SOURCE_
<java.io.StringReader: int read()>  ->_SOURCE_
<java.io.StringReader: int read(char[],int,int)>  ->_SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: java.lang.Object getAttribute(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: boolean getFeature(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItem(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: int getLength()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>  ->_SOURCE_
<java.lang.ProcessManager$ProcessImpl: java.io.InputStream getInputStream()>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypes()>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.SyncStatusInfo: long getPeriodicSyncTime(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: java.lang.String getColumnName(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<droidsafe.concrete.DSCursor: int getInt(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: long getLong(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: short getShort(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: float getFloat(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: double getDouble(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: byte[] getBlob(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: java.lang.String getString(int)>  ->_SOURCE_
<droidsafe.concrete.DSCursor: boolean isBeforeFirst()>  ->_SOURCE_
<droidsafe.concrete.DSCursor: boolean isFirst()>  ->_SOURCE_
<droidsafe.concrete.DSCursor: boolean isLast()>  ->_SOURCE_
<droidsafe.concrete.DSCursor: int getType(int)>  ->_SOURCE_
<android.content.IContentService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.ProxyProperties: java.net.InetSocketAddress getSocketAddress()>  ->_SOURCE_
<android.net.ProxyProperties: java.lang.String getHost()>  ->_SOURCE_
<android.net.ProxyProperties: int getPort()>  ->_SOURCE_
<android.net.ProxyProperties: java.lang.String getExclusionList()>  ->_SOURCE_
<android.net.Proxy: java.net.Proxy getProxy(android.content.Context,java.lang.String)>  ->_SOURCE_
<android.net.Proxy: java.lang.String getHost(android.content.Context)>  ->_SOURCE_
<android.net.Proxy: java.lang.String getDefaultHost()>  ->_SOURCE_
<android.net.Proxy: org.apache.http.HttpHost getPreferredHttpHost(android.content.Context,java.lang.String)>  ->_SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(int)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfacePairs()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getGlobalProxy()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getProxy()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>  ->_SOURCE_
<com.android.internal.statusbar.IStatusBarService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: int getFrequencyBand()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiConfiguration getWifiApConfiguration()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getConfigFile()>  ->_SOURCE_
<android.net.wifi.WifiConfiguration: int getAuthType()>  ->_SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getSSID()>  ->_SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getBSSID()>  ->_SOURCE_
<android.net.wifi.WifiInfo: int getRssi()>  ->_SOURCE_
<android.net.wifi.WifiInfo: int getLinkSpeed()>  ->_SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>  ->_SOURCE_
<android.net.wifi.WifiInfo: int getNetworkId()>  ->_SOURCE_
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>  ->_SOURCE_
<android.net.wifi.WifiInfo: int getIpAddress()>  ->_SOURCE_
<android.net.wifi.WifiInfo: boolean getHiddenSSID()>  ->_SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getNamespaceUri(int)>  ->_SOURCE_
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>  ->_SOURCE_
<android.app.DownloadManager$CursorTranslator: int getInt(int)>  ->_SOURCE_
<android.app.DownloadManager$CursorTranslator: long getLong(int)>  ->_SOURCE_
<android.app.DownloadManager$CursorTranslator: java.lang.String getString(int)>  ->_SOURCE_
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()>  ->_SOURCE_
<android.location.Country: java.lang.String getCountryIso()>  ->_SOURCE_
<android.location.Country: int getSource()>  ->_SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()>  ->_SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)>  ->_SOURCE_
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)>  ->_SOURCE_
<android.os.SystemProperties: java.lang.String get(java.lang.String)>  ->_SOURCE_
<android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>  ->_SOURCE_
<android.os.SystemProperties: int getInt(java.lang.String,int)>  ->_SOURCE_
<android.os.SystemProperties: long getLong(java.lang.String,long)>  ->_SOURCE_
<android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>  ->_SOURCE_
<android.database.sqlite.SQLiteProgram: int getUniqueId()>  ->_SOURCE_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getNfcAdapter(android.content.Context)>  ->_SOURCE_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)>  ->_SOURCE_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter()>  ->_SOURCE_
<android.nfc.NfcAdapter: android.content.Context getContext()>  ->_SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcAdapter getService()>  ->_SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcTag getTagService()>  ->_SOURCE_
<android.nfc.NfcAdapter: int getAdapterState()>  ->_SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()>  ->_SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getUri()>  ->_SOURCE_
<android.content.res.AssetManager$AssetInputStream: int read()>  ->_SOURCE_
<android.content.res.AssetManager$AssetInputStream: int read(byte[])>  ->_SOURCE_
<android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getByteCount(java.lang.String,int,int,int)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: int getThrottle(java.lang.String)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getResetTime(java.lang.String)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getPeriodStartTime(java.lang.String)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getCliffThreshold(java.lang.String,int)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: int getCliffLevel(java.lang.String,int)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getHelpUri()>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>  ->_SOURCE_
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()>  ->_SOURCE_
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener()>  ->_SOURCE_
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener()>  ->_SOURCE_
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>  ->_SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()>  ->_SOURCE_
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()>  ->_SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()>  ->_SOURCE_
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()>  ->_SOURCE_
<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)>  ->_SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()>  ->_SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()>  ->_SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>  ->_SOURCE_
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()>  ->_SOURCE_
<android.net.wifi.p2p.WifiP2pDeviceList: java.util.Collection getDeviceList()>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: int getUidPolicy(int)>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isUidForeground(int)>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies()>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>  ->_SOURCE_
<android.content.ClipData: int getItemCount()>  ->_SOURCE_
<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>  ->_SOURCE_
<android.content.ClipData$Item: android.net.Uri getUri()>  ->_SOURCE_
<android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: boolean isStreamMute(int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getStreamVolume(int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getStreamMaxVolume(int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getLastAudibleStreamVolume(int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getRingerMode()>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getVibrateSetting(int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getMode()>  ->_SOURCE_
<android.media.IAudioService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>  ->_SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)>  ->_SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)>  ->_SOURCE_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()>  ->_SOURCE_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)>  ->_SOURCE_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()>  ->_SOURCE_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)>  ->_SOURCE_
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()>  ->_SOURCE_
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)>  ->_SOURCE_
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getCompleteVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getCompleteVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimImpi()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimDomain()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String[] getIsimImpu()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCallState()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataActivity()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataState()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getActivePhoneType()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconIndex()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconMode()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaEriText()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoiceMessageCount()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getNetworkType()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getLteOnCdmaMode()>  ->_SOURCE_
<android.telephony.SignalStrength: int getGsmSignalStrength()>  ->_SOURCE_
<android.telephony.SignalStrength: int getGsmBitErrorRate()>  ->_SOURCE_
<android.telephony.SignalStrength: int getCdmaDbm()>  ->_SOURCE_
<android.telephony.SignalStrength: int getCdmaEcio()>  ->_SOURCE_
<android.telephony.SignalStrength: int getEvdoDbm()>  ->_SOURCE_
<android.telephony.SignalStrength: int getEvdoEcio()>  ->_SOURCE_
<android.telephony.SignalStrength: int getEvdoSnr()>  ->_SOURCE_
<android.telephony.SignalStrength: int getLevel()>  ->_SOURCE_
<android.telephony.SignalStrength: int getAsuLevel()>  ->_SOURCE_
<android.telephony.SignalStrength: int getDbm()>  ->_SOURCE_
<android.telephony.SignalStrength: int getGsmDbm()>  ->_SOURCE_
<android.telephony.SignalStrength: int getGsmLevel()>  ->_SOURCE_
<android.telephony.SignalStrength: int getGsmAsuLevel()>  ->_SOURCE_
<android.telephony.SignalStrength: int getCdmaLevel()>  ->_SOURCE_
<android.telephony.SignalStrength: int getCdmaAsuLevel()>  ->_SOURCE_
<android.telephony.SignalStrength: int getEvdoLevel()>  ->_SOURCE_
<android.telephony.SignalStrength: int getEvdoAsuLevel()>  ->_SOURCE_
<android.telephony.SignalStrength: int getLteDbm()>  ->_SOURCE_
<android.telephony.SignalStrength: int getLteLevel()>  ->_SOURCE_
<android.telephony.SignalStrength: int getLteAsuLevel()>  ->_SOURCE_
<android.telephony.SignalStrength: boolean isGsm()>  ->_SOURCE_
<android.telephony.SignalStrength: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getDefaultPhone()>  ->_SOURCE_
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()>  ->_SOURCE_
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.telephony.ServiceState: int getState()>  ->_SOURCE_
<android.telephony.ServiceState: boolean getRoaming()>  ->_SOURCE_
<android.telephony.ServiceState: int getCdmaRoamingIndicator()>  ->_SOURCE_
<android.telephony.ServiceState: int getCdmaDefaultRoamingIndicator()>  ->_SOURCE_
<android.telephony.ServiceState: int getCdmaEriIconIndex()>  ->_SOURCE_
<android.telephony.ServiceState: int getCdmaEriIconMode()>  ->_SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>  ->_SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>  ->_SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>  ->_SOURCE_
<android.telephony.ServiceState: boolean getIsManualSelection()>  ->_SOURCE_
<android.telephony.ServiceState: java.lang.String toString()>  ->_SOURCE_
<android.telephony.ServiceState: int getRadioTechnology()>  ->_SOURCE_
<android.telephony.ServiceState: int getCssIndicator()>  ->_SOURCE_
<android.telephony.ServiceState: int getNetworkId()>  ->_SOURCE_
<android.telephony.ServiceState: int getSystemId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.content.Context getContext()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String[] getActiveApnTypes()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getActiveApnHost(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getActiveApnHost(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.net.LinkProperties getLinkProperties(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.SignalStrength getSignalStrength()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.util.List getPendingMmiCodes()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.util.List getPendingMmiCodes()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List getPendingMmiCodes()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getPendingMmiCodes()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getIccRecordsLoaded()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getIccRecordsLoaded()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccCard getIccCard()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCard getIccCard()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getForegroundCall()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getBackgroundCall()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getRingingCall()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getMessageWaitingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMessageWaitingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getCallForwardingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getCallForwardingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: int getVoiceMessageCount()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: int getVoiceMessageCount()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getCallForwardingOption(int,android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getOutgoingCallerIdDisplay(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getCallWaiting(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getAvailableNetworks(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getAvailableNetworks(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getNeighboringCids(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getDataCallList(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getUnitTestMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getDataRoamingEnabled()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: boolean getDataRoamingEnabled()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getDataRoamingEnabled()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataRoamingEnabled()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaMin()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaMin()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaMin()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaPrlVersion()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaPrlVersion()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaPrlVersion()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getEsn()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getEsn()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getEsn()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getEsn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getMeid()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getCellBroadcastSmsConfig(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconIndex()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconIndex()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconIndex()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconMode()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaEriText()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaEriText()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaEriText()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: int getLteOnCdmaMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: int getLteOnCdmaMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>  ->_SOURCE_
<android.location.GpsStatus: int getTimeToFirstFix()>  ->_SOURCE_
<android.location.GpsStatus: java.lang.Iterable getSatellites()>  ->_SOURCE_
<android.location.GpsStatus: int getMaxSatellites()>  ->_SOURCE_
<android.location.LocationProvider: java.lang.String getName()>  ->_SOURCE_
<android.location.LocationProvider: int getPowerRequirement()>  ->_SOURCE_
<android.location.LocationProvider: int getAccuracy()>  ->_SOURCE_
<android.location.Criteria: int getHorizontalAccuracy()>  ->_SOURCE_
<android.location.Criteria: int getVerticalAccuracy()>  ->_SOURCE_
<android.location.Criteria: int getSpeedAccuracy()>  ->_SOURCE_
<android.location.Criteria: int getBearingAccuracy()>  ->_SOURCE_
<android.location.Criteria: int getAccuracy()>  ->_SOURCE_
<android.location.Criteria: int getPowerRequirement()>  ->_SOURCE_
<android.location.Location: java.lang.String getProvider()>  ->_SOURCE_
<android.location.Location: long getTime()>  ->_SOURCE_
<android.location.Location: double getLatitude()>  ->_SOURCE_
<android.location.Location: double getLongitude()>  ->_SOURCE_
<android.location.Location: double getAltitude()>  ->_SOURCE_
<android.location.Location: float getSpeed()>  ->_SOURCE_
<android.location.Location: float getBearing()>  ->_SOURCE_
<android.location.Location: float getAccuracy()>  ->_SOURCE_
<android.location.Location: android.os.Bundle getExtras()>  ->_SOURCE_
<android.net.NetworkInfo: int getType()>  ->_SOURCE_
<android.net.NetworkInfo: int getSubtype()>  ->_SOURCE_
<android.net.NetworkInfo: java.lang.String getTypeName()>  ->_SOURCE_
<android.net.NetworkInfo: java.lang.String getSubtypeName()>  ->_SOURCE_
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>  ->_SOURCE_
<android.net.NetworkInfo: java.lang.String getReason()>  ->_SOURCE_
<android.net.NetworkInfo: java.lang.String getExtraInfo()>  ->_SOURCE_
<android.net.LinkProperties: java.lang.String getInterfaceName()>  ->_SOURCE_
<android.net.LinkProperties: java.util.Collection getAddresses()>  ->_SOURCE_
<android.net.LinkProperties: java.util.Collection getLinkAddresses()>  ->_SOURCE_
<android.net.LinkProperties: java.util.Collection getDnses()>  ->_SOURCE_
<android.net.LinkProperties: java.util.Collection getRoutes()>  ->_SOURCE_
<android.net.LinkProperties: android.net.ProxyProperties getHttpProxy()>  ->_SOURCE_
<android.net.NetworkQuotaInfo: long getEstimatedBytes()>  ->_SOURCE_
<android.net.NetworkQuotaInfo: long getSoftLimitBytes()>  ->_SOURCE_
<android.net.NetworkQuotaInfo: long getHardLimitBytes()>  ->_SOURCE_
<android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)>  ->_SOURCE_
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection)>  ->_SOURCE_
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>  ->_SOURCE_
<android.app.IServiceConnection$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)>  ->_SOURCE_
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()>  ->_SOURCE_
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>  ->_SOURCE_
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()>  ->_SOURCE_
<android.net.LocalSocket: java.io.InputStream getInputStream()>  ->_SOURCE_
<android.net.LocalSocket: java.io.OutputStream getOutputStream()>  ->_SOURCE_
<android.net.LocalSocket: int getReceiveBufferSize()>  ->_SOURCE_
<android.net.LocalSocket: int getSoTimeout()>  ->_SOURCE_
<android.net.LocalSocket: int getSendBufferSize()>  ->_SOURCE_
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()>  ->_SOURCE_
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()>  ->_SOURCE_
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()>  ->_SOURCE_
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()>  ->_SOURCE_
<android.net.LocalSocketAddress: java.lang.String getName()>  ->_SOURCE_
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>  ->_SOURCE_
<android.widget.CursorAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.RemoteViewsAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.ExpandableListConnector: java.lang.Object getItem(int)>  ->_SOURCE_
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.TextView$SuggestionsPopupWindow$SuggestionAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.ArrayAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.text.method.CharacterPickerDialog$OptionsAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.support.v4.widget.CursorAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.SimpleAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.BaseAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.FilterQueryProvider: android.database.Cursor runQuery(java.lang.CharSequence)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.InputStream getInputStream()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.OutputStream getOutputStream()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: javax.net.ssl.SSLSession getSession()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getWantClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoTimeout()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getSoTimeout()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.FileDescriptor getFileDescriptor$()>  ->_SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>  ->_SOURCE_
<android.widget.RemoteViewsAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.EditText: android.text.Editable getText()>  ->_SOURCE_
<android.widget.CalendarView$WeeksAdapter: int getCount()>  ->_SOURCE_
<android.widget.Adapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.HeaderViewListAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.CursorAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.RemoteViewsAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.ExpandableListConnector: java.lang.Object getItem(int)>  ->_SOURCE_
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.TextView$SuggestionsPopupWindow$SuggestionAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.ArrayAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.text.method.CharacterPickerDialog$OptionsAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.support.v4.widget.CursorAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.SimpleAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.BaseAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.Spinner$DropDownAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.CalendarView$WeeksAdapter: long getItemId(int)>  ->_SOURCE_
<android.widget.CalendarView$WeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  ->_SOURCE_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<java.util.zip.CheckedInputStream: int read()>  ->_SOURCE_
<java.util.zip.CheckedInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)>  ->_SOURCE_
<android.os.ServiceManagerNative: android.os.IBinder asBinder()>  ->_SOURCE_
<android.app.LoadedApk$WarningContextClassLoader: java.net.URL getResource(java.lang.String)>  ->_SOURCE_
<android.app.LoadedApk$WarningContextClassLoader: java.util.Enumeration getResources(java.lang.String)>  ->_SOURCE_
<android.app.LoadedApk$WarningContextClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>  ->_SOURCE_
<android.app.LoadedApk$ServiceDispatcher: android.app.ServiceConnectionLeaked getLocation()>  ->_SOURCE_
<android.app.LoadedApk$ServiceDispatcher: android.content.ServiceConnection getServiceConnection()>  ->_SOURCE_
<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()>  ->_SOURCE_
<android.app.LoadedApk$ServiceDispatcher: int getFlags()>  ->_SOURCE_
<android.app.LoadedApk$ServiceDispatcher: java.lang.RuntimeException getUnbindLocation()>  ->_SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()>  ->_SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>  ->_SOURCE_
<javax.net.ssl.HttpsURLConnection: java.security.Principal getPeerPrincipal()>  ->_SOURCE_
<javax.net.ssl.HttpsURLConnection: java.security.Principal getLocalPrincipal()>  ->_SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()>  ->_SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: javax.net.ssl.SSLSession getSession()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: javax.net.ssl.SSLSession getSession()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getWantClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getWantClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getApplicationBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getApplicationBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getCipherSuite()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getCipherSuite()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getCreationTime()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getCreationTime()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getId()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] getId()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getLastAccessedTime()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getLastAccessedTime()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getLocalPrincipal()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getLocalPrincipal()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPacketBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPacketBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getPeerHost()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getPeerHost()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPeerPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPeerPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getPeerPrincipal()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getPeerPrincipal()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getProtocol()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getProtocol()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.Object getValue(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.Object getValue(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String[] getValueNames()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String[] getValueNames()>  ->_SOURCE_
<libcore.net.url.FtpURLInputStream: int read()>  ->_SOURCE_
<libcore.net.url.FtpURLInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>  ->_SOURCE_
<libcore.net.http.HttpURLConnectionImpl: int getResponseCode()>  ->_SOURCE_
<java.net.HttpURLConnection: int getResponseCode()>  ->_SOURCE_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>  ->_SOURCE_
<libcore.net.http.ResponseHeaders: java.net.URI getUri()>  ->_SOURCE_
<libcore.net.http.ResponseHeaders: java.lang.String getConnection()>  ->_SOURCE_
<java.nio.PipeImpl$PipeSourceChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void receive(java.net.DatagramPacket)>  ->_SOURCE_
<java.nio.SocketChannelImpl$SocketChannelInputStream: int read()>  ->_SOURCE_
<java.nio.SocketChannelImpl$SocketChannelInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getData()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CharacterDataImpl: int getLength()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getLineNumber()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getColumnNumber()>  ->_SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.DOMImplementation getDOMImplementation()>  ->_SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document newDocument()>  ->_SOURCE_
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document parse(org.xml.sax.InputSource)>  ->_SOURCE_
<java.security.Provider$Service: java.lang.String getType()>  ->_SOURCE_
<java.security.Provider$Service: java.lang.String getAlgorithm()>  ->_SOURCE_
<java.security.Provider$Service: java.lang.String getClassName()>  ->_SOURCE_
<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>  ->_SOURCE_
<java.security.Provider$Service: java.util.List getAliases()>  ->_SOURCE_
<android.database.IContentObserver$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypes()>  ->_SOURCE_
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(int)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfacePairs()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getGlobalProxy()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getProxy()>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>  ->_SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>  ->_SOURCE_
<org.apache.http.HttpHost: java.lang.String getHostName()>  ->_SOURCE_
<com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()>  ->_SOURCE_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.util.AsyncService: android.os.Handler getHandler()>  ->_SOURCE_
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>  ->_SOURCE_
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()>  ->_SOURCE_
<android.database.CursorWrapper: java.lang.String getColumnName(int)>  ->_SOURCE_
<android.database.CursorWrapper: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.CursorWrapper: double getDouble(int)>  ->_SOURCE_
<android.database.CursorWrapper: android.os.Bundle getExtras()>  ->_SOURCE_
<android.database.CursorWrapper: float getFloat(int)>  ->_SOURCE_
<android.app.DownloadManager$CursorTranslator: int getInt(int)>  ->_SOURCE_
<android.database.CursorWrapper: int getInt(int)>  ->_SOURCE_
<android.app.DownloadManager$CursorTranslator: long getLong(int)>  ->_SOURCE_
<android.database.CursorWrapper: long getLong(int)>  ->_SOURCE_
<android.database.CursorWrapper: short getShort(int)>  ->_SOURCE_
<android.app.DownloadManager$CursorTranslator: java.lang.String getString(int)>  ->_SOURCE_
<android.database.CursorWrapper: java.lang.String getString(int)>  ->_SOURCE_
<android.database.CursorWrapper: byte[] getBlob(int)>  ->_SOURCE_
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()>  ->_SOURCE_
<android.database.CursorWrapper: int getType(int)>  ->_SOURCE_
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)>  ->_SOURCE_
<android.database.CursorWindow: java.lang.String getName()>  ->_SOURCE_
<android.database.CursorWindow: int getStartPosition()>  ->_SOURCE_
<android.database.CursorWindow: int getNumRows()>  ->_SOURCE_
<android.database.CursorWindow: int getType(int,int)>  ->_SOURCE_
<android.database.CursorWindow: byte[] getBlob(int,int)>  ->_SOURCE_
<android.database.CursorWindow: java.lang.String getString(int,int)>  ->_SOURCE_
<android.database.CursorWindow: long getLong(int,int)>  ->_SOURCE_
<android.database.CursorWindow: double getDouble(int,int)>  ->_SOURCE_
<android.database.CursorWindow: short getShort(int,int)>  ->_SOURCE_
<android.database.CursorWindow: int getInt(int,int)>  ->_SOURCE_
<android.database.CursorWindow: float getFloat(int,int)>  ->_SOURCE_
<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: short getShort(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: int getInt(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: long getLong(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: float getFloat(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: double getDouble(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: int getType(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()>  ->_SOURCE_
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()>  ->_SOURCE_
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcTag getNfcTagInterface()>  ->_SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)>  ->_SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: int getState()>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: int[] getTechList(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: boolean isNdef(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: boolean isPresent(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.TransceiveResult transceive(int,byte[],boolean)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.NdefMessage ndefRead(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.Tag rediscover(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: int getTimeout(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: int getMaxTransceiveLength(int)>  ->_SOURCE_
<android.nfc.NfcActivityManager: android.nfc.NdefMessage createMessage()>  ->_SOURCE_
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()>  ->_SOURCE_
<android.nfc.NdefMessage: byte[] toByteArray()>  ->_SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle close(java.lang.String,android.os.IBinder)>  ->_SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle transceive(java.lang.String,byte[])>  ->_SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)>  ->_SOURCE_
<android.nfc.TechListParcel: java.lang.String[][] getTechLists()>  ->_SOURCE_
<android.nfc.INfcAdapter$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.IThrottleManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.view.textservice.TextInfo: java.lang.String getText()>  ->_SOURCE_
<android.view.textservice.TextInfo: int getCookie()>  ->_SOURCE_
<android.view.textservice.TextInfo: int getSequence()>  ->_SOURCE_
<android.view.textservice.SuggestionsInfo: int getCookie()>  ->_SOURCE_
<android.view.textservice.SuggestionsInfo: int getSequence()>  ->_SOURCE_
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()>  ->_SOURCE_
<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()>  ->_SOURCE_
<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesSessionListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>  ->_SOURCE_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)>  ->_SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()>  ->_SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: android.net.wifi.p2p.WifiP2pDevice getOwner()>  ->_SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.util.Collection getClientList()>  ->_SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()>  ->_SOURCE_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getInterface()>  ->_SOURCE_
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.NetworkTemplate: int getMatchRule()>  ->_SOURCE_
<android.net.NetworkTemplate: java.lang.String getSubscriberId()>  ->_SOURCE_
<android.net.INetworkPolicyListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: java.lang.Object getProperty(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.EntityResolver getEntityResolver()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.DTDHandler getDTDHandler()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ContentHandler getContentHandler()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ErrorHandler getErrorHandler()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: java.lang.Object getProperty(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.EntityResolver getEntityResolver()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.DTDHandler getDTDHandler()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ContentHandler getContentHandler()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ErrorHandler getErrorHandler()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>  ->_SOURCE_
<org.kxml2.io.KXmlParser: java.lang.String getNamespaceUri(int)>  ->_SOURCE_
<java.util.zip.GZIPInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: boolean isStreamMute(int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getStreamVolume(int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getStreamMaxVolume(int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getLastAudibleStreamVolume(int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getRingerMode()>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getVibrateSetting(int)>  ->_SOURCE_
<android.media.IAudioService$Stub$Proxy: int getMode()>  ->_SOURCE_
<android.widget.TextView: java.lang.CharSequence getText()>  ->_SOURCE_
<android.widget.SearchView: java.lang.CharSequence getQuery()>  ->_SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>  ->_SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>  ->_SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>  ->_SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>  ->_SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>  ->_SOURCE_
<android.telephony.gsm.GsmCellLocation: int getLac()>  ->_SOURCE_
<android.telephony.gsm.GsmCellLocation: int getCid()>  ->_SOURCE_
<android.telephony.gsm.GsmCellLocation: int getPsc()>  ->_SOURCE_
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.BaseCommands: int getLteOnCdmaMode()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipUri()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.BaseCommands: int getLteOnCdmaMode()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getAvailableNetworks(android.os.Message)>  ->_SOURCE_
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()>  ->_SOURCE_
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.content.Context getContext()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String[] getActiveApnTypes()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getActiveApnHost(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.net.LinkProperties getLinkProperties(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: android.telephony.SignalStrength getSignalStrength()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.util.List getPendingMmiCodes()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getIccRecordsLoaded()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccCard getIccCard()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getForegroundCall()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getBackgroundCall()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getRingingCall()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getMessageWaitingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getCallForwardingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaMin()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaPrlVersion()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: int getVoiceMessageCount()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getCallForwardingOption(int,android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getOutgoingCallerIdDisplay(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getCallWaiting(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getAvailableNetworks(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getNeighboringCids(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getDataCallList(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getUnitTestMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: boolean getDataRoamingEnabled()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getEsn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getMeid()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getCellBroadcastSmsConfig(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconIndex()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaEriText()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone getActivePhone()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: int getLteOnCdmaMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.CallTracker getCallTracker()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.util.List getPendingMmiCodes()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getEsn()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: boolean getDataRoamingEnabled()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.CallTracker getCallTracker()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMessageWaitingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List getPendingMmiCodes()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaPrlVersion()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaMin()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getEsn()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: void getAvailableNetworks(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getDataRoamingEnabled()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getCallForwardingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconIndex()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconMode()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaEriText()>  ->_SOURCE_
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCallState()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataActivity()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataState()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getActivePhoneType()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconIndex()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconMode()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaEriText()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoiceMessageCount()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getNetworkType()>  ->_SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getLteOnCdmaMode()>  ->_SOURCE_
<android.net.LinkCapabilities: java.lang.String get(int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmCall: java.util.List getConnections()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaCall: java.util.List getConnections()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipCallBase: java.util.List getConnections()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmCall: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getEarliestConnection()>  ->_SOURCE_
<com.android.internal.telephony.Call: long getEarliestCreateTime()>  ->_SOURCE_
<com.android.internal.telephony.Call: long getEarliestConnectTime()>  ->_SOURCE_
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getLatestConnection()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getAddress()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getAddress()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getAddress()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getCnapName()>  ->_SOURCE_
<com.android.internal.telephony.Connection: java.lang.String getCnapName()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getOrigDialString()>  ->_SOURCE_
<com.android.internal.telephony.Connection: java.lang.String getOrigDialString()>  ->_SOURCE_
<com.android.internal.telephony.Connection: int getCnapNamePresentation()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getCreateTime()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getCreateTime()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getCreateTime()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getConnectTime()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getConnectTime()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getConnectTime()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getDisconnectTime()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getDisconnectTime()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getDisconnectTime()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getHoldDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getHoldDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getHoldDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.Connection: java.lang.Object getUserData()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getRemainingPostDialString()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getRemainingPostDialString()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: java.lang.String getRemainingPostDialString()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: int getNumberPresentation()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: int getNumberPresentation()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: int getNumberPresentation()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.UUSInfo getUUSInfo()>  ->_SOURCE_
<com.android.internal.telephony.Connection: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.UUSInfo: int getDcs()>  ->_SOURCE_
<com.android.internal.telephony.UUSInfo: int getType()>  ->_SOURCE_
<com.android.internal.telephony.UUSInfo: byte[] getUserData()>  ->_SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaLong()>  ->_SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaShort()>  ->_SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorNumeric()>  ->_SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()>  ->_SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.ArrayList buildValidRawData(java.util.ArrayList)>  ->_SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManager: byte[] makeSmsRecordData(int,byte[])>  ->_SOURCE_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>  ->_SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimImpi()>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimDomain()>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String[] getIsimImpu()>  ->_SOURCE_
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.String getTag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.Object[] getValues()>  ->_SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub: com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder)>  ->_SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getCompleteVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain()>  ->_SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu()>  ->_SOURCE_
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>  ->_SOURCE_
<android.location.GeocoderParams: java.util.Locale getLocale()>  ->_SOURCE_
<android.location.GeocoderParams: java.lang.String getClientPackage()>  ->_SOURCE_
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.location.GpsSatellite: int getPrn()>  ->_SOURCE_
<android.location.GpsSatellite: float getSnr()>  ->_SOURCE_
<android.location.GpsSatellite: float getElevation()>  ->_SOURCE_
<android.location.GpsSatellite: float getAzimuth()>  ->_SOURCE_
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.LinkAddress: java.net.InetAddress getAddress()>  ->_SOURCE_
<android.net.LinkAddress: int getNetworkPrefixLength()>  ->_SOURCE_
<android.net.RouteInfo: android.net.LinkAddress getDestination()>  ->_SOURCE_
<android.net.RouteInfo: java.net.InetAddress getGateway()>  ->_SOURCE_
<android.net.DhcpInfoInternal: java.util.Collection getRoutes()>  ->_SOURCE_
<android.app.IServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection)>  ->_SOURCE_
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>  ->_SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()>  ->_SOURCE_
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()>  ->_SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.database.CursorWindow getWindow(int)>  ->_SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.os.Bundle getExtras()>  ->_SOURCE_
<android.os.MemoryFile$MemoryInputStream: int read()>  ->_SOURCE_
<android.os.MemoryFile$MemoryInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.net.LocalSocketImpl: java.io.InputStream getInputStream()>  ->_SOURCE_
<android.net.LocalSocketImpl: java.io.OutputStream getOutputStream()>  ->_SOURCE_
<android.net.LocalSocketImpl: java.io.FileDescriptor getFileDescriptor()>  ->_SOURCE_
<android.net.LocalSocketImpl: java.lang.Object getOption(int)>  ->_SOURCE_
<android.net.LocalSocketImpl: java.io.FileDescriptor[] getAncillaryFileDescriptors()>  ->_SOURCE_
<android.net.LocalSocketImpl: android.net.Credentials getPeerCredentials()>  ->_SOURCE_
<android.net.LocalSocketImpl: android.net.LocalSocketAddress getSockAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.SSLParametersImpl getDefault()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509TrustManager getDefaultTrustManager()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite[] getEnabledCipherSuitesMember()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.ServerSessionContext getServerSessionContext()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.ClientSessionContext getClientSessionContext()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509TrustManager getTrustManager()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.security.SecureRandom getSecureRandom()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.security.SecureRandom getSecureRandomMember()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getWantClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getId()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getEncoded()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getCreationTime()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getLastAccessedTime()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getApplicationBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPacketBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getLocalPrincipal()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getPeerPrincipal()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getPeerHost()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPeerPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getCipherSuite()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getProtocol()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.Object getValue(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String[] getValueNames()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getApplicationBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getCipherSuite()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getCreationTime()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] getId()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getLastAccessedTime()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getLocalPrincipal()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPacketBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getPeerHost()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPeerPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getPeerPrincipal()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getProtocol()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.Object getValue(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String[] getValueNames()>  ->_SOURCE_
<android.net.SSLCertificateSocketFactory$1: java.security.cert.X509Certificate[] getAcceptedIssuers()>  ->_SOURCE_
<android.net.http.HttpsConnection$1: java.security.cert.X509Certificate[] getAcceptedIssuers()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLInputStream: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLInputStream: int read(byte[],int,int)>  ->_SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSession getSession()>  ->_SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.lang.String getCipherSuite()>  ->_SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getLocalCertificates()>  ->_SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getPeerCertificates()>  ->_SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: javax.security.cert.X509Certificate[] getPeerCertificateChain()>  ->_SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getPeerPrincipal()>  ->_SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getLocalPrincipal()>  ->_SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSocket getSocket()>  ->_SOURCE_
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: com.android.internal.widget.IRemoteViewsFactory getRemoteViewsFactory()>  ->_SOURCE_
<android.widget.HeaderViewListAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.ExpandableListConnector: java.lang.Object getItem(int)>  ->_SOURCE_
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)>  ->_SOURCE_
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<libcore.net.http.RequestHeaders: java.net.URI getUri()>  ->_SOURCE_
<libcore.net.http.RequestHeaders: java.lang.String getConnection()>  ->_SOURCE_
<libcore.net.http.FixedLengthInputStream: int read(byte[],int,int)>  ->_SOURCE_
<libcore.net.http.UnknownLengthHttpInputStream: int read(byte[],int,int)>  ->_SOURCE_
<libcore.net.http.ChunkedInputStream: int read(byte[],int,int)>  ->_SOURCE_
<javax.net.ssl.SSLParameters: java.lang.String[] getCipherSuites()>  ->_SOURCE_
<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()>  ->_SOURCE_
<javax.net.ssl.SSLParameters: boolean getNeedClientAuth()>  ->_SOURCE_
<javax.net.ssl.SSLParameters: boolean getWantClientAuth()>  ->_SOURCE_
<java.util.jar.JarFile$JarFileInputStream: int read()>  ->_SOURCE_
<java.util.zip.ZipFile$ZipInflaterInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.ZipFile$RAFStream: int read()>  ->_SOURCE_
<java.util.zip.ZipFile$RAFStream: int read(byte[],int,int)>  ->_SOURCE_
<java.net.PlainSocketImpl$PlainSocketInputStream: int read()>  ->_SOURCE_
<java.net.PlainSocketImpl$PlainSocketInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMImplementationImpl: org.apache.harmony.xml.dom.DOMImplementationImpl getInstance()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMImplementationImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DocumentType getDoctype()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getDocumentElement()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMImplementation getImplementation()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getInputEncoding()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlEncoding()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: boolean getXmlStandalone()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlVersion()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: boolean getStrictErrorChecking()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getDocumentURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMConfiguration getDomConfig()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMap(org.apache.harmony.xml.dom.NodeImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMapForRead(org.apache.harmony.xml.dom.NodeImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getLocalName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNamespaceURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.Element getOwnerElement()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getPrefix()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: boolean getSpecified()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getData()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getTarget()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CDATASectionImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CDATASectionImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.TextImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getWholeText()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttribute(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.apache.harmony.xml.dom.AttrImpl getAttributeNode(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.apache.harmony.xml.dom.AttrImpl getAttributeNodeNS(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getLocalName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNamespaceURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getPrefix()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getTagName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()>  ->_SOURCE_
<org.apache.harmony.xml.dom.EntityReferenceImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.EntityReferenceImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CDATASectionImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CDATASectionImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CommentImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CommentImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getEntities()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getInternalSubset()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getNotations()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getTextContent()>  ->_SOURCE_
<android.database.IContentObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()>  ->_SOURCE_
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()>  ->_SOURCE_
<android.database.AbstractCursor: android.database.CursorWindow getWindow()>  ->_SOURCE_
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: int getFrequencyBand()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiConfiguration getWifiApConfiguration()>  ->_SOURCE_
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getConfigFile()>  ->_SOURCE_
<android.location.ICountryDetector$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()>  ->_SOURCE_
<android.location.ICountryListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.MatrixCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.MergeCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<com.android.internal.database.SortCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.AbstractCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.AbstractWindowedCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.MatrixCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.MergeCursor: java.lang.String getString(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.AbstractCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: short getShort(int)>  ->_SOURCE_
<android.database.MatrixCursor: short getShort(int)>  ->_SOURCE_
<android.database.MergeCursor: short getShort(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: int getInt(int)>  ->_SOURCE_
<android.database.MatrixCursor: int getInt(int)>  ->_SOURCE_
<android.database.MergeCursor: int getInt(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: int getInt(int)>  ->_SOURCE_
<android.database.AbstractCursor: int getInt(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: long getLong(int)>  ->_SOURCE_
<android.database.MatrixCursor: long getLong(int)>  ->_SOURCE_
<android.database.MergeCursor: long getLong(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: long getLong(int)>  ->_SOURCE_
<android.database.AbstractCursor: long getLong(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: float getFloat(int)>  ->_SOURCE_
<android.database.MatrixCursor: float getFloat(int)>  ->_SOURCE_
<android.database.MergeCursor: float getFloat(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: double getDouble(int)>  ->_SOURCE_
<android.database.MatrixCursor: double getDouble(int)>  ->_SOURCE_
<android.database.MergeCursor: double getDouble(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: int getType(int)>  ->_SOURCE_
<android.database.MatrixCursor: int getType(int)>  ->_SOURCE_
<android.database.MergeCursor: int getType(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: int getType(int)>  ->_SOURCE_
<android.database.AbstractCursor: int getType(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.MatrixCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.MergeCursor: byte[] getBlob(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.AbstractCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()>  ->_SOURCE_
<android.database.AbstractCursor: android.database.CursorWindow getWindow()>  ->_SOURCE_
<android.database.AbstractCursor: java.lang.String getColumnName(int)>  ->_SOURCE_
<android.database.AbstractCursor: android.net.Uri getNotificationUri()>  ->_SOURCE_
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()>  ->_SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()>  ->_SOURCE_
<android.database.AbstractCursor: android.os.Bundle getExtras()>  ->_SOURCE_
<android.database.AbstractCursor: java.lang.Object getUpdatedField(int)>  ->_SOURCE_
<android.nfc.NfcActivityManager: android.nfc.NdefMessage createMessage()>  ->_SOURCE_
<android.nfc.INdefPushCallback$Stub$Proxy: android.nfc.NdefMessage createMessage()>  ->_SOURCE_
<android.nfc.INdefPushCallback$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.nfc.INfcAdapterExtras$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.nfc.TransceiveResult: byte[] getResponseOrThrow()>  ->_SOURCE_
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)>  ->_SOURCE_
<android.nfc.Tag: int getServiceHandle()>  ->_SOURCE_
<android.nfc.Tag: byte[] getId()>  ->_SOURCE_
<android.nfc.Tag: java.lang.String[] getTechList()>  ->_SOURCE_
<android.nfc.Tag: android.os.Bundle getTechExtras(int)>  ->_SOURCE_
<android.nfc.Tag: android.nfc.INfcTag getTagService()>  ->_SOURCE_
<android.nfc.Tag: int getConnectedTechnology()>  ->_SOURCE_
<android.nfc.INfcTag$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)>  ->_SOURCE_
<android.nfc.NdefRecord: short getTnf()>  ->_SOURCE_
<android.nfc.NdefRecord: byte[] getType()>  ->_SOURCE_
<android.nfc.NdefRecord: byte[] getId()>  ->_SOURCE_
<android.nfc.NdefRecord: byte[] getPayload()>  ->_SOURCE_
<android.nfc.NdefRecord: byte[] toByteArray()>  ->_SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcTag getNfcTagInterface()>  ->_SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)>  ->_SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: int getState()>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getByteCount(java.lang.String,int,int,int)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: int getThrottle(java.lang.String)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getResetTime(java.lang.String)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getPeriodStartTime(java.lang.String)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: long getCliffThreshold(java.lang.String,int)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: int getCliffLevel(java.lang.String,int)>  ->_SOURCE_
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getHelpUri()>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>  ->_SOURCE_
<com.android.internal.textservice.ISpellCheckerSession$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()>  ->_SOURCE_
<android.net.NetworkIdentity: int getType()>  ->_SOURCE_
<android.net.NetworkIdentity: int getSubType()>  ->_SOURCE_
<android.net.NetworkIdentity: java.lang.String getSubscriberId()>  ->_SOURCE_
<android.net.NetworkIdentity: boolean getRoaming()>  ->_SOURCE_
<android.net.INetworkPolicyListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: int getUidPolicy(int)>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isUidForeground(int)>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies()>  ->_SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getLength()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getLength()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getURI(int)>  ->_SOURCE_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getURI(int)>  ->_SOURCE_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getURI(int)>  ->_SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getLocalName(int)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getQName(int)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(int)>  ->_SOURCE_
<org.xml.sax.Attributes: java.lang.String getValue(int)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(int)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String)>  ->_SOURCE_
<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String)>  ->_SOURCE_
<java.util.zip.InflaterInputStream: int read()>  ->_SOURCE_
<java.util.zip.GZIPInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.ZipFile$ZipInflaterInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.util.zip.InflaterInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)>  ->_SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)>  ->_SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: com.android.internal.telephony.IPhoneStateListener asInterface(android.os.IBinder)>  ->_SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.SMSDispatcher: int getNextConcatenatedRef()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: java.lang.String getFormat()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: java.lang.String getFormat()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getCurrentDataConnectionState()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getMdnNumber()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getCdmaMin()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getPrlVersion()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getImsi()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getOtasp()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaCallTracker: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.cdma.CdmaConnection getConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: java.lang.String getFormat()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: android.os.Handler getHandler()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.CallTracker getCallTracker()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.CallTracker getCallTracker()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CallTracker getCallTracker()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCard getIccCard()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getIccRecordsLoaded()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMessageWaitingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: boolean getCallForwardingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: int getVoiceMessageCount()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconIndex()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconIndex()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconMode()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaEriText()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaEriText()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaMin()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaMin()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaPrlVersion()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaPrlVersion()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getActiveApnHost(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: int getLteOnCdmaMode()>  ->_SOURCE_
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.AdnRecordCache getAdnCache()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getIMSI()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getIMSI()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnNumber()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getServiceProviderName()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: boolean getVoiceMessageWaiting()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: int getVoiceMessageCount()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: boolean getRecordsLoaded()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: int getDisplayRule(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: int getDisplayRule(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getOperatorNumeric()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: java.lang.String getOperatorNumeric()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: boolean getVoiceCallForwardingFlag()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: boolean getVoiceCallForwardingFlag()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  ->_SOURCE_
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.ApnSetting fetchDunApn()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] getActiveApnTypes()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String[] getActiveApnTypes()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: boolean getDataOnRoamingEnabled()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean getAnyDataEnabled()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: boolean getAnyDataEnabled()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String apnIdToType(int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: int enableApnType(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: int disableApnType(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getReryConfig(boolean)>  ->_SOURCE_
<com.android.internal.telephony.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.IccFileHandler: java.lang.String getCommonIccEFPath(int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMFileHandler: java.lang.String getEFPath(int)>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimFileHandler: java.lang.String getEFPath(int)>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getPendingMmiCodes()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getEsn()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getCurrentDataConnectionList()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataRoamingEnabled()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SOURCE_
<android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>  ->_SOURCE_
<android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>  ->_SOURCE_
<android.net.sip.SipManager: boolean isOpened(java.lang.String)>  ->_SOURCE_
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>  ->_SOURCE_
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>  ->_SOURCE_
<android.net.sip.SipManager: android.net.sip.SipProfile[] getListOfProfiles()>  ->_SOURCE_
<android.net.sip.SipProfile: javax.sip.address.SipURI getUri()>  ->_SOURCE_
<android.net.sip.SipProfile: java.lang.String getUriString()>  ->_SOURCE_
<android.net.sip.SipProfile: javax.sip.address.Address getSipAddress()>  ->_SOURCE_
<android.net.sip.SipProfile: java.lang.String getDisplayName()>  ->_SOURCE_
<android.net.sip.SipProfile: java.lang.String getUserName()>  ->_SOURCE_
<android.net.sip.SipProfile: java.lang.String getAuthUserName()>  ->_SOURCE_
<android.net.sip.SipProfile: java.lang.String getPassword()>  ->_SOURCE_
<android.net.sip.SipProfile: java.lang.String getSipDomain()>  ->_SOURCE_
<android.net.sip.SipProfile: int getPort()>  ->_SOURCE_
<android.net.sip.SipProfile: java.lang.String getProtocol()>  ->_SOURCE_
<android.net.sip.SipProfile: java.lang.String getProxyAddress()>  ->_SOURCE_
<android.net.sip.SipProfile: java.lang.String getProfileName()>  ->_SOURCE_
<android.net.sip.SipProfile: boolean getSendKeepAlive()>  ->_SOURCE_
<android.net.sip.SipProfile: boolean getAutoRegistration()>  ->_SOURCE_
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()>  ->_SOURCE_
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()>  ->_SOURCE_
<android.net.sip.SipAudioCall: int getState()>  ->_SOURCE_
<android.net.sip.SipAudioCall: android.net.sip.SipSession getSipSession()>  ->_SOURCE_
<android.net.sip.SipAudioCall: android.net.rtp.AudioStream getAudioStream()>  ->_SOURCE_
<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getCnapName()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.rtp.AudioGroup getAudioGroup()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getAddress()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)>  ->_SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)>  ->_SOURCE_
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)>  ->_SOURCE_
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)>  ->_SOURCE_
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)>  ->_SOURCE_
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)>  ->_SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getUsernameFromUriNumber(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()>  ->_SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)>  ->_SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getCompleteVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimImpi()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimDomain()>  ->_SOURCE_
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String[] getIsimImpu()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromServiceId()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToServiceId()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromCodeScheme()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToCodeScheme()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmCallTracker: boolean getMute()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentGprsState()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentDataConnectionState()>  ->_SOURCE_
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>  ->_SOURCE_
<com.android.internal.telephony.CallTracker: android.os.Message obtainNoPollCompleteMessage(int)>  ->_SOURCE_
<com.android.internal.telephony.ServiceStateTracker: boolean getDesiredPowerState()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getCurrentDataConnectionState()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentDataConnectionState()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmCall: java.util.List getConnections()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmCall: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence getMessage()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmMmiCode: int getCLIRMode()>  ->_SOURCE_
<com.android.internal.telephony.CallForwardInfo: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getAddress()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getCreateTime()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getConnectTime()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getDisconnectTime()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: long getHoldDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: int getGSMIndex()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getRemainingPostDialString()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: int getNumberPresentation()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMFileHandler: java.lang.String getEFPath(int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getIMSI()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: boolean getVoiceCallForwardingFlag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getOperatorNumeric()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SIMRecords: int getDisplayRule(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] getActiveApnTypes()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean getAnyDataEnabled()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: int getApnProfileID(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>  ->_SOURCE_
<com.android.internal.telephony.cdma.EriManager: int getEriFileVersion()>  ->_SOURCE_
<com.android.internal.telephony.cdma.EriManager: int getEriNumberOfEntries()>  ->_SOURCE_
<com.android.internal.telephony.cdma.EriManager: int getEriFileType()>  ->_SOURCE_
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconIndex(int,int)>  ->_SOURCE_
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconMode(int,int)>  ->_SOURCE_
<com.android.internal.telephony.cdma.EriManager: java.lang.String getCdmaEriText(int,int)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaCall: java.util.List getConnections()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaMmiCode: java.lang.CharSequence getMessage()>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMdnNumber()>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getCdmaMin()>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getPrlVersion()>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getRUIMOperatorNumeric()>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimRecords: int getDisplayRule(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: java.lang.String getFormat()>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimFileHandler: java.lang.String getEFPath(int)>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>  ->_SOURCE_
<com.android.internal.telephony.RILRequest: com.android.internal.telephony.RILRequest obtain(int,android.os.Message)>  ->_SOURCE_
<com.android.internal.telephony.DataCallState: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.IccUtils: byte[] hexStringToBytes(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToBnW(byte[],int)>  ->_SOURCE_
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToRGB(byte[],int,boolean)>  ->_SOURCE_
<com.android.internal.telephony.IccCardStatus: java.lang.String toString()>  ->_SOURCE_
<android.telephony.NeighboringCellInfo: int getRssi()>  ->_SOURCE_
<android.telephony.NeighboringCellInfo: int getLac()>  ->_SOURCE_
<android.telephony.NeighboringCellInfo: int getCid()>  ->_SOURCE_
<android.telephony.NeighboringCellInfo: int getPsc()>  ->_SOURCE_
<android.telephony.NeighboringCellInfo: int getNetworkType()>  ->_SOURCE_
<android.telephony.NeighboringCellInfo: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.SmsResponse: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.IccIoResult: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.IccIoResult: com.android.internal.telephony.IccException getException()>  ->_SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[])>  ->_SOURCE_
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>  ->_SOURCE_
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()>  ->_SOURCE_
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>  ->_SOURCE_
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>  ->_SOURCE_
<android.telephony.SmsMessage: java.lang.String getMessageBody()>  ->_SOURCE_
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>  ->_SOURCE_
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()>  ->_SOURCE_
<android.telephony.SmsMessage: long getTimestampMillis()>  ->_SOURCE_
<android.telephony.SmsMessage: java.lang.String getEmailBody()>  ->_SOURCE_
<android.telephony.SmsMessage: java.lang.String getEmailFrom()>  ->_SOURCE_
<android.telephony.SmsMessage: int getProtocolIdentifier()>  ->_SOURCE_
<android.telephony.SmsMessage: byte[] getUserData()>  ->_SOURCE_
<android.telephony.SmsMessage: byte[] getPdu()>  ->_SOURCE_
<android.telephony.SmsMessage: int getStatusOnSim()>  ->_SOURCE_
<android.telephony.SmsMessage: int getStatusOnIcc()>  ->_SOURCE_
<android.telephony.SmsMessage: int getIndexOnSim()>  ->_SOURCE_
<android.telephony.SmsMessage: int getIndexOnIcc()>  ->_SOURCE_
<android.telephony.SmsMessage: int getStatus()>  ->_SOURCE_
<com.android.internal.telephony.DataConnection: int getDataConnectionId()>  ->_SOURCE_
<com.android.internal.telephony.DataConnection: int getRetryCount()>  ->_SOURCE_
<com.android.internal.telephony.DataConnection: int getRetryTimer()>  ->_SOURCE_
<com.android.internal.telephony.DataConnection: boolean isRetryNeeded()>  ->_SOURCE_
<com.android.internal.telephony.DataConnection: boolean isRetryForever()>  ->_SOURCE_
<com.android.internal.telephony.DriverCall: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.DataConnection$FailCause: int getErrorCode()>  ->_SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub: com.android.internal.telephony.IIccPhoneBook asInterface(android.os.IBinder)>  ->_SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.AdnRecordCache: java.util.ArrayList getRecordsIfLoaded(int)>  ->_SOURCE_
<com.android.internal.telephony.AdnRecord: java.lang.String getAlphaTag()>  ->_SOURCE_
<com.android.internal.telephony.AdnRecord: java.lang.String getNumber()>  ->_SOURCE_
<com.android.internal.telephony.AdnRecord: java.lang.String[] getEmails()>  ->_SOURCE_
<com.android.internal.telephony.AdnRecord: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.AdnRecord: byte[] buildAdnString(int)>  ->_SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>  ->_SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)>  ->_SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>  ->_SOURCE_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)>  ->_SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.String getTag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.Object[] getValues()>  ->_SOURCE_
<com.android.internal.telephony.IccServiceTable: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms asInterface(android.os.IBinder)>  ->_SOURCE_
<com.android.internal.telephony.ISms$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>  ->_SOURCE_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>  ->_SOURCE_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()>  ->_SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()>  ->_SOURCE_
<com.android.internal.telephony.SmsRawData: byte[] getBytes()>  ->_SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>  ->_SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>  ->_SOURCE_
<android.location.IGpsStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.location.ILocationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>  ->_SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.database.CursorWindow getWindow(int)>  ->_SOURCE_
<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)>  ->_SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.os.Bundle getExtras()>  ->_SOURCE_
<android.database.BulkCursorProxy: android.os.Bundle getExtras()>  ->_SOURCE_
<android.database.BulkCursorNative: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.LocalSocketImpl$SocketInputStream: int read()>  ->_SOURCE_
<android.net.LocalSocketImpl$SocketInputStream: int read(byte[])>  ->_SOURCE_
<android.net.LocalSocketImpl$SocketInputStream: int read(byte[],int,int)>  ->_SOURCE_
<javax.net.ssl.SSLSessionBindingEvent: java.lang.String getName()>  ->_SOURCE_
<javax.net.ssl.SSLSessionBindingEvent: javax.net.ssl.SSLSession getSession()>  ->_SOURCE_
<javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>  ->_SOURCE_
<javax.net.ssl.TrustManagerFactory: java.lang.String getAlgorithm()>  ->_SOURCE_
<javax.net.ssl.TrustManagerFactory: java.security.Provider getProvider()>  ->_SOURCE_
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>  ->_SOURCE_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>  ->_SOURCE_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>  ->_SOURCE_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)>  ->_SOURCE_
<java.security.KeyStore: java.lang.String getDefaultType()>  ->_SOURCE_
<java.security.KeyStore: void load(java.io.InputStream,char[])>  ->_SOURCE_
<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>  ->_SOURCE_
<javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>  ->_SOURCE_
<javax.net.ssl.KeyManagerFactory: java.lang.String getAlgorithm()>  ->_SOURCE_
<javax.net.ssl.KeyManagerFactory: java.security.Provider getProvider()>  ->_SOURCE_
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>  ->_SOURCE_
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>  ->_SOURCE_
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>  ->_SOURCE_
<com.android.internal.view.menu.ListMenuPresenter$MenuAdapter: com.android.internal.view.menu.MenuItemImpl getItem(int)>  ->_SOURCE_
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: com.android.internal.view.menu.MenuItemImpl getItem(int)>  ->_SOURCE_
<android.widget.Gallery: int getChildHeight(android.view.View)>  ->_SOURCE_
<android.widget.Spinner$DropDownAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<dalvik.system.BaseDexClassLoader: java.lang.Package getPackage(java.lang.String)>  ->_SOURCE_
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>  ->_SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>  ->_SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>  ->_SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>  ->_SOURCE_
<javax.net.ssl.SSLContext: java.lang.String getProtocol()>  ->_SOURCE_
<javax.net.ssl.SSLContext: java.security.Provider getProvider()>  ->_SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>  ->_SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>  ->_SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getServerSessionContext()>  ->_SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()>  ->_SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getDefaultSSLParameters()>  ->_SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getSupportedSSLParameters()>  ->_SOURCE_
<libcore.net.http.AbstractHttpInputStream: int read()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.NodeList getChildNodes()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NodeList getChildNodes()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getFirstChild()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getFirstChild()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getLastChild()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getLastChild()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getLocalName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getLocalName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getLocalName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNamespaceURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNamespaceURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNamespaceURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getNextSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getNextSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getNextSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.EntityReferenceImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentFragmentImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CDATASectionImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CommentImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.EntityReferenceImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentFragmentImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CDATASectionImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.TextImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CommentImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Document getOwnerDocument()>  ->_SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getParentNode()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getParentNode()>  ->_SOURCE_
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getPrefix()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getPrefix()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getPrefix()>  ->_SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getPreviousSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getPreviousSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getBaseURI()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: void getTextContent(java.lang.StringBuilder)>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: void getTextContent(java.lang.StringBuilder)>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getUserData(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.NodeList getChildNodes()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getFirstChild()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getLastChild()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getNextSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node insertChildAt(org.w3c.dom.Node,int)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: java.lang.String getTextContent()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: void getTextContent(java.lang.StringBuilder)>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagName(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagNameNS(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: java.lang.Object getParameter(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: org.w3c.dom.DOMStringList getParameterNames()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentFragmentImpl: java.lang.String getNodeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DocumentFragmentImpl: short getNodeType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeListImpl: int getLength()>  ->_SOURCE_
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getNextSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getNextSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getParentNode()>  ->_SOURCE_
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getPreviousSibling()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getData()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CharacterDataImpl: int getLength()>  ->_SOURCE_
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getNodeValue()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: int getLength()>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItem(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>  ->_SOURCE_
<android.content.SyncStorageEngine: java.util.ArrayList getSyncStatus()>  ->_SOURCE_
<android.content.SyncStorageEngine: java.util.ArrayList getSyncHistory()>  ->_SOURCE_
<org.apache.http.message.BasicRequestLine: java.lang.String getUri()>  ->_SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>  ->_SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.nfc.INdefPushCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.nfc.INdefPushCallback$Stub$Proxy: android.nfc.NdefMessage createMessage()>  ->_SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle close(java.lang.String,android.os.IBinder)>  ->_SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle transceive(java.lang.String,byte[])>  ->_SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: int[] getTechList(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: boolean isNdef(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: boolean isPresent(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.TransceiveResult transceive(int,byte[],boolean)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.NdefMessage ndefRead(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: android.nfc.Tag rediscover(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: int getTimeout(int)>  ->_SOURCE_
<android.nfc.INfcTag$Stub$Proxy: int getMaxTransceiveLength(int)>  ->_SOURCE_
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)>  ->_SOURCE_
<android.nfc.tech.IsoDep: int getTimeout()>  ->_SOURCE_
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()>  ->_SOURCE_
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()>  ->_SOURCE_
<android.nfc.tech.IsoDep: byte[] transceive(byte[])>  ->_SOURCE_
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()>  ->_SOURCE_
<android.nfc.tech.NfcV: android.nfc.tech.NfcV get(android.nfc.Tag)>  ->_SOURCE_
<android.nfc.tech.NfcV: byte getResponseFlags()>  ->_SOURCE_
<android.nfc.tech.NfcV: byte getDsfId()>  ->_SOURCE_
<android.nfc.tech.NfcV: byte[] transceive(byte[])>  ->_SOURCE_
<android.nfc.tech.NfcV: int getMaxTransceiveLength()>  ->_SOURCE_
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)>  ->_SOURCE_
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()>  ->_SOURCE_
<android.nfc.tech.Ndef: java.lang.String getType()>  ->_SOURCE_
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>  ->_SOURCE_
<android.nfc.tech.NfcF: android.nfc.tech.NfcF get(android.nfc.Tag)>  ->_SOURCE_
<android.nfc.tech.NfcF: byte[] getSystemCode()>  ->_SOURCE_
<android.nfc.tech.NfcF: byte[] getManufacturer()>  ->_SOURCE_
<android.nfc.tech.NfcF: byte[] transceive(byte[])>  ->_SOURCE_
<android.nfc.tech.NfcF: int getMaxTransceiveLength()>  ->_SOURCE_
<android.nfc.tech.NfcF: int getTimeout()>  ->_SOURCE_
<android.nfc.tech.MifareUltralight: android.nfc.tech.MifareUltralight get(android.nfc.Tag)>  ->_SOURCE_
<android.nfc.tech.MifareUltralight: int getType()>  ->_SOURCE_
<android.nfc.tech.MifareUltralight: byte[] readPages(int)>  ->_SOURCE_
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])>  ->_SOURCE_
<android.nfc.tech.MifareUltralight: int getMaxTransceiveLength()>  ->_SOURCE_
<android.nfc.tech.MifareUltralight: int getTimeout()>  ->_SOURCE_
<android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)>  ->_SOURCE_
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)>  ->_SOURCE_
<android.nfc.tech.MifareClassic: int getType()>  ->_SOURCE_
<android.nfc.tech.MifareClassic: int getSize()>  ->_SOURCE_
<android.nfc.tech.MifareClassic: int getSectorCount()>  ->_SOURCE_
<android.nfc.tech.MifareClassic: int getBlockCount()>  ->_SOURCE_
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)>  ->_SOURCE_
<android.nfc.tech.MifareClassic: byte[] readBlock(int)>  ->_SOURCE_
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])>  ->_SOURCE_
<android.nfc.tech.MifareClassic: int getMaxTransceiveLength()>  ->_SOURCE_
<android.nfc.tech.MifareClassic: int getTimeout()>  ->_SOURCE_
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)>  ->_SOURCE_
<android.nfc.tech.NfcB: byte[] getApplicationData()>  ->_SOURCE_
<android.nfc.tech.NfcB: byte[] getProtocolInfo()>  ->_SOURCE_
<android.nfc.tech.NfcB: byte[] transceive(byte[])>  ->_SOURCE_
<android.nfc.tech.NfcB: int getMaxTransceiveLength()>  ->_SOURCE_
<android.nfc.tech.NfcA: android.nfc.tech.NfcA get(android.nfc.Tag)>  ->_SOURCE_
<android.nfc.tech.NfcA: byte[] getAtqa()>  ->_SOURCE_
<android.nfc.tech.NfcA: short getSak()>  ->_SOURCE_
<android.nfc.tech.NfcA: byte[] transceive(byte[])>  ->_SOURCE_
<android.nfc.tech.NfcA: int getMaxTransceiveLength()>  ->_SOURCE_
<android.nfc.tech.NfcA: int getTimeout()>  ->_SOURCE_
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getLength()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getLength()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getParserPointer()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getParserPointer()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getPointer()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getPointer()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getURI(int)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getLocalName(int)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getQName(int)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(int)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(int)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String,java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String)>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getParserPointer()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getPointer()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getLength()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getLineNumber()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getColumnNumber()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getParserPointer()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getPointer()>  ->_SOURCE_
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getLength()>  ->_SOURCE_
<android.widget.TextView$SuggestionsPopupWindow$SuggestionAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()>  ->_SOURCE_
<android.inputmethodservice.InputMethodService: android.app.Dialog getWindow()>  ->_SOURCE_
<android.inputmethodservice.InputMethodService: int getBackDisposition()>  ->_SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()>  ->_SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()>  ->_SOURCE_
<android.inputmethodservice.InputMethodService: boolean getCurrentInputStarted()>  ->_SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>  ->_SOURCE_
<android.inputmethodservice.InputMethodService: java.lang.CharSequence getTextForImeAction(int)>  ->_SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimImpi()>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimDomain()>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String[] getIsimImpu()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getServiceCenterAddress()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayMessageBody()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getPseudoSubject()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailBody()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailFrom()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getProtocolIdentifier()>  ->_SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getProtocolIdentifier()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: byte[] getUserData()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getStatus()>  ->_SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getStatus()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: int getStatusOnIcc()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase: int getIndexOnIcc()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getOrigDialString()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getAddress()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getCreateTime()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getConnectTime()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getDisconnectTime()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: long getHoldDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: int getCDMAIndex()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getRemainingPostDialString()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: int getNumberPresentation()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>  ->_SOURCE_
<com.android.internal.telephony.SmsHeader: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getProtocolIdentifier()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getDataCodingScheme()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getStatus()>  ->_SOURCE_
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>  ->_SOURCE_
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>  ->_SOURCE_
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>  ->_SOURCE_
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: java.lang.String getEfName()>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: java.lang.String getEfName()>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: java.lang.String getEfName()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionTracker$TxRxSum: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.ApnSetting: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionAc: int getCidSync()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionAc: int getRefCountSync()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.ApnSetting getApnSettingSync()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionAc: android.net.LinkProperties getLinkPropertiesSync()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionAc: android.net.LinkCapabilities getLinkCapabilitiesSync()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionAc: java.util.Collection getApnListSync()>  ->_SOURCE_
<com.android.internal.telephony.DataConnectionAc: android.app.PendingIntent getReconnectIntentSync()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getCreateTime()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getConnectTime()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getDisconnectTime()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: long getHoldDurationMillis()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: java.lang.String getRemainingPostDialString()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: int getNumberPresentation()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.UUSInfo getUUSInfo()>  ->_SOURCE_
<android.net.rtp.AudioGroup: android.net.rtp.AudioStream[] getStreams()>  ->_SOURCE_
<android.net.rtp.AudioGroup: int getMode()>  ->_SOURCE_
<android.net.sip.SipSession: android.net.sip.ISipSession getRealSession()>  ->_SOURCE_
<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>  ->_SOURCE_
<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()>  ->_SOURCE_
<android.net.rtp.AudioStream: int getDtmfType()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription: java.lang.String getAddress()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionMethod()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionKey()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription: java.lang.String[] getAttributeNames()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>  ->_SOURCE_
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>  ->_SOURCE_
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Media: int getPort()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Media: int getPortCount()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getFormats()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(java.lang.String)>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>  ->_SOURCE_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>  ->_SOURCE_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)>  ->_SOURCE_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()>  ->_SOURCE_
<android.net.sip.ISipService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getLocalIp()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getLocalProfile()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getPeerProfile()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: int getState()>  ->_SOURCE_
<gov.nist.javax.sip.address.AddressImpl: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserPassword()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()>  ->_SOURCE_
<com.android.internal.telephony.sip.SipCallBase: java.util.List getConnections()>  ->_SOURCE_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.Menu getMenu()>  ->_SOURCE_
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.ToneSettings getToneSettings()>  ->_SOURCE_
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)>  ->_SOURCE_
<com.android.internal.telephony.cat.CommandDetails: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  ->_SOURCE_
<com.android.internal.telephony.cat.CatResponseMessage: com.android.internal.telephony.cat.CommandDetails getCmdDetails()>  ->_SOURCE_
<com.android.internal.telephony.RestrictedState: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getCarrierName(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailNumber(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailTag(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.SpnOverride: java.lang.String getSpn(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.gsm.SimTlv: int getTag()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SimTlv: byte[] getData()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence getMessage()>  ->_SOURCE_
<com.android.internal.telephony.cdma.CdmaMmiCode: java.lang.CharSequence getMessage()>  ->_SOURCE_
<com.android.internal.telephony.ApnContext: java.lang.String getApnType()>  ->_SOURCE_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnection getDataConnection()>  ->_SOURCE_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnectionAc getDataConnectionAc()>  ->_SOURCE_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getApnSetting()>  ->_SOURCE_
<com.android.internal.telephony.ApnContext: int getWaitingApnsPermFailCount()>  ->_SOURCE_
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getNextWaitingApn()>  ->_SOURCE_
<com.android.internal.telephony.ApnContext: java.util.ArrayList getWaitingApns()>  ->_SOURCE_
<com.android.internal.telephony.ApnContext: java.lang.String getReason()>  ->_SOURCE_
<com.android.internal.telephony.ApnContext: boolean getDependencyMet()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmDataConnection: int getProfileId()>  ->_SOURCE_
<com.android.internal.telephony.DataConnection$CallSetupException: int getRetryOverride()>  ->_SOURCE_
<com.android.internal.telephony.RetryManager: int getRetryTimer()>  ->_SOURCE_
<com.android.internal.telephony.RetryManager: int getRetryCount()>  ->_SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getNextMessageId()>  ->_SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getProtocolIdentifier()>  ->_SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getStatus()>  ->_SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getTeleService()>  ->_SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getMessageType()>  ->_SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getNumOfVoicemails()>  ->_SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: byte[] getIncomingSmsFingerprint()>  ->_SOURCE_
<com.android.internal.telephony.WspTypeDecoder: int getDecodedDataLength()>  ->_SOURCE_
<com.android.internal.telephony.WspTypeDecoder: long getValue32()>  ->_SOURCE_
<com.android.internal.telephony.WspTypeDecoder: java.lang.String getValueString()>  ->_SOURCE_
<com.android.internal.telephony.WspTypeDecoder: java.util.HashMap getContentParameters()>  ->_SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[])>  ->_SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[],int,int)>  ->_SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,int)>  ->_SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)>  ->_SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm8BitPacked(java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()>  ->_SOURCE_
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()>  ->_SOURCE_
<android.telephony.SmsMessage$SubmitPdu: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.SmsMessageBase$SubmitPduBase: java.lang.String toString()>  ->_SOURCE_
<com.android.internal.telephony.ATResponseParser: java.lang.String nextString()>  ->_SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)>  ->_SOURCE_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()>  ->_SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()>  ->_SOURCE_
<android.location.Address: java.util.Locale getLocale()>  ->_SOURCE_
<android.location.Address: int getMaxAddressLineIndex()>  ->_SOURCE_
<android.location.Address: java.lang.String getAddressLine(int)>  ->_SOURCE_
<android.location.Address: java.lang.String getFeatureName()>  ->_SOURCE_
<android.location.Address: java.lang.String getAdminArea()>  ->_SOURCE_
<android.location.Address: java.lang.String getSubAdminArea()>  ->_SOURCE_
<android.location.Address: java.lang.String getLocality()>  ->_SOURCE_
<android.location.Address: java.lang.String getSubLocality()>  ->_SOURCE_
<android.location.Address: java.lang.String getThoroughfare()>  ->_SOURCE_
<android.location.Address: java.lang.String getSubThoroughfare()>  ->_SOURCE_
<android.location.Address: java.lang.String getPremises()>  ->_SOURCE_
<android.location.Address: java.lang.String getPostalCode()>  ->_SOURCE_
<android.location.Address: java.lang.String getCountryCode()>  ->_SOURCE_
<android.location.Address: java.lang.String getCountryName()>  ->_SOURCE_
<android.location.Address: double getLatitude()>  ->_SOURCE_
<android.location.Address: double getLongitude()>  ->_SOURCE_
<android.location.Address: java.lang.String getPhone()>  ->_SOURCE_
<android.location.Address: java.lang.String getUrl()>  ->_SOURCE_
<android.location.Address: android.os.Bundle getExtras()>  ->_SOURCE_
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>  ->_SOURCE_
<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)>  ->_SOURCE_
<android.database.BulkCursorProxy: android.os.Bundle getExtras()>  ->_SOURCE_
<android.widget.ArrayAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetDefaultSSLParameters()>  ->_SOURCE_
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetSupportedSSLParameters()>  ->_SOURCE_
<javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory getDefault()>  ->_SOURCE_
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<javax.net.ssl.SSLEngine: java.lang.String getPeerHost()>  ->_SOURCE_
<javax.net.ssl.SSLEngine: int getPeerPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.Runnable getDelegatedTask()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLSession getSession()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getWantClientAuth()>  ->_SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>  ->_SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])>  ->_SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)>  ->_SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>  ->_SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeName()>  ->_SOURCE_
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeNamespace()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: short getSeverity()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getMessage()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedException()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedData()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: org.w3c.dom.DOMLocator getLocation()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$10: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$11: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$10: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$11: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$12: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$8: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$7: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$2: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$5: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$4: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$3: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$9: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$6: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$12: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: short getSeverity()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getMessage()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getType()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedException()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedData()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl: org.w3c.dom.DOMLocator getLocation()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$9: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$8: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$7: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$2: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$6: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$5: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$4: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$3: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)>  ->_SOURCE_
<android.content.SyncManager: android.content.SyncStorageEngine getSyncStorageEngine()>  ->_SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()>  ->_SOURCE_
<android.nfc.tech.BasicTagTechnology: int getMaxTransceiveLengthInternal()>  ->_SOURCE_
<android.nfc.tech.BasicTagTechnology: byte[] transceive(byte[],boolean)>  ->_SOURCE_
<android.inputmethodservice.SoftInputWindow: int getSize()>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: java.lang.String getEfName()>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: java.lang.String getEfName()>  ->_SOURCE_
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: java.lang.String getEfName()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()>  ->_SOURCE_
<com.android.internal.telephony.SmsAddress: java.lang.String getAddressString()>  ->_SOURCE_
<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getSCAddress()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getByte()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: long getSCTimestampMillis()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: byte[] getUserData()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getUserDataSeptetPadding()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.SmsHeader getUserDataHeader()>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataGSM7Bit(int,int,int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataUCS2(int)>  ->_SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataKSC5601(int)>  ->_SOURCE_
<android.database.sqlite.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>  ->_SOURCE_
<android.database.sqlite.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)>  ->_SOURCE_
<android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>  ->_SOURCE_
<android.preference.PreferenceGroupAdapter: android.preference.Preference getItem(int)>  ->_SOURCE_
<android.net.TrafficStats: int getThreadStatsTag()>  ->_SOURCE_
<android.net.TrafficStats: long getMobileTxPackets()>  ->_SOURCE_
<android.net.TrafficStats: long getMobileRxPackets()>  ->_SOURCE_
<android.net.TrafficStats: long getMobileTxBytes()>  ->_SOURCE_
<android.net.TrafficStats: long getMobileRxBytes()>  ->_SOURCE_
<android.net.TrafficStats: long getTxPackets(java.lang.String)>  ->_SOURCE_
<android.net.TrafficStats: long getRxPackets(java.lang.String)>  ->_SOURCE_
<android.net.TrafficStats: long getTxBytes(java.lang.String)>  ->_SOURCE_
<android.net.TrafficStats: long getRxBytes(java.lang.String)>  ->_SOURCE_
<android.net.TrafficStats: long getTotalTxPackets()>  ->_SOURCE_
<android.net.TrafficStats: long getTotalRxPackets()>  ->_SOURCE_
<android.net.TrafficStats: long getTotalTxBytes()>  ->_SOURCE_
<android.net.TrafficStats: long getTotalRxBytes()>  ->_SOURCE_
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: com.android.internal.telephony.IWapPushManager getWapPushManager()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAddress()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionMethod()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionKey()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String[] getAttributeNames()>  ->_SOURCE_
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAttribute(java.lang.String)>  ->_SOURCE_
<android.net.rtp.RtpStream: java.net.InetAddress getLocalAddress()>  ->_SOURCE_
<android.net.rtp.RtpStream: int getLocalPort()>  ->_SOURCE_
<android.net.rtp.RtpStream: java.net.InetAddress getRemoteAddress()>  ->_SOURCE_
<android.net.rtp.RtpStream: int getRemotePort()>  ->_SOURCE_
<android.net.rtp.RtpStream: int getMode()>  ->_SOURCE_
<android.net.sip.ISipService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>  ->_SOURCE_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)>  ->_SOURCE_
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()>  ->_SOURCE_
<android.net.sip.ISipSessionListener$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.CommandParamsFactory getInstance(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.IccFileHandler)>  ->_SOURCE_
<com.android.internal.telephony.cat.BerTlv: java.util.List getComprehensionTlvs()>  ->_SOURCE_
<com.android.internal.telephony.cat.BerTlv: int getTag()>  ->_SOURCE_
<com.android.internal.telephony.cat.CommandDetails: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  ->_SOURCE_
<com.android.internal.telephony.cat.ItemsIconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  ->_SOURCE_
<com.android.internal.telephony.cat.IconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  ->_SOURCE_
<com.android.internal.telephony.cat.DeviceIdentities: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  ->_SOURCE_
<com.android.internal.telephony.IntRangeManager: boolean isEmpty()>  ->_SOURCE_
<android.text.method.CharacterPickerDialog$OptionsAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory getDefault()>  ->_SOURCE_
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl$1: org.w3c.dom.Node getRelatedNode()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl$1: java.lang.String getUri()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl$1: org.w3c.dom.Node getRelatedNode()>  ->_SOURCE_
<org.apache.harmony.xml.dom.DOMErrorImpl$1: java.lang.String getUri()>  ->_SOURCE_
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCacheListener getListener()>  ->_SOURCE_
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()>  ->_SOURCE_
<android.inputmethodservice.IInputMethodWrapper: android.view.inputmethod.InputMethod getInternalInputMethod()>  ->_SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.Menu getMenu()>  ->_SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getTitle()>  ->_SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getSubtitle()>  ->_SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.View getCustomView()>  ->_SOURCE_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.MenuInflater getMenuInflater()>  ->_SOURCE_
<android.net.NetworkStats: long getElapsedRealtime()>  ->_SOURCE_
<android.net.NetworkStats: long getElapsedRealtimeAge()>  ->_SOURCE_
<android.net.NetworkStats: java.lang.String[] getUniqueIfaces()>  ->_SOURCE_
<android.net.NetworkStats: int[] getUniqueUids()>  ->_SOURCE_
<android.net.NetworkStats: long getTotalBytes()>  ->_SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)>  ->_SOURCE_
<android.net.INetworkStatsService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<com.android.internal.telephony.IWapPushManager$Stub: com.android.internal.telephony.IWapPushManager asInterface(android.os.IBinder)>  ->_SOURCE_
<com.android.internal.telephony.IWapPushManager$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.net.sip.ISipSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getLocalIp()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getLocalProfile()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getPeerProfile()>  ->_SOURCE_
<android.net.sip.ISipSession$Stub$Proxy: int getState()>  ->_SOURCE_
<com.android.internal.telephony.cat.ComprehensionTlv: int getTag()>  ->_SOURCE_
<com.android.internal.telephony.cat.ComprehensionTlv: int getLength()>  ->_SOURCE_
<com.android.internal.telephony.cat.ComprehensionTlv: int getValueIndex()>  ->_SOURCE_
<com.android.internal.telephony.cat.ComprehensionTlv: byte[] getRawValue()>  ->_SOURCE_
<com.android.internal.telephony.cat.IconLoader: com.android.internal.telephony.cat.IconLoader getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)>  ->_SOURCE_
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToBnW(byte[],int)>  ->_SOURCE_
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToRGB(byte[],int,boolean,byte[])>  ->_SOURCE_
<com.android.internal.telephony.cat.ItemsIconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  ->_SOURCE_
<com.android.internal.telephony.cat.IconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  ->_SOURCE_
<gov.nist.javax.sip.header.ProxyAuthenticate: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.header.WWWAuthenticate: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: int getExpires()>  ->_SOURCE_
<gov.nist.javax.sip.header.ProxyAuthenticate: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.header.WWWAuthenticate: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getAccessType()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCGI3GPP()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getDSLLocation()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCI3GPP2()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.Object getExtensionAccessInfo()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAssociatedURI: javax.sip.address.URI getAssociatedURI()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: gov.nist.javax.sip.header.ContactList getContactList()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: boolean getWildCardFlag()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: gov.nist.core.NameValueList getContactParms()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: int getExpires()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: java.lang.String getSipInstanceParam()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: java.lang.String getPubGruuParam()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: java.lang.String getTempGruuParam()>  ->_SOURCE_
<gov.nist.javax.sip.header.RequestLine: gov.nist.javax.sip.address.GenericURI getUri()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String encodeBody()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String encodeBody()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String encodeBody()>  ->_SOURCE_
<gov.nist.javax.sip.header.ProxyAuthenticate: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.header.WWWAuthenticate: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getAccessType()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCGI3GPP()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getDSLLocation()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCI3GPP2()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.Object getExtensionAccessInfo()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAssociatedURI: javax.sip.address.URI getAssociatedURI()>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String encodeBody()>  ->_SOURCE_
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserPassword()>  ->_SOURCE_
<gov.nist.javax.sip.address.AddressImpl: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>  ->_SOURCE_
<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>  ->_SOURCE_
<android.inputmethodservice.IInputMethodSessionWrapper: android.view.inputmethod.InputMethodSession getInternalInputMethodSession()>  ->_SOURCE_
<android.net.NetworkStatsHistory: long getBucketDuration()>  ->_SOURCE_
<android.net.NetworkStatsHistory: long getStart()>  ->_SOURCE_
<android.net.NetworkStatsHistory: long getEnd()>  ->_SOURCE_
<android.net.NetworkStatsHistory: int getIndexBefore(long)>  ->_SOURCE_
<android.net.NetworkStatsHistory: int getIndexAfter(long)>  ->_SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)>  ->_SOURCE_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<com.android.internal.telephony.cat.DeviceIdentities: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()>  ->_SOURCE_
<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()>  ->_SOURCE_
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.javax.sip.address.GenericURI getParameterAsURI(java.lang.String)>  ->_SOURCE_
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getSecurityMechanism()>  ->_SOURCE_
<gov.nist.javax.sip.header.ProxyAuthenticate: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.header.WWWAuthenticate: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.header.AuthenticationHeader: javax.sip.address.URI getURI()>  ->_SOURCE_
<gov.nist.javax.sip.address.Authority: java.lang.String getPassword()>  ->_SOURCE_
<gov.nist.javax.sip.address.UserInfo: java.lang.String getPassword()>  ->_SOURCE_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>  ->_SOURCE_
<gov.nist.javax.sip.header.Challenge: java.lang.String getURI()>  ->_SOURCE_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLServerSocket createSSLServerSocket(int,int,java.net.InetAddress)>  ->_SOURCE_
<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>  ->_SOURCE_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)>  ->_SOURCE_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)>  ->_SOURCE_
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getWantClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getWantClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLServerSocket createSSLServerSocket(int,int,java.net.InetAddress)>  ->_SOURCE_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)>  ->_SOURCE_
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)>  ->_SOURCE_
<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>  ->_SOURCE_
<gov.nist.javax.sip.parser.Pipeline: int read()>  ->_SOURCE_
<android.widget.CalendarView: long getMinDate()>  ->_SOURCE_
<android.widget.CalendarView: long getMaxDate()>  ->_SOURCE_
<android.widget.CalendarView: boolean getShowWeekNumber()>  ->_SOURCE_
<android.widget.CalendarView: int getFirstDayOfWeek()>  ->_SOURCE_
<android.widget.CalendarView: long getDate()>  ->_SOURCE_
<android.widget.CalendarView$WeeksAdapter: java.util.Calendar getSelectedDay()>  ->_SOURCE_
<android.widget.CalendarView$WeeksAdapter: int getCount()>  ->_SOURCE_
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.widget.CalendarView$WeeksAdapter: long getItemId(int)>  ->_SOURCE_
<android.widget.CalendarView$WeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>  ->_SOURCE_
<android.widget.CalendarView$WeekView: int getMonthOfFirstWeekDay()>  ->_SOURCE_
<android.widget.CalendarView$WeekView: int getMonthOfLastWeekDay()>  ->_SOURCE_
<android.widget.CalendarView$WeekView: java.util.Calendar getFirstDay()>  ->_SOURCE_
<android.app.backup.BackupDataInputStream: int read()>  ->_SOURCE_
<android.app.backup.BackupDataInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.app.backup.BackupDataInputStream: int read(byte[])>  ->_SOURCE_
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: int getState()>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: java.lang.String getName()>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: int getScanMode()>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: int getConnectionState()>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>  ->_SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)>  ->_SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.IBluetooth getService()>  ->_SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>  ->_SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getName()>  ->_SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()>  ->_SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()>  ->_SOURCE_
<android.bluetooth.BluetoothDevice: int getBondState()>  ->_SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>  ->_SOURCE_
<android.bluetooth.BluetoothDevice: boolean getTrustState()>  ->_SOURCE_
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>  ->_SOURCE_
<android.bluetooth.BluetoothDevice: int getServiceChannel(android.os.ParcelUuid)>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)>  ->_SOURCE_
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()>  ->_SOURCE_
<android.bluetooth.BluetoothClass: int getDeviceClass()>  ->_SOURCE_
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()>  ->_SOURCE_
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()>  ->_SOURCE_
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()>  ->_SOURCE_
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket accept(int)>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothServerSocket: int getChannel()>  ->_SOURCE_
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothPan: boolean isTetheringOn()>  ->_SOURCE_
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>  ->_SOURCE_
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothInputStream: int read()>  ->_SOURCE_
<android.bluetooth.BluetoothInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetoothHealthCallback$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()>  ->_SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()>  ->_SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()>  ->_SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: int getChannelType()>  ->_SOURCE_
<android.bluetooth.IBluetoothCallback$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()>  ->_SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getAudioState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.bluetooth.IBluetoothCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getAudioState(android.bluetooth.BluetoothDevice)>  ->_SOURCE_
<android.bluetooth.BluetoothUuid: int getServiceIdentifierFromParcelUuid(android.os.ParcelUuid)>  ->_SOURCE_
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>  ->_SOURCE_
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>  ->_SOURCE_
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>  ->_SOURCE_
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>  ->_SOURCE_
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()>  ->_SOURCE_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>  ->_SOURCE_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>  ->_SOURCE_
<android.database.MatrixCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.database.MatrixCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.MatrixCursor: short getShort(int)>  ->_SOURCE_
<android.database.MatrixCursor: int getInt(int)>  ->_SOURCE_
<android.database.MatrixCursor: long getLong(int)>  ->_SOURCE_
<android.database.MatrixCursor: float getFloat(int)>  ->_SOURCE_
<android.database.MatrixCursor: double getDouble(int)>  ->_SOURCE_
<android.database.MatrixCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.MatrixCursor: int getType(int)>  ->_SOURCE_
<android.database.MergeCursor: java.lang.String getString(int)>  ->_SOURCE_
<android.database.MergeCursor: short getShort(int)>  ->_SOURCE_
<android.database.MergeCursor: int getInt(int)>  ->_SOURCE_
<android.database.MergeCursor: long getLong(int)>  ->_SOURCE_
<android.database.MergeCursor: float getFloat(int)>  ->_SOURCE_
<android.database.MergeCursor: double getDouble(int)>  ->_SOURCE_
<android.database.MergeCursor: int getType(int)>  ->_SOURCE_
<android.database.MergeCursor: byte[] getBlob(int)>  ->_SOURCE_
<android.database.MergeCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.drm.mobile1.DrmRawContent$DrmInputStream: int read()>  ->_SOURCE_
<android.drm.mobile1.DrmRawContent$DrmInputStream: int read(byte[])>  ->_SOURCE_
<android.drm.mobile1.DrmRawContent$DrmInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.filterfw.core.SerializedFrame$DirectByteInputStream: int read()>  ->_SOURCE_
<android.filterfw.core.SerializedFrame$DirectByteInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromFile(java.lang.String)>  ->_SOURCE_
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromFile(java.io.File)>  ->_SOURCE_
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromRawResource(android.content.Context,int)>  ->_SOURCE_
<android.inputmethodservice.Keyboard$Key: int[] getCurrentDrawableState()>  ->_SOURCE_
<android.inputmethodservice.Keyboard: java.util.List getKeys()>  ->_SOURCE_
<android.inputmethodservice.Keyboard: java.util.List getModifierKeys()>  ->_SOURCE_
<android.inputmethodservice.Keyboard: int getHorizontalGap()>  ->_SOURCE_
<android.inputmethodservice.Keyboard: int getVerticalGap()>  ->_SOURCE_
<android.inputmethodservice.Keyboard: int getKeyHeight()>  ->_SOURCE_
<android.inputmethodservice.Keyboard: int getHeight()>  ->_SOURCE_
<android.inputmethodservice.Keyboard: int[] getShiftKeyIndices()>  ->_SOURCE_
<android.inputmethodservice.Keyboard: int getShiftKeyIndex()>  ->_SOURCE_
<android.inputmethodservice.Keyboard: int[] getNearestKeys(int,int)>  ->_SOURCE_
<android.inputmethodservice.Keyboard: int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)>  ->_SOURCE_
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()>  ->_SOURCE_
<android.inputmethodservice.KeyboardView$SwipeTracker: float getYVelocity()>  ->_SOURCE_
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>  ->_SOURCE_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)>  ->_SOURCE_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)>  ->_SOURCE_
<android.media.AudioRecord: int read(byte[],int,int)>  ->_SOURCE_
<android.media.AudioRecord: int read(short[],int,int)>  ->_SOURCE_
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>  ->_SOURCE_
<android.media.ExifInterface: float convertRationalLatLonToFloat(java.lang.String,java.lang.String)>  ->_SOURCE_
<android.media.ExifInterface: void <init>(java.lang.String)>  ->_SOURCE_
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)>  ->_SOURCE_
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>  ->_SOURCE_
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)>  ->_SOURCE_
<android.media.ExifInterface: byte[] getThumbnail()>  ->_SOURCE_
<android.media.ExifInterface: boolean getLatLong(float[])>  ->_SOURCE_
<android.media.ExifInterface: double getAltitude(double)>  ->_SOURCE_
<android.media.ExifInterface: long getDateTime()>  ->_SOURCE_
<android.media.ExifInterface: long getGpsDateTime()>  ->_SOURCE_
<android.media.IMediaScannerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.media.IMediaScannerService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.media.MediaMetadataRetriever: java.lang.String extractMetadata(int)>  ->_SOURCE_
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>  ->_SOURCE_
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)>  ->_SOURCE_
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>  ->_SOURCE_
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String,long)>  ->_SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String,long)>  ->_SOURCE_
<android.provider.MediaStore$Files: android.net.Uri getMtpReferencesUri(java.lang.String,long)>  ->_SOURCE_
<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Video$Thumbnails: android.net.Uri getContentUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)>  ->_SOURCE_
<android.provider.MediaStore$Audio$Artists: android.net.Uri getContentUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Audio$Albums: android.net.Uri getContentUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUri(java.lang.String)>  ->_SOURCE_
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)>  ->_SOURCE_
<android.provider.MediaStore$Audio$Artists$Albums: android.net.Uri getContentUri(java.lang.String,long)>  ->_SOURCE_
<android.provider.MediaStore$Audio$Genres$Members: android.net.Uri getContentUri(java.lang.String,long)>  ->_SOURCE_
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)>  ->_SOURCE_
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>  ->_SOURCE_
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>  ->_SOURCE_
<android.media.RingtoneManager: android.database.Cursor getCursor()>  ->_SOURCE_
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>  ->_SOURCE_
<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)>  ->_SOURCE_
<com.android.internal.database.SortCursor: java.lang.String getString(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: int getInt(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: long getLong(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: int getType(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: byte[] getBlob(int)>  ->_SOURCE_
<com.android.internal.database.SortCursor: java.lang.String[] getColumnNames()>  ->_SOURCE_
<android.net.SSLCertificateSocketFactory$1: java.security.cert.X509Certificate[] getAcceptedIssuers()>  ->_SOURCE_
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)>  ->_SOURCE_
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)>  ->_SOURCE_
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)>  ->_SOURCE_
<android.net.SSLCertificateSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int,android.net.SSLSessionCache)>  ->_SOURCE_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>  ->_SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>  ->_SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.KeyManager[] getKeyManagers()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.TrustManager[] getTrustManagers()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.Runnable getDelegatedTask()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getWantClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLSession getSession()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getWantClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getRemoteSocketAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getLocalSocketAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getLocalAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getInetAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getTcpNoDelay()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getReuseAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getOOBInline()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getKeepAlive()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getTrafficClass()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoTimeout()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoLinger()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSendBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getReceiveBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getLocalPort()>  ->_SOURCE_
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>  ->_SOURCE_
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getWantClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getRemoteSocketAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getLocalSocketAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getLocalAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getInetAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getTcpNoDelay()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getReuseAddress()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getOOBInline()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getKeepAlive()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getTrafficClass()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoTimeout()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoLinger()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSendBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getReceiveBufferSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getLocalPort()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.io.FileDescriptor getFileDescriptor$()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledCipherSuites()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledProtocols()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getUseClientMode()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getNeedClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getWantClientAuth()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getEnableSessionCreation()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: javax.net.ssl.SSLSession getSession()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.InputStream getInputStream()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.OutputStream getOutputStream()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getMinRecordSize()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getRecordSize(int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getDataSize(int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,org.apache.harmony.xnet.provider.jsse.DataStream)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] getChangeCipherSpecMesage(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLBufferedInput: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: byte[] getData(int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLBufferedInput: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLStreamedInput: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint32()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint64()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: byte[] read(int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: byte[] getData(int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.SSLStreamedInput: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read()>  ->_SOURCE_
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read(byte[],int,int)>  ->_SOURCE_
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)>  ->_SOURCE_
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)>  ->_SOURCE_
<android.net.WebAddress: java.lang.String getScheme()>  ->_SOURCE_
<android.net.WebAddress: java.lang.String getHost()>  ->_SOURCE_
<android.net.WebAddress: int getPort()>  ->_SOURCE_
<android.net.WebAddress: java.lang.String getPath()>  ->_SOURCE_
<android.net.WebAddress: java.lang.String getAuthInfo()>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: long getMinGzipSize(android.content.ContentResolver)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>  ->_SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SOURCE_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SOURCE_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SOURCE_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.HttpEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.ByteArrayEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.BasicHttpEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.InputStreamEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.StringEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.EntityTemplate: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.FileEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.SerializableEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.conn.BasicManagedEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.BufferedHttpEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.HttpEntityWrapper: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()>  ->_SOURCE_
<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()>  ->_SOURCE_
<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>  ->_SOURCE_
<org.apache.http.message.BasicHttpResponse: org.apache.http.StatusLine getStatusLine()>  ->_SOURCE_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>  ->_SOURCE_
<org.apache.http.message.BasicHttpResponse: org.apache.http.HttpEntity getEntity()>  ->_SOURCE_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>  ->_SOURCE_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)>  ->_SOURCE_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool()>  ->_SOURCE_
<android.net.http.AndroidHttpClient$2: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>  ->_SOURCE_
<org.apache.http.entity.ByteArrayEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()>  ->_SOURCE_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)>  ->_SOURCE_
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()>  ->_SOURCE_
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)>  ->_SOURCE_
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)>  ->_SOURCE_
<android.net.http.AndroidHttpClient$2: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>  ->_SOURCE_
<org.apache.http.message.BasicRequestLine: java.lang.String getUri()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: int getSocketTimeout()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getLocalAddress()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: int getLocalPort()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getRemoteAddress()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: int getRemotePort()>  ->_SOURCE_
<android.net.http.AndroidHttpClient$2: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SOURCE_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SOURCE_
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>  ->_SOURCE_
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>  ->_SOURCE_
<org.apache.http.impl.cookie.BrowserCompatSpec: int getVersion()>  ->_SOURCE_
<org.apache.http.impl.cookie.BrowserCompatSpec: org.apache.http.Header getVersionHeader()>  ->_SOURCE_
<org.apache.http.auth.AuthScope: java.lang.String getHost()>  ->_SOURCE_
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.OperatedClientConnection getWrappedConnection()>  ->_SOURCE_
<org.apache.http.message.BasicHttpResponse: org.apache.http.StatusLine getStatusLine()>  ->_SOURCE_
<org.apache.http.message.BasicHttpResponse: org.apache.http.HttpEntity getEntity()>  ->_SOURCE_
<org.apache.http.impl.cookie.BrowserCompatSpec: int getVersion()>  ->_SOURCE_
<org.apache.http.impl.cookie.BrowserCompatSpec: org.apache.http.Header getVersionHeader()>  ->_SOURCE_
<org.apache.http.cookie.CookieOrigin: java.lang.String getHost()>  ->_SOURCE_
<org.apache.http.conn.BasicManagedEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.BufferedHttpEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.conn.BasicManagedEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.BufferedHttpEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.HttpEntityWrapper: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.conn.EofSensorInputStream: int read()>  ->_SOURCE_
<org.apache.http.conn.EofSensorInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.http.conn.EofSensorInputStream: int read(byte[])>  ->_SOURCE_
<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()>  ->_SOURCE_
<org.apache.http.entity.BasicHttpEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.impl.io.ContentLengthInputStream: int read()>  ->_SOURCE_
<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[])>  ->_SOURCE_
<org.apache.http.impl.io.IdentityInputStream: int read()>  ->_SOURCE_
<org.apache.http.impl.io.IdentityInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.http.impl.io.ChunkedInputStream: int read()>  ->_SOURCE_
<org.apache.http.impl.io.ChunkedInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.http.impl.io.ChunkedInputStream: int read(byte[])>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getLocalAddress()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: int getLocalPort()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getRemoteAddress()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: int getRemotePort()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: int getSocketTimeout()>  ->_SOURCE_
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()>  ->_SOURCE_
<android.net.http.Headers: long getTransferEncoding()>  ->_SOURCE_
<android.net.http.Headers: long getContentLength()>  ->_SOURCE_
<android.net.http.Headers: int getConnectionType()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getContentType()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getContentEncoding()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getLocation()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getWwwAuthenticate()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getProxyAuthenticate()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getContentDisposition()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getAcceptRanges()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getExpires()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getCacheControl()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getLastModified()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getEtag()>  ->_SOURCE_
<android.net.http.Headers: java.util.ArrayList getSetCookie()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getPragma()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getRefresh()>  ->_SOURCE_
<android.net.http.Headers: java.lang.String getXPermittedCrossDomainPolicies()>  ->_SOURCE_
<android.net.http.CertificateChainValidator: android.net.http.CertificateChainValidator getInstance()>  ->_SOURCE_
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()>  ->_SOURCE_
<android.net.http.SslError: java.lang.String getUrl()>  ->_SOURCE_
<android.net.http.SslError: int getPrimaryError()>  ->_SOURCE_
<android.net.http.HttpsConnection: java.lang.String getScheme()>  ->_SOURCE_
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()>  ->_SOURCE_
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>  ->_SOURCE_
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()>  ->_SOURCE_
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>  ->_SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getDName()>  ->_SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getCName()>  ->_SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getOName()>  ->_SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getUName()>  ->_SOURCE_
<android.net.http.Connection: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)>  ->_SOURCE_
<android.net.http.Connection: org.apache.http.HttpHost getHost()>  ->_SOURCE_
<android.net.http.Connection: android.net.http.SslCertificate getCertificate()>  ->_SOURCE_
<android.net.http.Connection: org.apache.http.protocol.HttpContext getHttpContext()>  ->_SOURCE_
<android.net.http.Connection: boolean getCanPersist()>  ->_SOURCE_
<android.net.http.HttpsConnection: java.lang.String getScheme()>  ->_SOURCE_
<android.net.http.HttpConnection: java.lang.String getScheme()>  ->_SOURCE_
<android.net.http.Connection: byte[] getBuf()>  ->_SOURCE_
<android.net.http.RequestQueue: android.net.http.Request getRequest()>  ->_SOURCE_
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest()>  ->_SOURCE_
<android.net.http.RequestQueue: android.net.http.Request getRequest(org.apache.http.HttpHost)>  ->_SOURCE_
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest(org.apache.http.HttpHost)>  ->_SOURCE_
<android.net.http.Request: android.net.http.EventHandler getEventHandler()>  ->_SOURCE_
<android.net.http.Request: java.lang.String getHostPort()>  ->_SOURCE_
<android.net.http.Request: java.lang.String getUri()>  ->_SOURCE_
<android.net.http.HttpsConnection$1: java.security.cert.X509Certificate[] getAcceptedIssuers()>  ->_SOURCE_
<android.net.http.HttpConnection: java.lang.String getScheme()>  ->_SOURCE_
<android.net.http.ErrorStrings: java.lang.String getString(int,android.content.Context)>  ->_SOURCE_
<org.apache.http.entity.InputStreamEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.bouncycastle.asn1.DefiniteLengthInputStream: int read()>  ->_SOURCE_
<org.bouncycastle.asn1.DefiniteLengthInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.bouncycastle.asn1.IndefiniteLengthInputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.bouncycastle.asn1.IndefiniteLengthInputStream: int read()>  ->_SOURCE_
<org.bouncycastle.asn1.ConstructedOctetStream: int read(byte[],int,int)>  ->_SOURCE_
<org.bouncycastle.asn1.ConstructedOctetStream: int read()>  ->_SOURCE_
<android.net.http.RequestQueue$ActivePool: org.apache.http.HttpHost getProxyHost()>  ->_SOURCE_
<android.net.http.RequestQueue$ActivePool: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost)>  ->_SOURCE_
<android.net.http.RequestQueue: org.apache.http.HttpHost getProxyHost()>  ->_SOURCE_
<android.net.http.RequestQueue: android.net.http.Request getRequest()>  ->_SOURCE_
<android.net.http.RequestQueue: android.net.http.Request getRequest(org.apache.http.HttpHost)>  ->_SOURCE_
<android.net.http.RequestQueue$ActivePool: org.apache.http.HttpHost getProxyHost()>  ->_SOURCE_
<android.net.http.RequestQueue$ActivePool: android.net.http.ConnectionThread getThread(org.apache.http.HttpHost)>  ->_SOURCE_
<android.net.http.RequestQueue$ActivePool: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost)>  ->_SOURCE_
<android.net.http.RequestHandle: int getRedirectCount()>  ->_SOURCE_
<android.net.http.RequestHandle: java.lang.String getMethod()>  ->_SOURCE_
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest()>  ->_SOURCE_
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest(org.apache.http.HttpHost)>  ->_SOURCE_
<android.net.http.IdleCache: android.net.http.Connection getConnection(org.apache.http.HttpHost)>  ->_SOURCE_
<android.webkit.WebView: java.lang.String getUrl()>  ->_SOURCE_
<android.webkit.WebSettings: boolean getSavePassword()>  ->_SOURCE_
<android.webkit.WebSettings: boolean getLightTouchEnabled()>  ->_SOURCE_
<android.webkit.WebSettings: boolean getDomStorageEnabled()>  ->_SOURCE_
<android.webkit.WebSettings: boolean getDatabaseEnabled()>  ->_SOURCE_
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>  ->_SOURCE_
<android.webkit.WebSettings: boolean getPluginsEnabled()>  ->_SOURCE_
<android.webkit.BrowserFrame: java.lang.String getRawResFilename(int,android.content.Context)>  ->_SOURCE_
<android.webkit.BrowserFrame: android.webkit.CallbackProxy getCallbackProxy()>  ->_SOURCE_
<android.webkit.BrowserFrame: java.lang.String getUserAgentString()>  ->_SOURCE_
<android.webkit.BrowserFrame: boolean getShouldStartScrolledRight()>  ->_SOURCE_
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()>  ->_SOURCE_
<android.webkit.SslClientCertLookupTable: android.webkit.SslClientCertLookupTable getInstance()>  ->_SOURCE_
<android.webkit.SslCertLookupTable: android.webkit.SslCertLookupTable getInstance()>  ->_SOURCE_
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>  ->_SOURCE_
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)>  ->_SOURCE_
<android.webkit.HTML5VideoView: boolean getPauseDuringPreparing()>  ->_SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getLanguage()>  ->_SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.speech.tts.ITextToSpeechService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.security.IKeyChainService$Stub$Proxy: byte[] getCertificate(java.lang.String)>  ->_SOURCE_
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>  ->_SOURCE_
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>  ->_SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getLanguage()>  ->_SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.security.IKeyChainService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>  ->_SOURCE_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)>  ->_SOURCE_
<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>  ->_SOURCE_
<android.security.IKeyChainService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.security.IKeyChainService$Stub$Proxy: byte[] getCertificate(java.lang.String)>  ->_SOURCE_
<android.preference.EditTextPreference: java.lang.String getText()>  ->_SOURCE_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri,android.database.Cursor)>  ->_SOURCE_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri)>  ->_SOURCE_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)>  ->_SOURCE_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsEmergency(android.content.Context)>  ->_SOURCE_
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()>  ->_SOURCE_
<com.android.internal.telephony.CallerInfo: java.lang.String toString()>  ->_SOURCE_
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>  ->_SOURCE_
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>  ->_SOURCE_
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>  ->_SOURCE_
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>  ->_SOURCE_
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)>  ->_SOURCE_
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)>  ->_SOURCE_
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>  ->_SOURCE_
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>  ->_SOURCE_
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>  ->_SOURCE_
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>  ->_SOURCE_
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>  ->_SOURCE_
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>  ->_SOURCE_
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>  ->_SOURCE_
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>  ->_SOURCE_
<android.provider.Contacts$ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)>  ->_SOURCE_
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>  ->_SOURCE_
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>  ->_SOURCE_
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>  ->_SOURCE_
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)>  ->_SOURCE_
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>  ->_SOURCE_
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>  ->_SOURCE_
<android.provider.Contacts$People: android.graphics.Bitmap loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options)>  ->_SOURCE_
<android.provider.Contacts$Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>  ->_SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)>  ->_SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)>  ->_SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>  ->_SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)>  ->_SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>  ->_SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>  ->_SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)>  ->_SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)>  ->_SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)>  ->_SOURCE_
<android.renderscript.Allocation: android.renderscript.Type getType()>  ->_SOURCE_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentVertexTypeIndex()>  ->_SOURCE_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()>  ->_SOURCE_
<android.speech.IRecognitionService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>  ->_SOURCE_
<android.speech.IRecognitionService$Stub: android.os.IBinder asBinder()>  ->_SOURCE_
<android.speech.srec.MicrophoneInputStream: int read()>  ->_SOURCE_
<android.speech.srec.MicrophoneInputStream: int read(byte[])>  ->_SOURCE_
<android.speech.srec.MicrophoneInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.speech.srec.UlawEncoderInputStream: int read(byte[],int,int)>  ->_SOURCE_
<android.speech.srec.UlawEncoderInputStream: int read(byte[])>  ->_SOURCE_
<android.speech.srec.UlawEncoderInputStream: int read()>  ->_SOURCE_
<org.ccil.cowan.tagsoup.Schema: java.lang.String getURI()>  ->_SOURCE_
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getURI(int)>  ->_SOURCE_
<java.io.PushbackReader: int read()>  ->_SOURCE_
<java.io.PushbackReader: int read(char[],int,int)>  ->_SOURCE_
<java.io.PushbackReader: int read()>  ->_SOURCE_
<java.io.FilterReader: int read()>  ->_SOURCE_
<java.io.PushbackReader: int read(char[],int,int)>  ->_SOURCE_
<java.io.FilterReader: int read(char[],int,int)>  ->_SOURCE_
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.support.v4.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)>  ->_SOURCE_
<android.support.v4.widget.CursorAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()>  ->_SOURCE_
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()>  ->_SOURCE_
<android.test.mock.MockContext: android.content.res.Resources$Theme getTheme()>  ->_SOURCE_
<android.test.mock.MockContext: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>  ->_SOURCE_
<android.widget.Gallery: int getChildHeight(android.view.View)>  ->_SOURCE_
<android.widget.Gallery: int getLimitedMotionScrollAmount(boolean,int)>  ->_SOURCE_
<android.widget.Gallery: int getChildDrawingOrder(int,int)>  ->_SOURCE_
<android.widget.SimpleAdapter: java.lang.Object getItem(int)>  ->_SOURCE_
<com.google.android.maps.GeoPoint: int getLatitudeE6()>  ->_SOURCE_
<com.google.android.maps.GeoPoint: int getLongitudeE6()>  ->_SOURCE_
<com.google.android.maps.GeoPoint: java.lang.String toString()>  ->_SOURCE_
<com.google.android.maps.GeoPoint: boolean equals(java.lang.Object)>  ->_SOURCE_
<com.google.android.maps.GeoPoint: int hashCode()>  ->_SOURCE_
<com.google.android.maps.MapView: int getLatitudeSpan()>  ->_SOURCE_
<com.google.android.maps.MapView: int getLongitudeSpan()>  ->_SOURCE_
<droidsafe.concrete.DroidSafeProjection: float metersToEquatorPixels(float)>  ->_SOURCE_
<droidsafe.concrete.DroidSafeProjection: float metersToEquatorPixels(float)>  ->_SOURCE_
<com.google.android.maps.MyLocationOverlay: float getOrientation()>  ->_SOURCE_
<java.io.CharArrayReader: int read()>  ->_SOURCE_
<java.io.CharArrayReader: int read(char[],int,int)>  ->_SOURCE_
<java.io.PipedInputStream: int read()>  ->_SOURCE_
<java.io.PipedInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.PushbackInputStream: int read()>  ->_SOURCE_
<java.io.PushbackInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.SequenceInputStream: int read()>  ->_SOURCE_
<java.io.SequenceInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.io.StringBufferInputStream: int read()>  ->_SOURCE_
<java.io.StringBufferInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.lang.DroidSafeProcess: int exitValue()>  ->_SOURCE_
<java.lang.DroidSafeProcess: java.io.InputStream getInputStream()>  ->_SOURCE_
<java.lang.ProcessBuilder: void <init>(java.lang.String[])>  ->_SOURCE_
<java.lang.ProcessBuilder: void <init>(java.util.List)>  ->_SOURCE_
<java.lang.ProcessBuilder: java.util.List command()>  ->_SOURCE_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.lang.String[])>  ->_SOURCE_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>  ->_SOURCE_
<java.lang.ProcessBuilder: java.lang.Process start()>  ->_SOURCE_
<java.nio.channels.Channels$ChannelInputStream: int read()>  ->_SOURCE_
<java.nio.channels.Channels$ChannelInputStream: int read(byte[],int,int)>  ->_SOURCE_
<java.nio.channels.Channels$InputStreamChannel: int read(java.nio.ByteBuffer)>  ->_SOURCE_
<java.sql.Timestamp: long getTime()>  ->_SOURCE_
<javax.crypto.CipherInputStream: int read()>  ->_SOURCE_
<javax.crypto.CipherInputStream: int read(byte[],int,int)>  ->_SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>  ->_SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>  ->_SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.security.Provider)>  ->_SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>  ->_SOURCE_
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)>  ->_SOURCE_
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getURI(int)>  ->_SOURCE_
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)>  ->_SOURCE_
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String getURI(java.lang.String)>  ->_SOURCE_
<org.apache.commons.codec.binary.Base64InputStream: int read()>  ->_SOURCE_
<org.apache.commons.codec.binary.Base64InputStream: int read(byte[],int,int)>  ->_SOURCE_
<org.apache.commons.net.ProtocolCommandEvent: java.lang.String getMessage()>  ->_SOURCE_
<org.apache.commons.net.io.DotTerminatedMessageReader: int read(char[],int,int)>  ->_SOURCE_
<org.apache.commons.net.io.Util: long copyStream(java.io.InputStream,java.io.OutputStream,int,long,org.apache.commons.net.io.CopyStreamListener,boolean)>  ->_SOURCE_
<org.apache.commons.net.io.Util: long copyStream(java.io.InputStream,java.io.OutputStream,int,long,org.apache.commons.net.io.CopyStreamListener)>  ->_SOURCE_
<org.apache.commons.net.io.Util: long copyStream(java.io.InputStream,java.io.OutputStream,int)>  ->_SOURCE_
<org.apache.commons.net.io.Util: long copyStream(java.io.InputStream,java.io.OutputStream)>  ->_SOURCE_
<org.apache.commons.net.io.Util: long copyReader(java.io.Reader,java.io.Writer,int,long,org.apache.commons.net.io.CopyStreamListener)>  ->_SOURCE_
<org.apache.commons.net.io.Util: long copyReader(java.io.Reader,java.io.Writer,int)>  ->_SOURCE_
<org.apache.commons.net.io.Util: long copyReader(java.io.Reader,java.io.Writer)>  ->_SOURCE_
<org.apache.commons.net.smtp.SMTP: java.lang.String getReplyString()>  ->_SOURCE_
<org.apache.commons.net.telnet.TelnetInputStream: int read(byte[])>  ->_SOURCE_
<org.apache.http.entity.StringEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.EntityTemplate: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.FileEntity: java.io.InputStream getContent()>  ->_SOURCE_
<org.apache.http.entity.SerializableEntity: java.io.InputStream getContent()>  ->_SOURCE_
