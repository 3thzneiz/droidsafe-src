<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>  ->_SINK_
<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.AbstractSequentialList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.concurrent.CopyOnWriteArrayList$CowSubList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.Collections$CheckedList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(char[])>  ->_SINK_
<java.io.PrintStream: void print(char[])>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(char)>  ->_SINK_
<java.io.PrintStream: void print(char)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(double)>  ->_SINK_
<java.io.PrintStream: void print(double)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(float)>  ->_SINK_
<java.io.PrintStream: void print(float)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(int)>  ->_SINK_
<java.io.PrintStream: void print(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(long)>  ->_SINK_
<java.io.PrintStream: void print(long)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.Object)>  ->_SINK_
<java.io.PrintStream: void print(java.lang.Object)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.String)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(java.lang.String)>  ->_SINK_
<java.io.PrintStream: void print(java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(boolean)>  ->_SINK_
<java.io.PrintStream: void print(boolean)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println()>  ->_SINK_
<java.io.PrintStream: void println()>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(char[])>  ->_SINK_
<java.io.PrintStream: void println(char[])>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(char)>  ->_SINK_
<java.io.PrintStream: void println(char)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(double)>  ->_SINK_
<java.io.PrintStream: void println(double)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(float)>  ->_SINK_
<java.io.PrintStream: void println(float)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(int)>  ->_SINK_
<java.io.PrintStream: void println(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(long)>  ->_SINK_
<java.io.PrintStream: void println(long)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.Object)>  ->_SINK_
<java.io.PrintStream: void println(java.lang.Object)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.String)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>  ->_SINK_
<java.io.PrintStream: void println(java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(boolean)>  ->_SINK_
<java.io.PrintStream: void println(boolean)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[],int,int)>  ->_SINK_
<java.io.PrintStream: void write(byte[],int,int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(int)>  ->_SINK_
<java.io.PrintStream: void write(int)>  ->_SINK_
<java.io.PrintWriter: void print(char[])>  ->_SINK_
<java.io.PrintWriter: void print(char)>  ->_SINK_
<java.io.PrintWriter: void print(double)>  ->_SINK_
<java.io.PrintWriter: void print(float)>  ->_SINK_
<java.io.PrintWriter: void print(int)>  ->_SINK_
<java.io.PrintWriter: void print(long)>  ->_SINK_
<java.io.PrintWriter: void print(java.lang.Object)>  ->_SINK_
<java.io.PrintWriter: void print(java.lang.String)>  ->_SINK_
<java.io.PrintWriter: void print(boolean)>  ->_SINK_
<java.io.PrintWriter: void println()>  ->_SINK_
<java.io.PrintWriter: void println(char[])>  ->_SINK_
<java.io.PrintWriter: void println(char)>  ->_SINK_
<java.io.PrintWriter: void println(double)>  ->_SINK_
<java.io.PrintWriter: void println(float)>  ->_SINK_
<java.io.PrintWriter: void println(int)>  ->_SINK_
<java.io.PrintWriter: void println(long)>  ->_SINK_
<java.io.PrintWriter: void println(java.lang.Object)>  ->_SINK_
<java.io.PrintWriter: void println(java.lang.String)>  ->_SINK_
<java.io.PrintWriter: void println(boolean)>  ->_SINK_
<java.io.PrintWriter: void write(char[])>  ->_SINK_
<java.io.PrintWriter: void write(char[],int,int)>  ->_SINK_
<java.io.PrintWriter: void write(int)>  ->_SINK_
<java.io.PrintWriter: void write(java.lang.String)>  ->_SINK_
<java.io.PrintWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.PrintWriter: java.io.PrintWriter append(char)>  ->_SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.ObjectOutputStream: void write(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean)>  ->_SINK_
<java.io.ObjectOutputStream: void writeByte(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)>  ->_SINK_
<java.io.ObjectOutputStream: void writeChar(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeChars(java.lang.String)>  ->_SINK_
<java.io.ObjectOutputStream: void writeDouble(double)>  ->_SINK_
<java.io.ObjectOutputStream: void writeFloat(float)>  ->_SINK_
<java.io.ObjectOutputStream: void writeInt(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeLong(long)>  ->_SINK_
<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)>  ->_SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>  ->_SINK_
<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)>  ->_SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object,boolean)>  ->_SINK_
<java.io.ObjectOutputStream: void writeShort(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>  ->_SINK_
<java.lang.System: void setIn(java.io.InputStream)>  ->_SINK_
<java.lang.System: void setOut(java.io.PrintStream)>  ->_SINK_
<java.lang.System: void setErr(java.io.PrintStream)>  ->_SINK_
<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>  ->_SINK_
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>  ->_SINK_
<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>  ->_SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>  ->_SINK_
<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>  ->_SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>  ->_SINK_
<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>  ->_SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setDefaultAssertionStatus(boolean)>  ->_SINK_
<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>  ->_SINK_
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>  ->_SINK_
<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>  ->_SINK_
<java.lang.reflect.Field: void setChar(java.lang.Object,char)>  ->_SINK_
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>  ->_SINK_
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>  ->_SINK_
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>  ->_SINK_
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>  ->_SINK_
<java.lang.reflect.Field: void setShort(java.lang.Object,short)>  ->_SINK_
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>  ->_SINK_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])>  ->_SINK_
<java.net.URL: java.io.InputStream openStream()>  ->_SINK_
<java.net.URL: java.net.URLConnection openConnection()>  ->_SINK_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>  ->_SINK_
<java.util.jar.JarFile$JarFileInputStream: int read(byte[],int,int)>  ->_SINK_
<java.lang.StringBuffer: void setCharAt(int,char)>  ->_SINK_
<java.lang.StringBuffer: void setCharAt(int,char)>  ->_SINK_
<java.lang.AbstractStringBuilder: void setCharAt(int,char)>  ->_SINK_
<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[],int,int)>  ->_SINK_
<java.io.PrintStream: void write(byte[],int,int)>  ->_SINK_
<java.io.DataOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(byte[],int,int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[],int,int)>  ->_SINK_
<android.util.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.SocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.FilterOutputStream: void write(byte[],int,int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(int)>  ->_SINK_
<java.io.PrintStream: void write(int)>  ->_SINK_
<java.io.DataOutputStream: void write(int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(int)>  ->_SINK_
<android.util.Base64OutputStream: void write(int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(int)>  ->_SINK_
<java.io.FilterOutputStream: void write(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[])>  ->_SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[])>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[])>  ->_SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[])>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[])>  ->_SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(byte[])>  ->_SINK_
<java.io.OutputStream: void write(byte[])>  ->_SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[],int,int)>  ->_SINK_
<java.io.PrintStream: void write(byte[],int,int)>  ->_SINK_
<java.io.DataOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(byte[],int,int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[],int,int)>  ->_SINK_
<android.util.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.SocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.FilterOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.FileOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.nio.SocketChannelImpl$SocketChannelOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(byte[],int,int)>  ->_SINK_
<libcore.net.http.RetryableOutputStream: void write(byte[],int,int)>  ->_SINK_
<libcore.net.http.ChunkedOutputStream: void write(byte[],int,int)>  ->_SINK_
<libcore.net.http.FixedLengthOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.jar.JarVerifier$VerifierEntry: void write(byte[],int,int)>  ->_SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.PipedOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.nio.channels.Channels$ChannelOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.OutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.ObjectOutputStream: void write(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(int)>  ->_SINK_
<java.io.PrintStream: void write(int)>  ->_SINK_
<java.io.DataOutputStream: void write(int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(int)>  ->_SINK_
<android.util.Base64OutputStream: void write(int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(int)>  ->_SINK_
<java.io.FilterOutputStream: void write(int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>  ->_SINK_
<java.io.FileOutputStream: void write(int)>  ->_SINK_
<java.io.ByteArrayOutputStream: void write(int)>  ->_SINK_
<java.nio.SocketChannelImpl$SocketChannelOutputStream: void write(int)>  ->_SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(int)>  ->_SINK_
<libcore.net.http.AbstractHttpOutputStream: void write(int)>  ->_SINK_
<java.util.jar.JarVerifier$VerifierEntry: void write(int)>  ->_SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(int)>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream$1: void write(int)>  ->_SINK_
<android.bluetooth.BluetoothOutputStream: void write(int)>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(int)>  ->_SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(int)>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(int)>  ->_SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)>  ->_SINK_
<java.io.PipedOutputStream: void write(int)>  ->_SINK_
<java.nio.channels.Channels$ChannelOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(int)>  ->_SINK_
<java.io.OutputStream: void write(int)>  ->_SINK_
<java.io.File: boolean setLastModified(long)>  ->_SINK_
<java.io.File: boolean setExecutable(boolean,boolean)>  ->_SINK_
<java.io.File: boolean setExecutable(boolean)>  ->_SINK_
<java.io.File: boolean setReadable(boolean,boolean)>  ->_SINK_
<java.io.File: boolean setReadable(boolean)>  ->_SINK_
<java.io.File: boolean setWritable(boolean,boolean)>  ->_SINK_
<java.io.File: boolean setWritable(boolean)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.FileOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>  ->_SINK_
<java.io.FileOutputStream: void write(int)>  ->_SINK_
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>  ->_SINK_
<java.util.Properties: void store(java.io.Writer,java.lang.String)>  ->_SINK_
<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)>  ->_SINK_
<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>  ->_SINK_
<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>  ->_SINK_
<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>  ->_SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)>  ->_SINK_
<libcore.io.ForwardingOs: void setegid(int)>  ->_SINK_
<libcore.io.ForwardingOs: void seteuid(int)>  ->_SINK_
<libcore.io.ForwardingOs: void setgid(int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>  ->_SINK_
<libcore.io.ForwardingOs: void setuid(int)>  ->_SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  ->_SINK_
<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  ->_SINK_
<dalvik.system.VMRuntime: float setTargetHeapUtilization(float)>  ->_SINK_
<dalvik.system.VMRuntime: long setMinimumHeapSize(long)>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String)>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>  ->_SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.ObjectOutputStream: void write(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>  ->_SINK_
<java.io.DataOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.DataOutputStream: void write(int)>  ->_SINK_
<java.io.DataOutputStream: void writeByte(int)>  ->_SINK_
<java.io.DataOutputStream: void writeChar(int)>  ->_SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)>  ->_SINK_
<java.io.DataOutputStream: void writeDouble(double)>  ->_SINK_
<java.io.DataOutputStream: void writeFloat(float)>  ->_SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)>  ->_SINK_
<java.io.ByteArrayOutputStream: void write(int)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,byte)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,char)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,double)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,float)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,int)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,long)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,java.lang.Object)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,short)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,boolean)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,boolean)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,char)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,byte)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,short)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,int)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,long)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,float)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,double)>  ->_SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,java.lang.Object)>  ->_SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: void writeExternal(java.io.ObjectOutput)>  ->_SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: void writeExternal(java.io.ObjectOutput)>  ->_SINK_
<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: void writeExternal(java.io.ObjectOutput)>  ->_SINK_
<java.io.PrintWriter: void write(char[])>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(char[])>  ->_SINK_
<java.io.Writer: void write(char[])>  ->_SINK_
<java.io.PrintWriter: void write(char[],int,int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)>  ->_SINK_
<java.io.BufferedWriter: void write(char[],int,int)>  ->_SINK_
<android.util.LogWriter: void write(char[],int,int)>  ->_SINK_
<java.io.StringWriter: void write(char[],int,int)>  ->_SINK_
<java.io.CharArrayWriter: void write(char[],int,int)>  ->_SINK_
<android.opengl.GLSurfaceView$LogWriter: void write(char[],int,int)>  ->_SINK_
<android.support.v4.util.LogWriter: void write(char[],int,int)>  ->_SINK_
<java.io.FilterWriter: void write(char[],int,int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(char[],int,int)>  ->_SINK_
<java.io.Writer: void write(char[],int,int)>  ->_SINK_
<java.io.PrintWriter: void write(int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(int)>  ->_SINK_
<java.io.BufferedWriter: void write(int)>  ->_SINK_
<java.io.CharArrayWriter: void write(int)>  ->_SINK_
<java.io.FilterWriter: void write(int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(int)>  ->_SINK_
<java.io.Writer: void write(int)>  ->_SINK_
<java.io.PrintWriter: void write(java.lang.String)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(java.lang.String)>  ->_SINK_
<java.io.Writer: void write(java.lang.String)>  ->_SINK_
<java.io.PrintWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.CharArrayWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.FilterWriter: void write(java.lang.String,int,int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.Writer: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.Writer: java.io.Writer append(char)>  ->_SINK_
<java.io.BufferedOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.AbstractSequentialList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.concurrent.CopyOnWriteArrayList$CowSubList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>  ->_SINK_
<java.util.Collections$CheckedListIterator: void set(java.lang.Object)>  ->_SINK_
<java.util.concurrent.CopyOnWriteArrayList$CowIterator: void set(java.lang.Object)>  ->_SINK_
<gov.nist.javax.sip.message.HeaderIterator: void set(java.lang.Object)>  ->_SINK_
<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>  ->_SINK_
<java.util.Arrays$ArrayList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>  ->_SINK_
<java.util.concurrent.ConcurrentHashMap$WriteThroughEntry: java.lang.Object setValue(java.lang.Object)>  ->_SINK_
<java.util.Collections$CheckedMap$CheckedEntry: java.lang.Object setValue(java.lang.Object)>  ->_SINK_
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry: java.lang.Object setValue(java.lang.Object)>  ->_SINK_
<android.content.ContextWrapper: void setTheme(int)>  ->_SINK_
<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.test.RenamingDelegatingContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.test.mock.MockContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.app.ContextImpl: void setWallpaper(android.graphics.Bitmap)>  ->_SINK_
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>  ->_SINK_
<android.app.ContextImpl: void setWallpaper(java.io.InputStream)>  ->_SINK_
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>  ->_SINK_
<android.app.ContextImpl: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.Activity: void startActivity(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void startActivity(android.content.Intent)>  ->_SINK_
<android.test.mock.MockContext: void startActivity(android.content.Intent)>  ->_SINK_
<android.content.Context: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void startActivities(android.content.Intent[])>  ->_SINK_
<android.app.Activity: void startActivities(android.content.Intent[])>  ->_SINK_
<android.content.ContextWrapper: void startActivities(android.content.Intent[])>  ->_SINK_
<android.test.mock.MockContext: void startActivities(android.content.Intent[])>  ->_SINK_
<android.content.Context: void startActivities(android.content.Intent[])>  ->_SINK_
<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.content.Context: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.test.IsolatedContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>  ->_SINK_
<android.content.Context: void sendStickyBroadcast(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.test.IsolatedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>  ->_SINK_
<android.app.ContextImpl: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.Activity: void setIntent(android.content.Intent)>  ->_SINK_
<android.app.TabActivity: void onRestoreInstanceState(android.os.Bundle)>  ->_SINK_
<android.app.ExpandableListActivity: void onRestoreInstanceState(android.os.Bundle)>  ->_SINK_
<android.preference.PreferenceActivity: void onRestoreInstanceState(android.os.Bundle)>  ->_SINK_
<android.app.ListActivity: void onRestoreInstanceState(android.os.Bundle)>  ->_SINK_
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>  ->_SINK_
<android.app.Activity: void setPersistent(boolean)>  ->_SINK_
<android.app.Activity: void setContentView(int)>  ->_SINK_
<android.app.Activity: void setContentView(android.view.View)>  ->_SINK_
<android.app.Activity: void setFinishOnTouchOutside(boolean)>  ->_SINK_
<android.app.Activity: void openContextMenu(android.view.View)>  ->_SINK_
<android.app.Activity: boolean showDialog(int,android.os.Bundle)>  ->_SINK_
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>  ->_SINK_
<android.app.Activity: void setFeatureDrawableResource(int,int)>  ->_SINK_
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>  ->_SINK_
<android.app.Activity: void setFeatureDrawableAlpha(int,int)>  ->_SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int)>  ->_SINK_
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.Activity: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.Activity: void startActivities(android.content.Intent[])>  ->_SINK_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>  ->_SINK_
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>  ->_SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>  ->_SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>  ->_SINK_
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.Activity: void setResult(int)>  ->_SINK_
<android.app.Activity: void setResult(int,android.content.Intent)>  ->_SINK_
<android.app.Activity: void setRequestedOrientation(int)>  ->_SINK_
<android.app.Activity: boolean navigateUpTo(android.content.Intent)>  ->_SINK_
<android.app.Activity: void setProgressBarVisibility(boolean)>  ->_SINK_
<android.app.Activity: void setProgressBarIndeterminate(boolean)>  ->_SINK_
<android.app.Activity: void setProgress(int)>  ->_SINK_
<android.app.Activity: void setSecondaryProgress(int)>  ->_SINK_
<android.app.Activity: void setVolumeControlStream(int)>  ->_SINK_
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.Activity: void setImmersive(boolean)>  ->_SINK_
<android.app.Service: void setForeground(boolean)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.content.BroadcastReceiver: void setResultCode(int)>  ->_SINK_
<android.content.BroadcastReceiver: void setResultData(java.lang.String)>  ->_SINK_
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>  ->_SINK_
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.BroadcastReceiver: void setPendingResult(android.content.BroadcastReceiver$PendingResult)>  ->_SINK_
<android.content.ContentValues: void putAll(android.content.ContentValues)>  ->_SINK_
<android.content.ContentValues: void putNull(java.lang.String)>  ->_SINK_
<android.content.ContentValues: void putStringArrayList(java.lang.String,java.util.ArrayList)>  ->_SINK_
<android.os.Bundle: android.os.Bundle forPair(java.lang.String,java.lang.String)>  ->_SINK_
<android.os.Bundle: void putAll(android.os.Bundle)>  ->_SINK_
<android.os.Bundle: void putChar(java.lang.String,char)>  ->_SINK_
<android.os.Bundle: void putShort(java.lang.String,short)>  ->_SINK_
<android.os.Bundle: void putLong(java.lang.String,long)>  ->_SINK_
<android.os.Bundle: void putFloat(java.lang.String,float)>  ->_SINK_
<android.os.Bundle: void putDouble(java.lang.String,double)>  ->_SINK_
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>  ->_SINK_
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>  ->_SINK_
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>  ->_SINK_
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>  ->_SINK_
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>  ->_SINK_
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])>  ->_SINK_
<android.os.Bundle: void putByteArray(java.lang.String,byte[])>  ->_SINK_
<android.os.Bundle: void putShortArray(java.lang.String,short[])>  ->_SINK_
<android.os.Bundle: void putCharArray(java.lang.String,char[])>  ->_SINK_
<android.os.Bundle: void putIntArray(java.lang.String,int[])>  ->_SINK_
<android.os.Bundle: void putLongArray(java.lang.String,long[])>  ->_SINK_
<android.os.Bundle: void putFloatArray(java.lang.String,float[])>  ->_SINK_
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])>  ->_SINK_
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>  ->_SINK_
<android.os.Bundle: void putIBinder(java.lang.String,android.os.IBinder)>  ->_SINK_
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>  ->_SINK_
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>  ->_SINK_
<android.content.Intent: void setAllowFds(boolean)>  ->_SINK_
<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>  ->_SINK_
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>  ->_SINK_
<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)>  ->_SINK_
<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>  ->_SINK_
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>  ->_SINK_
<android.content.Intent: void setSourceBounds(android.graphics.Rect)>  ->_SINK_
<android.content.Intent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.res.Configuration: void setTo(android.content.res.Configuration)>  ->_SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>  ->_SINK_
<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.app.ContextImpl: void setWallpaper(android.graphics.Bitmap)>  ->_SINK_
<android.app.ContextImpl: void setWallpaper(java.io.InputStream)>  ->_SINK_
<android.app.ContextImpl: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void startActivities(android.content.Intent[])>  ->_SINK_
<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.ContextImpl: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(int[],android.widget.RemoteViews)>  ->_SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(int,android.widget.RemoteViews)>  ->_SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)>  ->_SINK_
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int[],int)>  ->_SINK_
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int,int)>  ->_SINK_
<android.appwidget.AppWidgetManager: void bindAppWidgetId(int,android.content.ComponentName)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer put(byte)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer put(byte[],int,int)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer put(int,byte)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putChar(char)>  ->_SINK_
<java.nio.BaseByteBuffer: java.nio.ByteBuffer putChar(char)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putChar(int,char)>  ->_SINK_
<java.nio.BaseByteBuffer: java.nio.ByteBuffer putChar(int,char)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putDouble(double)>  ->_SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putDouble(double)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putDouble(int,double)>  ->_SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putDouble(int,double)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putFloat(float)>  ->_SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putFloat(float)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putFloat(int,float)>  ->_SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putFloat(int,float)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putInt(int)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putInt(int,int)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putLong(long)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putLong(int,long)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putShort(short)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putShort(int,short)>  ->_SINK_
<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setAllowUserInteraction(boolean)>  ->_SINK_
<libcore.net.url.JarURLConnectionImpl: void setDefaultUseCaches(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setDefaultUseCaches(boolean)>  ->_SINK_
<java.net.URLConnection: void setDefaultUseCaches(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setDoInput(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setDoOutput(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setIfModifiedSince(long)>  ->_SINK_
<libcore.net.http.HttpURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)>  ->_SINK_
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>  ->_SINK_
<libcore.net.url.JarURLConnectionImpl: void setUseCaches(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setUseCaches(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setConnectTimeout(int)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setReadTimeout(int)>  ->_SINK_
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer put(char)>  ->_SINK_
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer put(char[],int,int)>  ->_SINK_
<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)>  ->_SINK_
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer put(int,char)>  ->_SINK_
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>  ->_SINK_
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>  ->_SINK_
<java.lang.ThreadLocal: void set(java.lang.Object)>  ->_SINK_
<java.util.Formatter$FormatToken: boolean setFlag(int)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setCurrency(java.util.Currency)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setGroupingSize(int)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setGroupingUsed(boolean)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setMaximumFractionDigits(int)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setMaximumIntegerDigits(int)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setMinimumFractionDigits(int)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setMinimumIntegerDigits(int)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setMultiplier(int)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setNegativePrefix(java.lang.String)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setNegativeSuffix(java.lang.String)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setPositivePrefix(java.lang.String)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setPositiveSuffix(java.lang.String)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setParseIntegerOnly(boolean)>  ->_SINK_
<libcore.icu.NativeDecimalFormat: void setRoundingMode(java.math.RoundingMode,double)>  ->_SINK_
<java.util.Formatter$CachedDecimalFormat: libcore.icu.NativeDecimalFormat update(libcore.icu.LocaleData,java.lang.String)>  ->_SINK_
<java.math.BigInteger: java.math.BigInteger setBit(int)>  ->_SINK_
<libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>  ->_SINK_
<java.io.BufferedWriter: void write(char[],int,int)>  ->_SINK_
<java.io.BufferedWriter: void write(int)>  ->_SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.util.Date: void setDate(int)>  ->_SINK_
<java.sql.Date: void setHours(int)>  ->_SINK_
<java.util.Date: void setHours(int)>  ->_SINK_
<java.sql.Date: void setMinutes(int)>  ->_SINK_
<java.util.Date: void setMinutes(int)>  ->_SINK_
<java.util.Date: void setMonth(int)>  ->_SINK_
<java.sql.Date: void setSeconds(int)>  ->_SINK_
<java.util.Date: void setSeconds(int)>  ->_SINK_
<java.util.Date: void setYear(int)>  ->_SINK_
<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>  ->_SINK_
<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>  ->_SINK_
<java.math.BigDecimal: java.math.BigDecimal setScale(int)>  ->_SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer,long)>  ->_SINK_
<libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)>  ->_SINK_
<libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>  ->_SINK_
<java.nio.DatagramChannelImpl: long read(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.DatagramChannelImpl: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.SocketChannelImpl: boolean connect(java.net.SocketAddress)>  ->_SINK_
<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>  ->_SINK_
<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>  ->_SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setAttribute(java.lang.String,java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setIdAttribute(java.lang.String,boolean)>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)>  ->_SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)>  ->_SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: void setFeature(java.lang.String,boolean)>  ->_SINK_
<javax.xml.parsers.DocumentBuilderFactory: void setSchema(javax.xml.validation.Schema)>  ->_SINK_
<org.apache.harmony.xml.dom.NodeImpl: void setNodeValue(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setPrefix(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.AttrImpl: void setPrefix(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.NodeImpl: void setPrefix(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.NodeImpl: void setTextContent(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)>  ->_SINK_
<java.lang.ThreadGroup: void setMaxPriority(int)>  ->_SINK_
<java.lang.ProcessManager: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File,boolean)>  ->_SINK_
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)>  ->_SINK_
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>  ->_SINK_
<java.io.RandomAccessFile: void write(byte[])>  ->_SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.DataOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)>  ->_SINK_
<java.io.ObjectOutputStream: void write(int)>  ->_SINK_
<java.io.DataOutputStream: void write(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean)>  ->_SINK_
<java.io.ObjectOutputStream: void writeByte(int)>  ->_SINK_
<java.io.DataOutputStream: void writeByte(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)>  ->_SINK_
<java.io.ObjectOutputStream: void writeChar(int)>  ->_SINK_
<java.io.DataOutputStream: void writeChar(int)>  ->_SINK_
<java.io.RandomAccessFile: void writeChar(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeChars(java.lang.String)>  ->_SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)>  ->_SINK_
<java.io.RandomAccessFile: void writeChars(java.lang.String)>  ->_SINK_
<java.io.ObjectOutputStream: void writeDouble(double)>  ->_SINK_
<java.io.DataOutputStream: void writeDouble(double)>  ->_SINK_
<java.io.RandomAccessFile: void writeDouble(double)>  ->_SINK_
<java.io.ObjectOutputStream: void writeFloat(float)>  ->_SINK_
<java.io.DataOutputStream: void writeFloat(float)>  ->_SINK_
<java.io.RandomAccessFile: void writeFloat(float)>  ->_SINK_
<java.io.ObjectOutputStream: void writeInt(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeLong(long)>  ->_SINK_
<java.io.ObjectOutputStream: void writeShort(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>  ->_SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)>  ->_SINK_
<java.io.RandomAccessFile: void writeUTF(java.lang.String)>  ->_SINK_
<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>  ->_SINK_
<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>  ->_SINK_
<java.util.jar.JarFile$JarFileInputStream: int read(byte[],int,int)>  ->_SINK_
<java.util.concurrent.ConcurrentHashMap$WriteThroughEntry: java.lang.Object setValue(java.lang.Object)>  ->_SINK_
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>  ->_SINK_
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>  ->_SINK_
<android.content.ContextWrapper: void setTheme(int)>  ->_SINK_
<android.test.RenamingDelegatingContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>  ->_SINK_
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>  ->_SINK_
<android.app.Activity: void startActivity(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.Activity: void startActivities(android.content.Intent[])>  ->_SINK_
<android.content.ContextWrapper: void startActivities(android.content.Intent[])>  ->_SINK_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.test.IsolatedContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.test.IsolatedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>  ->_SINK_
<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.ActivityThread: void registerOnActivityPausedListener(android.app.Activity,android.app.OnActivityPausedListener)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent)>  ->_SINK_
<android.app.ActivityManagerProxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean willActivityBeVisible(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void unregisterReceiver(android.content.IIntentReceiver)>  ->_SINK_
<android.app.ActivityManagerProxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void attachApplication(android.app.IApplicationThread)>  ->_SINK_
<android.app.ActivityManagerProxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void activityPaused(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.graphics.Bitmap,java.lang.CharSequence)>  ->_SINK_
<android.app.ActivityManagerProxy: void activitySlept(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void activityDestroyed(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void moveTaskToBack(int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void moveTaskBackwards(int)>  ->_SINK_
<android.app.ActivityManagerProxy: void reportThumbnail(android.os.IBinder,android.graphics.Bitmap,java.lang.CharSequence)>  ->_SINK_
<android.app.ActivityManagerProxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean unbindService(android.app.IServiceConnection)>  ->_SINK_
<android.app.ActivityManagerProxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: android.os.IBinder peekService(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void backupAgentCreated(java.lang.String,android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void killApplicationProcess(java.lang.String,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>  ->_SINK_
<android.app.ActivityManagerProxy: void setRequestedOrientation(android.os.IBinder,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void cancelIntentSender(android.content.IIntentSender)>  ->_SINK_
<android.app.ActivityManagerProxy: void setProcessLimit(int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setProcessForeground(android.os.IBinder,int,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: int checkPermission(java.lang.String,int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: int checkUriPermission(android.net.Uri,int,int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void showWaitingForDebugger(android.app.IApplicationThread,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void setDebugApp(java.lang.String,boolean,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void setAlwaysFinish(boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void setActivityController(android.app.IActivityController)>  ->_SINK_
<android.app.ActivityManagerProxy: void noteWakeupAlarm(android.content.IIntentSender)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean killPids(int[],java.lang.String,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ActivityManagerProxy: void signalPersistentProcesses(int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean shutdown(int)>  ->_SINK_
<android.app.ActivityManagerProxy: void closeSystemDialogs(java.lang.String)>  ->_SINK_
<android.app.ActivityManagerProxy: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setImmersive(android.os.IBinder,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean isImmersive(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void crashApplication(int,int,java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ActivityManagerProxy: android.os.IBinder newUriPermissionOwner(java.lang.String)>  ->_SINK_
<android.app.ActivityManagerProxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int)>  ->_SINK_
<android.app.ActivityManagerProxy: int checkGrantUriPermission(int,java.lang.String,android.net.Uri,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setFrontActivityScreenCompatMode(int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setPackageScreenCompatMode(java.lang.String,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setPackageAskScreenCompat(java.lang.String,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean switchUser(int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean removeSubTask(int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean removeTask(int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void registerProcessObserver(android.app.IProcessObserver)>  ->_SINK_
<android.app.ActivityManagerProxy: void unregisterProcessObserver(android.app.IProcessObserver)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)>  ->_SINK_
<android.app.Notification: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>  ->_SINK_
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>  ->_SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int d(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int println(int,java.lang.String,java.lang.String)>  ->_SINK_
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.text.style.TextAppearanceSpan: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.Intent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.Notification: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.ContentProviderOperation: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.Message: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.appwidget.AppWidgetProviderInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.IActivityManager$ContentProviderHolder: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ResultInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.IActivityManager$WaitResult: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ActivityManager$TaskThumbnails: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ActivityManager$RecentTaskInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ApplicationErrorReport: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.textservice.SpellCheckerInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.DropBoxManager$Entry: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ActivityManager$RunningTaskInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.SearchableInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.admin.DeviceAdminInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.AbsListView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.widget.ActionBarView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.TextView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.ExpandableListView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.ProgressBar$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.AdapterViewAnimator$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.AbsSpinner$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.CompoundButton$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.DatePicker$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.support.v4.view.ViewPager$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.TimePicker$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.PreferenceScreen$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.TwoStatePreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.DialogPreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.EditTextPreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.ListPreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.FragmentManagerState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.BackStackState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.WallpaperInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$ReflectionAction: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$SetOnClickFillInIntent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$ViewGroupAction: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$SetOnClickPendingIntent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$SetPendingIntentTemplate: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.net.VpnConfig: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.net.LegacyVpnInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.statusbar.StatusBarIconList: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.PeriodicSync: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.statusbar.StatusBarNotification: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.cat.Item: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.SyncResult: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.PreferenceActivity$Header: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.Parcel: void setDataSize(int)>  ->_SINK_
<android.os.Parcel: void setDataPosition(int)>  ->_SINK_
<android.os.Parcel: void setDataCapacity(int)>  ->_SINK_
<android.os.Parcel: void writeByteArray(byte[])>  ->_SINK_
<android.os.Parcel: void writeByte(byte)>  ->_SINK_
<android.os.Parcel: void writeArray(java.lang.Object[])>  ->_SINK_
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>  ->_SINK_
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>  ->_SINK_
<android.os.Parcel: void writeCharArray(char[])>  ->_SINK_
<android.os.Parcel: void writeLongArray(long[])>  ->_SINK_
<android.os.Parcel: void writeFloatArray(float[])>  ->_SINK_
<android.os.Parcel: void writeDoubleArray(double[])>  ->_SINK_
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>  ->_SINK_
<android.os.Parcel: void writeCharSequenceArray(java.lang.CharSequence[])>  ->_SINK_
<android.os.Parcel: void writeSerializable(java.io.Serializable)>  ->_SINK_
<android.os.Parcel: void writeException(java.lang.Exception)>  ->_SINK_
<android.util.SparseArray: void setValueAt(int,java.lang.Object)>  ->_SINK_
<android.util.SparseArray: void append(int,java.lang.Object)>  ->_SINK_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>  ->_SINK_
<android.content.res.AssetManager: java.io.InputStream openNonAsset(java.lang.String)>  ->_SINK_
<android.content.res.AssetManager: java.io.InputStream openNonAsset(java.lang.String,int)>  ->_SINK_
<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String)>  ->_SINK_
<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>  ->_SINK_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>  ->_SINK_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>  ->_SINK_
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>  ->_SINK_
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>  ->_SINK_
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>  ->_SINK_
<android.app.ApplicationPackageManager: boolean addPermission(android.content.pm.PermissionInfo)>  ->_SINK_
<android.app.ApplicationPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>  ->_SINK_
<android.app.ApplicationPackageManager: boolean hasSystemFeature(java.lang.String)>  ->_SINK_
<android.app.ApplicationPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ApplicationPackageManager: void addPackageToPreferred(java.lang.String)>  ->_SINK_
<android.app.ApplicationPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>  ->_SINK_
<android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)>  ->_SINK_
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>  ->_SINK_
<android.database.sqlite.SQLiteDatabase: void setVersion(int)>  ->_SINK_
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>  ->_SINK_
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>  ->_SINK_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>  ->_SINK_
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>  ->_SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>  ->_SINK_
<android.graphics.drawable.LayerDrawable: void setDither(boolean)>  ->_SINK_
<android.graphics.drawable.BitmapDrawable: void setDither(boolean)>  ->_SINK_
<android.graphics.drawable.NinePatchDrawable: void setDither(boolean)>  ->_SINK_
<android.graphics.drawable.ShapeDrawable: void setDither(boolean)>  ->_SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setDither(boolean)>  ->_SINK_
<android.graphics.drawable.BitmapDrawable: void setFilterBitmap(boolean)>  ->_SINK_
<android.graphics.drawable.NinePatchDrawable: void setFilterBitmap(boolean)>  ->_SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setFilterBitmap(boolean)>  ->_SINK_
<android.widget.ScrollBarDrawable: void setAlpha(int)>  ->_SINK_
<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.ScaleDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.InsetDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.RotateDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.NinePatchDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.ClipDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.ShapeDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.widget.ScrollBarDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.ScaleDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.InsetDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.RotateDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.AnimatedRotateDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.ClipDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.AnimationDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.DrawableContainer: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.Bitmap: void setHasAlpha(boolean)>  ->_SINK_
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>  ->_SINK_
<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IccFileHandler: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.CatService: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL$RILSender: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.AdnRecordCache: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.AdnRecordLoader: void handleMessage(android.os.Message)>  ->_SINK_
<android.os.Handler: boolean sendMessage(android.os.Message)>  ->_SINK_
<android.os.Handler: boolean sendEmptyMessage(int)>  ->_SINK_
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>  ->_SINK_
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>  ->_SINK_
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>  ->_SINK_
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>  ->_SINK_
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>  ->_SINK_
<android.os.Handler: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.app.UiModeManager: void enableCarMode(int)>  ->_SINK_
<android.app.UiModeManager: void setNightMode(int)>  ->_SINK_
<android.app.StatusBarManager: void setIcon(java.lang.String,int,int,java.lang.String)>  ->_SINK_
<android.app.StatusBarManager: void setIconVisibility(java.lang.String,boolean)>  ->_SINK_
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>  ->_SINK_
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)>  ->_SINK_
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)>  ->_SINK_
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>  ->_SINK_
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)>  ->_SINK_
<android.app.DownloadManager: void setAccessAllDownloads(boolean)>  ->_SINK_
<android.app.DownloadManager: android.os.ParcelFileDescriptor openDownloadedFile(long)>  ->_SINK_
<android.app.DownloadManager: void restartDownload(long[])>  ->_SINK_
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>  ->_SINK_
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)>  ->_SINK_
<android.hardware.usb.UsbManager: void setMassStorageBackingFile(java.lang.String)>  ->_SINK_
<android.app.NotificationManager: void notify(int,android.app.Notification)>  ->_SINK_
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>  ->_SINK_
<android.view.textservice.TextServicesManager: void setCurrentSpellChecker(android.view.textservice.SpellCheckerInfo)>  ->_SINK_
<android.view.textservice.TextServicesManager: void setSpellCheckerSubtype(android.view.textservice.SpellCheckerSubtype)>  ->_SINK_
<android.view.textservice.TextServicesManager: void setSpellCheckerEnabled(boolean)>  ->_SINK_
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>  ->_SINK_
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)>  ->_SINK_
<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)>  ->_SINK_
<android.content.ClipboardManager: void setText(java.lang.CharSequence)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void setImeWindowStatus(android.os.IBinder,int,int)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void onWindowFocus(android.view.View,android.view.View,int,boolean,int)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)>  ->_SINK_
<android.media.AudioManager: void setRingerMode(int)>  ->_SINK_
<android.media.AudioManager: void setStreamVolume(int,int,int)>  ->_SINK_
<android.media.AudioManager: void setStreamSolo(int,boolean)>  ->_SINK_
<android.media.AudioManager: void setStreamMute(int,boolean)>  ->_SINK_
<android.media.AudioManager: void setVibrateSetting(int,int)>  ->_SINK_
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>  ->_SINK_
<android.media.AudioManager: void setBluetoothScoOn(boolean)>  ->_SINK_
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>  ->_SINK_
<android.media.AudioManager: void setWiredHeadsetOn(boolean)>  ->_SINK_
<android.media.AudioManager: void setMicrophoneMute(boolean)>  ->_SINK_
<android.media.AudioManager: void setMode(int)>  ->_SINK_
<android.media.AudioManager: void setRouting(int,int,int)>  ->_SINK_
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<android.media.AudioManager: void setParameters(java.lang.String)>  ->_SINK_
<android.app.ActivityManager: void setFrontActivityScreenCompatMode(int)>  ->_SINK_
<android.app.ActivityManager: void setPackageScreenCompatMode(java.lang.String,int)>  ->_SINK_
<android.app.ActivityManager: void setPackageAskScreenCompat(java.lang.String,boolean)>  ->_SINK_
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>  ->_SINK_
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)>  ->_SINK_
<android.app.SearchManager: void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean,android.graphics.Rect)>  ->_SINK_
<android.app.SearchManager: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)>  ->_SINK_
<android.app.SearchManager: void triggerSearch(java.lang.String,android.content.ComponentName,android.os.Bundle)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)>  ->_SINK_
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean)>  ->_SINK_
<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)>  ->_SINK_
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>  ->_SINK_
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>  ->_SINK_
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>  ->_SINK_
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.location.LocationManager: boolean sendNiResponse(int,int)>  ->_SINK_
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>  ->_SINK_
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>  ->_SINK_
<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)>  ->_SINK_
<android.app.AlarmManager: void setTime(long)>  ->_SINK_
<android.app.AlarmManager: void setTimeZone(java.lang.String)>  ->_SINK_
<android.net.ConnectivityManager: void setNetworkPreference(int)>  ->_SINK_
<android.net.ConnectivityManager: boolean setRadios(boolean)>  ->_SINK_
<android.net.ConnectivityManager: boolean setRadio(int,boolean)>  ->_SINK_
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>  ->_SINK_
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>  ->_SINK_
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)>  ->_SINK_
<android.net.ConnectivityManager: int setUsbTethering(boolean)>  ->_SINK_
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)>  ->_SINK_
<android.net.ConnectivityManager: void setDataDependency(int,boolean)>  ->_SINK_
<android.os.PowerManager: void setBacklightBrightness(int)>  ->_SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)>  ->_SINK_
<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)>  ->_SINK_
<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)>  ->_SINK_
<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.BroadcastReceiver$PendingResult: void setExtrasClassLoader(java.lang.ClassLoader)>  ->_SINK_
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.ContentProviderProxy: int bulkInsert(android.net.Uri,android.content.ContentValues[])>  ->_SINK_
<android.content.ContentProviderProxy: int delete(android.net.Uri,java.lang.String,java.lang.String[])>  ->_SINK_
<android.content.ContentProviderProxy: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  ->_SINK_
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>  ->_SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>  ->_SINK_
<android.content.ContentProviderProxy: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>  ->_SINK_
<android.content.ContentProviderProxy: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromData(byte[],java.lang.String)>  ->_SINK_
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.ContentProviderOperation: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>  ->_SINK_
<android.content.res.XmlBlock$Parser: void setFeature(java.lang.String,boolean)>  ->_SINK_
<android.content.res.XmlBlock$Parser: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<org.kxml2.io.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<android.content.res.XmlBlock$Parser: void setInput(java.io.Reader)>  ->_SINK_
<android.content.res.XmlBlock$Parser: void setInput(java.io.InputStream,java.lang.String)>  ->_SINK_
<org.kxml2.io.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>  ->_SINK_
<org.kxml2.io.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>  ->_SINK_
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.Instrumentation: void setInTouchMode(boolean)>  ->_SINK_
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>  ->_SINK_
<android.app.Instrumentation: void sendStringSync(java.lang.String)>  ->_SINK_
<android.app.Instrumentation: void sendKeyDownUpSync(int)>  ->_SINK_
<android.app.Instrumentation: void sendCharacterSync(int)>  ->_SINK_
<android.app.Instrumentation: void callActivityOnCreate(android.app.Activity,android.os.Bundle)>  ->_SINK_
<android.app.Instrumentation: void callActivityOnRestoreInstanceState(android.app.Activity,android.os.Bundle)>  ->_SINK_
<android.app.Instrumentation: void callActivityOnSaveInstanceState(android.app.Activity,android.os.Bundle)>  ->_SINK_
<android.view.Window: void setFlags(int,int)>  ->_SINK_
<android.view.Window: void setBackgroundDrawableResource(int)>  ->_SINK_
<android.view.Window: void setUiOptions(int)>  ->_SINK_
<android.view.Window: void setUiOptions(int,int)>  ->_SINK_
<android.widget.AbsListView: void setVerticalScrollbarPosition(int)>  ->_SINK_
<android.widget.AbsListView: void sendAccessibilityEvent(int)>  ->_SINK_
<android.widget.PopupWindow$PopupViewContainer: void sendAccessibilityEvent(int)>  ->_SINK_
<android.widget.TabHost: void sendAccessibilityEvent(int)>  ->_SINK_
<android.widget.TextView: void sendAccessibilityEvent(int)>  ->_SINK_
<android.view.View: void sendAccessibilityEventInternal(int)>  ->_SINK_
<android.widget.TabWidget: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.view.View: void setScrollContainer(boolean)>  ->_SINK_
<android.view.View: void setDrawingCacheQuality(int)>  ->_SINK_
<android.view.View: void setKeepScreenOn(boolean)>  ->_SINK_
<android.view.View: void setFitsSystemWindows(boolean)>  ->_SINK_
<com.android.internal.widget.AbsActionBarView: void setVisibility(int)>  ->_SINK_
<android.widget.ProgressBar: void setVisibility(int)>  ->_SINK_
<android.view.SurfaceView: void setVisibility(int)>  ->_SINK_
<android.view.ViewStub: void setVisibility(int)>  ->_SINK_
<android.widget.Spinner: void setEnabled(boolean)>  ->_SINK_
<android.widget.CalendarView: void setEnabled(boolean)>  ->_SINK_
<android.widget.MediaController: void setEnabled(boolean)>  ->_SINK_
<android.widget.NumberPicker: void setEnabled(boolean)>  ->_SINK_
<android.widget.TabWidget: void setEnabled(boolean)>  ->_SINK_
<android.widget.ZoomButton: void setEnabled(boolean)>  ->_SINK_
<android.widget.PopupWindow$PopupViewContainer: boolean dispatchKeyEvent(android.view.KeyEvent)>  ->_SINK_
<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)>  ->_SINK_
<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)>  ->_SINK_
<android.widget.ExpandableListView: void dispatchDraw(android.graphics.Canvas)>  ->_SINK_
<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)>  ->_SINK_
<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>  ->_SINK_
<android.webkit.WebView: void setScrollBarStyle(int)>  ->_SINK_
<android.widget.HorizontalScrollView: void draw(android.graphics.Canvas)>  ->_SINK_
<android.widget.ScrollView: void draw(android.graphics.Canvas)>  ->_SINK_
<android.support.v4.view.ViewPager: void draw(android.graphics.Canvas)>  ->_SINK_
<android.view.View: void draw(android.graphics.Canvas)>  ->_SINK_
<android.widget.AbsListView: boolean setFrame(int,int,int,int)>  ->_SINK_
<android.webkit.WebView: boolean setFrame(int,int,int,int)>  ->_SINK_
<android.widget.TextView: boolean setFrame(int,int,int,int)>  ->_SINK_
<android.widget.ImageView: boolean setFrame(int,int,int,int)>  ->_SINK_
<android.view.SurfaceView: boolean setFrame(int,int,int,int)>  ->_SINK_
<android.webkit.WebView: void setBackgroundColor(int)>  ->_SINK_
<android.view.View: void setBackgroundResource(int)>  ->_SINK_
<android.widget.TextView: void setSelected(boolean)>  ->_SINK_
<android.widget.ImageView: void setSelected(boolean)>  ->_SINK_
<android.view.View: void setSelected(boolean)>  ->_SINK_
<android.view.View: void setTagInternal(int,java.lang.Object)>  ->_SINK_
<android.view.View: boolean performHapticFeedback(int)>  ->_SINK_
<android.view.View: boolean performHapticFeedback(int,int)>  ->_SINK_
<android.widget.AbsListView: void setOverScrollMode(int)>  ->_SINK_
<android.widget.HorizontalScrollView: void setOverScrollMode(int)>  ->_SINK_
<android.widget.ScrollView: void setOverScrollMode(int)>  ->_SINK_
<android.webkit.WebView: void setOverScrollMode(int)>  ->_SINK_
<android.view.View: void setTextDirection(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setCustomView(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayUseLogoEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowHomeEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayHomeAsUpEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowTitleEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowCustomEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setHomeButtonEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setTitle(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setSubtitle(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayOptions(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayOptions(int,int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setBackgroundDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setCustomView(android.view.View)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setNavigationMode(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setIcon(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setIcon(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setLogo(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setLogo(android.graphics.drawable.Drawable)>  ->_SINK_
<android.app.FragmentManagerImpl: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>  ->_SINK_
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.FragmentManagerImpl: void setBackStackIndex(int,android.app.BackStackRecord)>  ->_SINK_
<android.app.FragmentManagerImpl: android.os.Bundle saveFragmentBasicState(android.app.Fragment)>  ->_SINK_
<android.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)>  ->_SINK_
<android.app.FragmentManagerImpl: void dispatchTrimMemory(int)>  ->_SINK_
<android.app.FragmentManagerImpl: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>  ->_SINK_
<android.app.FragmentManagerImpl: boolean dispatchPrepareOptionsMenu(android.view.Menu)>  ->_SINK_
<android.app.FragmentManagerImpl: boolean dispatchOptionsItemSelected(android.view.MenuItem)>  ->_SINK_
<android.app.FragmentManagerImpl: boolean dispatchContextItemSelected(android.view.MenuItem)>  ->_SINK_
<android.app.FragmentManagerImpl: void dispatchOptionsMenuClosed(android.view.Menu)>  ->_SINK_
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence)>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence,int,int)>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(char)>  ->_SINK_
<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>  ->_SINK_
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.Dialog: void setTitle(int)>  ->_SINK_
<android.app.Dialog: void setFeatureDrawableResource(int,int)>  ->_SINK_
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>  ->_SINK_
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>  ->_SINK_
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>  ->_SINK_
<android.app.Dialog: void setVolumeControlStream(int)>  ->_SINK_
<android.view.HardwareCanvas: void setBitmap(android.graphics.Bitmap)>  ->_SINK_
<android.graphics.Canvas: void setViewport(int,int)>  ->_SINK_
<android.view.GLES20Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>  ->_SINK_
<android.view.GLES20Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>  ->_SINK_
<android.view.GLES20Canvas: void restoreToCount(int)>  ->_SINK_
<android.view.GLES20Canvas: void setMatrix(android.graphics.Matrix)>  ->_SINK_
<android.view.Surface$CompatibleCanvas: void setMatrix(android.graphics.Matrix)>  ->_SINK_
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>  ->_SINK_
<android.app.FragmentManagerImpl: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>  ->_SINK_
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.Fragment: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>  ->_SINK_
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setCustomView(android.view.View)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setCustomView(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setIcon(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setIcon(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setLogo(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setLogo(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setTitle(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setSubtitle(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayOptions(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayOptions(int,int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayUseLogoEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowHomeEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayHomeAsUpEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowTitleEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setDisplayShowCustomEnabled(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setBackgroundDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setNavigationMode(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl: void setHomeButtonEnabled(boolean)>  ->_SINK_
<android.app.ActionBar: void setHomeButtonEnabled(boolean)>  ->_SINK_
<android.widget.RadioGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>  ->_SINK_
<android.widget.TableLayout$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>  ->_SINK_
<android.widget.TableRow$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>  ->_SINK_
<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>  ->_SINK_
<android.view.KeyEvent: void setTainted(boolean)>  ->_SINK_
<android.view.MotionEvent: void setSource(int)>  ->_SINK_
<android.view.MotionEvent: void setTainted(boolean)>  ->_SINK_
<android.view.MotionEvent: void setDownTime(long)>  ->_SINK_
<android.view.MotionEvent: void setEdgeFlags(int)>  ->_SINK_
<android.view.MotionEvent: void setAction(int)>  ->_SINK_
<android.view.MotionEvent: void setLocation(float,float)>  ->_SINK_
<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.accessibility.AccessibilityEvent: void setSealed(boolean)>  ->_SINK_
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupCheckable(int,boolean,boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupVisible(int,boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupEnabled(int,boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: void setQwertyMode(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setTitle(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setTitle(int)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setAlphabeticShortcut(char)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setCheckable(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setCheckable(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setChecked(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setChecked(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setVisible(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setVisible(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setEnabled(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setEnabled(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: void setShowAsAction(int)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setShowAsActionFlags(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setShowAsActionFlags(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionView(android.view.View)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setActionView(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionView(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)>  ->_SINK_
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>  ->_SINK_
<android.app.PendingIntent: void send(int)>  ->_SINK_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>  ->_SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setTitle(int)>  ->_SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setTitle(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setSubtitle(int)>  ->_SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setSubtitle(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setCustomView(android.view.View)>  ->_SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setCustomView(android.view.View)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void setHttpProxy(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void setSchedulingGroup(int)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dispatchPackageBroadcast(int,java.lang.String[])>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)>  ->_SINK_
<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)>  ->_SINK_
<android.widget.AbsListView: void setOverScrollMode(int)>  ->_SINK_
<android.widget.AbsListView: void setItemChecked(int,boolean)>  ->_SINK_
<android.widget.ExpandableListView: boolean performItemClick(android.view.View,int,long)>  ->_SINK_
<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)>  ->_SINK_
<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)>  ->_SINK_
<android.widget.AbsListView: void setVerticalScrollbarPosition(int)>  ->_SINK_
<android.widget.AbsListView: void sendAccessibilityEvent(int)>  ->_SINK_
<android.widget.AbsListView: void setFilterText(java.lang.String)>  ->_SINK_
<android.widget.AbsListView: boolean setFrame(int,int,int,int)>  ->_SINK_
<android.widget.ExpandableListView: void dispatchDraw(android.graphics.Canvas)>  ->_SINK_
<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)>  ->_SINK_
<android.widget.AbsListView: void setSelector(int)>  ->_SINK_
<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)>  ->_SINK_
<android.widget.AbsListView: void setFriction(float)>  ->_SINK_
<android.widget.ListView: void setSelectionInt(int)>  ->_SINK_
<android.widget.GridView: void setSelectionInt(int)>  ->_SINK_
<android.widget.ListView: void setCacheColorHint(int)>  ->_SINK_
<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)>  ->_SINK_
<android.widget.GridView: void setRemoteViewsAdapter(android.content.Intent)>  ->_SINK_
<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)>  ->_SINK_
<android.content.IIntentSender$Stub$Proxy: int send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupCheckable(int,boolean,boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupVisible(int,boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: void setGroupEnabled(int,boolean)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: void setQwertyMode(boolean)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: void setShortcutsVisible(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: void setShortcutsVisible(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderTitleInt(int)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderIconInt(int)>  ->_SINK_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderViewInt(android.view.View)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderTitle(int)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderIcon(int)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderView(android.view.View)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setIcon(int)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)>  ->_SINK_
<android.view.ViewGroup: void setDescendantFocusability(int)>  ->_SINK_
<android.widget.PopupWindow$PopupViewContainer: boolean dispatchKeyEvent(android.view.KeyEvent)>  ->_SINK_
<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)>  ->_SINK_
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>  ->_SINK_
<android.widget.ExpandableListView: void dispatchDraw(android.graphics.Canvas)>  ->_SINK_
<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)>  ->_SINK_
<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>  ->_SINK_
<android.view.ViewGroup: void setClipChildren(boolean)>  ->_SINK_
<android.view.ViewGroup: void setClipToPadding(boolean)>  ->_SINK_
<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)>  ->_SINK_
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>  ->_SINK_
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>  ->_SINK_
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>  ->_SINK_
<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>  ->_SINK_
<android.view.ViewGroup: void setPersistentDrawingCache(int)>  ->_SINK_
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>  ->_SINK_
<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>  ->_SINK_
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>  ->_SINK_
<android.os.Message: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.LoadedApk: android.content.IIntentReceiver forgetReceiverDispatcher(android.content.Context,android.content.BroadcastReceiver)>  ->_SINK_
<android.app.LoadedApk: android.app.IServiceConnection forgetServiceDispatcher(android.content.Context,android.content.ServiceConnection)>  ->_SINK_
<android.app.WallpaperManager: void setResource(int)>  ->_SINK_
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>  ->_SINK_
<android.app.WallpaperManager: void setStream(java.io.InputStream)>  ->_SINK_
<android.app.WallpaperManager: void setWallpaperOffsets(android.os.IBinder,float,float)>  ->_SINK_
<android.app.WallpaperManager: void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>  ->_SINK_
<com.android.internal.os.IDropBoxManagerService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void schedulePauseActivity(android.os.IBinder,boolean,boolean,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleStopActivity(android.os.IBinder,boolean,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleWindowVisibility(android.os.IBinder,boolean)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleSleeping(android.os.IBinder,boolean)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleResumeActivity(android.os.IBinder,boolean)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleSendResult(android.os.IBinder,java.util.List)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleNewIntent(java.util.List,android.os.IBinder)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleDestroyActivity(android.os.IBinder,boolean,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleServiceArgs(android.os.IBinder,boolean,int,int,android.content.Intent)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleStopService(android.os.IBinder)>  ->_SINK_
<android.app.ApplicationThreadProxy: void requestThumbnail(android.os.IBinder)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void setHttpProxy(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ApplicationThreadProxy: void setHttpProxy(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleActivityConfigurationChanged(android.os.IBinder)>  ->_SINK_
<android.app.ApplicationThreadProxy: void profilerControl(boolean,java.lang.String,android.os.ParcelFileDescriptor,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpHeap(boolean,java.lang.String,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void setSchedulingGroup(int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void setSchedulingGroup(int)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dispatchPackageBroadcast(int,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void dispatchPackageBroadcast(int,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleCrash(java.lang.String)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)>  ->_SINK_
<android.app.ApplicationThreadProxy: void setCoreSettings(android.os.Bundle)>  ->_SINK_
<android.app.ApplicationThreadProxy: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleTrimMemory(int)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.os.FileUtils: boolean copyToFile(java.io.InputStream,java.io.File)>  ->_SINK_
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>  ->_SINK_
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: boolean isTagEnabled(java.lang.String)>  ->_SINK_
<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.util.FastXmlSerializer: void setFeature(java.lang.String,boolean)>  ->_SINK_
<com.android.internal.util.FastXmlSerializer: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<com.android.internal.util.FastXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>  ->_SINK_
<com.android.internal.util.FastXmlSerializer: void setPrefix(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.PrintWriterPrinter: void println(java.lang.String)>  ->_SINK_
<android.util.PrefixPrinter: void println(java.lang.String)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,java.util.List)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void stopListening(int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteAppWidgetId(int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteHost(int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(int[],android.widget.RemoteViews)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(int[],android.widget.RemoteViews)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void notifyAppWidgetViewDataChanged(int[],int)>  ->_SINK_
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>  ->_SINK_
<android.widget.RemoteViews: void setDisplayedChild(int,int)>  ->_SINK_
<android.widget.RemoteViews: void setViewVisibility(int,int)>  ->_SINK_
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>  ->_SINK_
<android.widget.RemoteViews: void setImageViewResource(int,int)>  ->_SINK_
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>  ->_SINK_
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>  ->_SINK_
<android.widget.RemoteViews: void setEmptyView(int,int)>  ->_SINK_
<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)>  ->_SINK_
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>  ->_SINK_
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>  ->_SINK_
<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)>  ->_SINK_
<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>  ->_SINK_
<android.widget.RemoteViews: void setTextColor(int,int)>  ->_SINK_
<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>  ->_SINK_
<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>  ->_SINK_
<android.widget.RemoteViews: void setScrollPosition(int,int)>  ->_SINK_
<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)>  ->_SINK_
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>  ->_SINK_
<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)>  ->_SINK_
<android.widget.RemoteViews: void setShort(int,java.lang.String,short)>  ->_SINK_
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>  ->_SINK_
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>  ->_SINK_
<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)>  ->_SINK_
<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)>  ->_SINK_
<android.widget.RemoteViews: void setChar(int,java.lang.String,char)>  ->_SINK_
<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)>  ->_SINK_
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)>  ->_SINK_
<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)>  ->_SINK_
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>  ->_SINK_
<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)>  ->_SINK_
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)>  ->_SINK_
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.appwidget.AppWidgetProviderInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.util.TypedValue: float complexToDimensionNoisy(int,android.util.DisplayMetrics)>  ->_SINK_
<android.util.TypedValue: void setTo(android.util.TypedValue)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.util.Collections$CheckedList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.Collections$CheckedListIterator: void set(java.lang.Object)>  ->_SINK_
<java.util.Collections$SynchronizedList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.util.Collections$UnmodifiableList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>  ->_SINK_
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer put(double)>  ->_SINK_
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer put(double[],int,int)>  ->_SINK_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)>  ->_SINK_
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer put(int,double)>  ->_SINK_
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer put(float)>  ->_SINK_
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer put(float[],int,int)>  ->_SINK_
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)>  ->_SINK_
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer put(int,float)>  ->_SINK_
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer put(int)>  ->_SINK_
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer put(int[],int,int)>  ->_SINK_
<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)>  ->_SINK_
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer put(int,int)>  ->_SINK_
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer put(long)>  ->_SINK_
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer put(long[],int,int)>  ->_SINK_
<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)>  ->_SINK_
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer put(int,long)>  ->_SINK_
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(short)>  ->_SINK_
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(short[],int,int)>  ->_SINK_
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)>  ->_SINK_
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(int,short)>  ->_SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putDouble(double)>  ->_SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putDouble(int,double)>  ->_SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putFloat(float)>  ->_SINK_
<java.nio.ReadWriteHeapByteBuffer: java.nio.ByteBuffer putFloat(int,float)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setInstanceFollowRedirects(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setAllowUserInteraction(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setDefaultUseCaches(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setDoInput(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setDoOutput(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setIfModifiedSince(long)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setUseCaches(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setConnectTimeout(int)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setReadTimeout(int)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setFixedLengthStreamingMode(int)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setChunkedStreamingMode(int)>  ->_SINK_
<libcore.net.url.JarURLConnectionImpl: void setUseCaches(boolean)>  ->_SINK_
<libcore.net.url.JarURLConnectionImpl: void setDefaultUseCaches(boolean)>  ->_SINK_
<libcore.net.http.HttpURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)>  ->_SINK_
<java.util.Collections$SetFromMap: boolean add(java.lang.Object)>  ->_SINK_
<java.text.DecimalFormatSymbols: void setInternationalCurrencySymbol(java.lang.String)>  ->_SINK_
<java.math.BigInt: void setSign(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setKeepAlive(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setKeepAlive(boolean)>  ->_SINK_
<java.net.Socket: void setKeepAlive(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSendBufferSize(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSendBufferSize(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setReceiveBufferSize(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setReceiveBufferSize(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoLinger(boolean,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoLinger(boolean,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoTimeout(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoTimeout(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTcpNoDelay(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTcpNoDelay(boolean)>  ->_SINK_
<java.nio.SocketChannelImpl$SocketAdapter: void bind(java.net.SocketAddress)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setReuseAddress(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setReuseAddress(boolean)>  ->_SINK_
<java.net.Socket: void setReuseAddress(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setOOBInline(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setOOBInline(boolean)>  ->_SINK_
<java.net.Socket: void setOOBInline(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTrafficClass(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTrafficClass(int)>  ->_SINK_
<java.net.Socket: void setTrafficClass(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void sendUrgentData(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void sendUrgentData(int)>  ->_SINK_
<java.net.Socket: void sendUrgentData(int)>  ->_SINK_
<java.net.Socket: void setPerformancePreferences(int,int,int)>  ->_SINK_
<java.io.RandomAccessFile: void setLength(long)>  ->_SINK_
<java.io.RandomAccessFile: void write(byte[])>  ->_SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)>  ->_SINK_
<java.io.RandomAccessFile: void writeChar(int)>  ->_SINK_
<java.io.RandomAccessFile: void writeChars(java.lang.String)>  ->_SINK_
<java.io.RandomAccessFile: void writeDouble(double)>  ->_SINK_
<java.io.RandomAccessFile: void writeFloat(float)>  ->_SINK_
<java.io.RandomAccessFile: void writeUTF(java.lang.String)>  ->_SINK_
<java.text.DateFormatSymbols: void setAmPmStrings(java.lang.String[])>  ->_SINK_
<java.text.DateFormatSymbols: void setEras(java.lang.String[])>  ->_SINK_
<java.text.DateFormatSymbols: void setMonths(java.lang.String[])>  ->_SINK_
<java.text.DateFormatSymbols: void setShortMonths(java.lang.String[])>  ->_SINK_
<java.text.DateFormatSymbols: void setShortWeekdays(java.lang.String[])>  ->_SINK_
<java.text.DateFormatSymbols: void setWeekdays(java.lang.String[])>  ->_SINK_
<java.text.DateFormatSymbols: void setZoneStrings(java.lang.String[][])>  ->_SINK_
<java.util.GregorianCalendar: void setGregorianChange(java.util.Date)>  ->_SINK_
<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>  ->_SINK_
<java.text.SimpleDateFormat: void setDateFormatSymbols(java.text.DateFormatSymbols)>  ->_SINK_
<java.text.DateFormat: void setLenient(boolean)>  ->_SINK_
<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>  ->_SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>  ->_SINK_
<java.nio.DatagramChannelImpl: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.DatagramChannelImpl: long read(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.PipeImpl$PipeSinkChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.Channels$OutputStreamChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>  ->_SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer,long)>  ->_SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer put(byte)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer put(byte[],int,int)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer put(int,byte)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putChar(char)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putChar(int,char)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putDouble(double)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putDouble(int,double)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putFloat(float)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putFloat(int,float)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putInt(int,int)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putInt(int)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putLong(int,long)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putLong(long)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putShort(int,short)>  ->_SINK_
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer putShort(short)>  ->_SINK_
<java.net.AddressCache: void put(java.lang.String,java.net.InetAddress[])>  ->_SINK_
<java.net.AddressCache: void putUnknownHost(java.lang.String,java.lang.String)>  ->_SINK_
<java.net.ServerSocket: void setSoTimeout(int)>  ->_SINK_
<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void bind(java.net.SocketAddress)>  ->_SINK_
<java.net.ServerSocket: void bind(java.net.SocketAddress)>  ->_SINK_
<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void bind(java.net.SocketAddress,int)>  ->_SINK_
<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>  ->_SINK_
<java.net.ServerSocket: void setReuseAddress(boolean)>  ->_SINK_
<java.net.ServerSocket: void setReceiveBufferSize(int)>  ->_SINK_
<java.net.ServerSocket: void setPerformancePreferences(int,int,int)>  ->_SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void send(java.net.DatagramPacket)>  ->_SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)>  ->_SINK_
<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)>  ->_SINK_
<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)>  ->_SINK_
<java.net.DatagramSocket: void setSendBufferSize(int)>  ->_SINK_
<java.net.DatagramSocket: void setReceiveBufferSize(int)>  ->_SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void bind(java.net.SocketAddress)>  ->_SINK_
<java.net.DatagramSocket: void bind(java.net.SocketAddress)>  ->_SINK_
<java.net.DatagramSocket: void setTrafficClass(int)>  ->_SINK_
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>  ->_SINK_
<java.nio.DatagramChannelImpl: long read(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.DatagramChannelImpl: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.SocketChannelImpl: boolean connect(java.net.SocketAddress)>  ->_SINK_
<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>  ->_SINK_
<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setegid(int)>  ->_SINK_
<libcore.io.ForwardingOs: void seteuid(int)>  ->_SINK_
<libcore.io.ForwardingOs: void setgid(int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>  ->_SINK_
<libcore.io.ForwardingOs: void setuid(int)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  ->_SINK_
<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  ->_SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: void setParameter(java.lang.String,java.lang.Object)>  ->_SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)>  ->_SINK_
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: void setFeature(java.lang.String,boolean)>  ->_SINK_
<java.lang.ProcessManager$ProcessImpl: void setExitValue(int)>  ->_SINK_
<java.security.Security: void setProperty(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void unregisterContentObserver(android.database.IContentObserver)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)>  ->_SINK_
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.SyncStatusInfo: void setPeriodicSyncTime(int,long)>  ->_SINK_
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)>  ->_SINK_
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkPermission(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkUidPermission(java.lang.String,int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void removePermission(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean isProtectedBroadcast(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkSignatures(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkUidSignatures(int,int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void finishPackageInstall(int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setInstallerPackageName(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void addPackageToPreferred(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void removePackageFromPreferred(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void clearPackagePreferredActivities(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(long,android.content.IntentSender)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean hasSystemFeature(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOpt(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean setInstallLocation(int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void verifyPendingInstall(int,int)>  ->_SINK_
<com.android.internal.os.BinderInternal: void forceGc(java.lang.String)>  ->_SINK_
<android.app.IActivityManager$ContentProviderHolder: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.ResultInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.ViewRootImpl: boolean performHapticFeedback(int,boolean)>  ->_SINK_
<android.app.backup.BackupAgentHelper: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.app.backup.BackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.app.backup.BackupAgentHelper: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)>  ->_SINK_
<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.HardwareRenderer: void setupDiskCache(java.io.File)>  ->_SINK_
<android.view.HardwareRenderer$Gl20Renderer: void setup(int,int)>  ->_SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int d(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int i(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int w(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int w(java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int e(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int println(int,java.lang.String,java.lang.String)>  ->_SINK_
<android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.os.StrictMode: void incrementExpectedActivityCount(java.lang.Class)>  ->_SINK_
<android.os.Debug: void startMethodTracing(java.lang.String)>  ->_SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,int)>  ->_SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,int,int)>  ->_SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>  ->_SINK_
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)>  ->_SINK_
<android.os.Debug: void setFieldsOn(java.lang.Class)>  ->_SINK_
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.ApplicationPackageManager: boolean hasSystemFeature(java.lang.String)>  ->_SINK_
<android.app.ApplicationPackageManager: boolean addPermission(android.content.pm.PermissionInfo)>  ->_SINK_
<android.app.ApplicationPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>  ->_SINK_
<android.app.ApplicationPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ApplicationPackageManager: void addPackageToPreferred(java.lang.String)>  ->_SINK_
<android.app.ApplicationPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>  ->_SINK_
<android.app.IInstrumentationWatcher$Stub$Proxy: void instrumentationStatus(android.content.ComponentName,int,android.os.Bundle)>  ->_SINK_
<android.app.IInstrumentationWatcher$Stub$Proxy: void instrumentationFinished(android.content.ComponentName,int,android.os.Bundle)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)>  ->_SINK_
<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)>  ->_SINK_
<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)>  ->_SINK_
<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.IActivityManager$WaitResult: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.IThumbnailReceiver$Stub$Proxy: void newThumbnail(int,android.graphics.Bitmap,java.lang.CharSequence)>  ->_SINK_
<android.app.ActivityManager$TaskThumbnails: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.IServiceConnection$Stub$Proxy: void connected(android.content.ComponentName,android.os.IBinder)>  ->_SINK_
<android.content.pm.IPackageDataObserver$Stub$Proxy: void onRemoveCompleted(java.lang.String,boolean)>  ->_SINK_
<android.app.IActivityController$Stub$Proxy: boolean activityStarting(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.IActivityController$Stub$Proxy: boolean activityResuming(java.lang.String)>  ->_SINK_
<android.app.IActivityController$Stub$Proxy: boolean appCrashed(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)>  ->_SINK_
<android.app.IActivityController$Stub$Proxy: int appEarlyNotResponding(java.lang.String,int,java.lang.String)>  ->_SINK_
<android.app.IActivityController$Stub$Proxy: int appNotResponding(java.lang.String,int,java.lang.String)>  ->_SINK_
<android.app.ApplicationErrorReport$CrashInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.os.StrictMode$ViolationInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.StrictMode$ViolationInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.app.IProcessObserver$Stub$Proxy: void onForegroundActivitiesChanged(int,int,boolean)>  ->_SINK_
<android.app.IProcessObserver$Stub$Proxy: void onProcessDied(int,int)>  ->_SINK_
<android.app.ActivityManager$RecentTaskInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ApplicationErrorReport: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ApplicationErrorReport: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.util.SparseBooleanArray: void append(int,boolean)>  ->_SINK_
<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)>  ->_SINK_
<android.os.IVibratorService$Stub$Proxy: void vibratePattern(long[],int,android.os.IBinder)>  ->_SINK_
<android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.os.IDropBoxManagerService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.os.storage.IMountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.INotificationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.IIntentSender$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.IClipboard$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.app.IUsageStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.ISearchManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.IIntentReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.ContentProviderNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.os.ServiceManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.IThumbnailRetriever$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.IUiModeManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.location.ICountryDetector$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.textservice.ITextServicesManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.os.IResultReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INdefPushCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcTag$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.database.BulkCursorNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.backup.IRestoreSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.backup.IRestoreObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.speech.tts.ITextToSpeechService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.security.IKeyChainService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.speech.IRecognitionService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.PhoneSubInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.IUiModeManager$Stub$Proxy: void enableCarMode(int)>  ->_SINK_
<android.app.IUiModeManager$Stub$Proxy: void disableCarMode(int)>  ->_SINK_
<android.app.IUiModeManager$Stub$Proxy: void setNightMode(int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIconVisibility(java.lang.String,boolean)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void removeIcon(java.lang.String)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationClick(java.lang.String,java.lang.String,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationClear(java.lang.String,java.lang.String,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setHardKeyboardEnabled(boolean)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)>  ->_SINK_
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy: void setState(int)>  ->_SINK_
<android.view.IWindow$Stub$Proxy: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.view.ViewRootImpl$W: void dispatchAppVisibility(boolean)>  ->_SINK_
<android.view.IWindow$Stub$Proxy: void closeSystemDialogs(java.lang.String)>  ->_SINK_
<android.view.IWindow$Stub$Proxy: void dispatchWallpaperOffsets(float,float,float,float,boolean)>  ->_SINK_
<android.view.ViewRootImpl$W: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>  ->_SINK_
<android.view.IWindow$Stub$Proxy: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>  ->_SINK_
<android.view.ViewRootImpl$W: void dispatchSystemUiVisibilityChanged(int,int,int,int)>  ->_SINK_
<android.view.IWindow$Stub$Proxy: void dispatchSystemUiVisibilityChanged(int,int,int,int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)>  ->_SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(android.os.Message)>  ->_SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int)>  ->_SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,int)>  ->_SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>  ->_SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>  ->_SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,java.lang.Object)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(android.os.Message)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int,java.lang.Object)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,java.lang.Object)>  ->_SINK_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)>  ->_SINK_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>  ->_SINK_
<android.os.Messenger: void send(android.os.Message)>  ->_SINK_
<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)>  ->_SINK_
<android.content.res.XmlBlock$Parser: void setFeature(java.lang.String,boolean)>  ->_SINK_
<android.content.res.XmlBlock$Parser: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<android.content.res.XmlBlock$Parser: void setInput(java.io.Reader)>  ->_SINK_
<android.content.res.XmlBlock$Parser: void setInput(java.io.InputStream,java.lang.String)>  ->_SINK_
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>  ->_SINK_
<java.util.AbstractSequentialList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<android.app.DownloadManager$Request: android.content.ContentValues toContentValues(java.lang.String)>  ->_SINK_
<android.location.ICountryDetector$Stub$Proxy: void addCountryListener(android.location.ICountryListener)>  ->_SINK_
<android.location.ICountryDetector$Stub$Proxy: void removeCountryListener(android.location.ICountryListener)>  ->_SINK_
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.io.PrintStream)>  ->_SINK_
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)>  ->_SINK_
<android.os.SystemProperties: void set(java.lang.String,java.lang.String)>  ->_SINK_
<android.database.sqlite.SQLiteDirectCursorDriver: void setBindArguments(java.lang.String[])>  ->_SINK_
<android.database.sqlite.SQLiteDirectCursorDriver: void setBindArguments(java.lang.String[])>  ->_SINK_
<android.database.sqlite.SQLiteProgram: void bindNull(int)>  ->_SINK_
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>  ->_SINK_
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>  ->_SINK_
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>  ->_SINK_
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>  ->_SINK_
<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])>  ->_SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>  ->_SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>  ->_SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>  ->_SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>  ->_SINK_
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])>  ->_SINK_
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>  ->_SINK_
<android.view.ViewRootImpl$W: void dispatchAppVisibility(boolean)>  ->_SINK_
<android.view.ViewRootImpl$W: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>  ->_SINK_
<android.view.ViewRootImpl$W: void dispatchSystemUiVisibilityChanged(int,int,int,int)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int destroySecureContainer(java.lang.String,boolean)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int finalizeSecureContainer(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int formatVolume(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: boolean isObbMounted(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: boolean isSecureContainerMounted(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int mountSecureContainer(java.lang.String,java.lang.String,int)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int mountVolume(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void registerListener(android.os.storage.IMountServiceListener)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int renameSecureContainer(java.lang.String,java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void setUsbMassStorageEnabled(boolean)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void shutdown(android.os.storage.IMountShutdownObserver)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int unmountSecureContainer(java.lang.String,boolean)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void unmountVolume(java.lang.String,boolean,boolean)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void unregisterListener(android.os.storage.IMountServiceListener)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int decryptStorage(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int encryptStorage(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int changeEncryptionPassword(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int verifyEncryptionPassword(java.lang.String)>  ->_SINK_
<android.os.storage.StorageManager$MountServiceBinderListener: void onUsbMassStorageConnectionChanged(boolean)>  ->_SINK_
<android.os.storage.StorageManager$MountServiceBinderListener: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<java.util.concurrent.atomic.AtomicInteger: void lazySet(int)>  ->_SINK_
<android.os.storage.StorageManager$ObbActionListener: int addListener(android.os.storage.OnObbStateChangeListener)>  ->_SINK_
<android.os.storage.StorageVolume: void setStorageId(int)>  ->_SINK_
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.storage.StorageManager$ObbListenerDelegate: void sendObbStateChanged(java.lang.String,int)>  ->_SINK_
<android.os.storage.IObbActionListener$Stub$Proxy: void onObbResult(java.lang.String,int,int)>  ->_SINK_
<android.os.storage.StorageManager$ListenerDelegate: void sendShareAvailabilityChanged(boolean)>  ->_SINK_
<android.os.storage.StorageManager$ListenerDelegate: void sendStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.os.storage.StorageManager$MountServiceBinderListener: void onUsbMassStorageConnectionChanged(boolean)>  ->_SINK_
<android.os.storage.StorageManager$MountServiceBinderListener: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.os.storage.IMountServiceListener$Stub$Proxy: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.os.Handler$MessengerImpl: void send(android.os.Message)>  ->_SINK_
<android.os.IMessenger$Stub$Proxy: void send(android.os.Message)>  ->_SINK_
<android.os.Handler$MessengerImpl: void send(android.os.Message)>  ->_SINK_
<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)>  ->_SINK_
<android.util.LongSparseArray: void append(long,java.lang.Object)>  ->_SINK_
<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openDevice(java.lang.String)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setCurrentFunction(java.lang.String,boolean)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setMassStorageBackingFile(java.lang.String)>  ->_SINK_
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>  ->_SINK_
<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int)>  ->_SINK_
<android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.app.ITransientNotification,int)>  ->_SINK_
<android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.app.ITransientNotification)>  ->_SINK_
<android.app.INotificationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(com.android.internal.textservice.ISpellCheckerSessionListener)>  ->_SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellChecker(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellCheckerSubtype(java.lang.String,int)>  ->_SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setSpellCheckerEnabled(boolean)>  ->_SINK_
<android.view.textservice.SpellCheckerInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: void onServiceConnected(com.android.internal.textservice.ISpellCheckerSession)>  ->_SINK_
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>  ->_SINK_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>  ->_SINK_
<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.IPackageInstallObserver$Stub$Proxy: void packageInstalled(java.lang.String,int)>  ->_SINK_
<android.content.pm.IPackageDeleteObserver$Stub$Proxy: void packageDeleted(java.lang.String,int)>  ->_SINK_
<android.content.pm.IPackageMoveObserver$Stub$Proxy: void packageMoved(java.lang.String,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.IIntentSender$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)>  ->_SINK_
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.text.format.Time: void set(android.text.format.Time)>  ->_SINK_
<android.text.format.Time: long setJulianDay(int)>  ->_SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)>  ->_SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: boolean startViewServer(int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void pauseKeyDispatching(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void resumeKeyDispatching(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setEventDispatching(boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppGroupId(android.os.IBinder,int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppOrientation(android.view.IApplicationToken,int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setFocusedApp(android.os.IBinder,boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int,boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,android.os.IBinder,boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppWillBeHidden(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppVisibility(android.os.IBinder,boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void startAppFreezingScreen(android.os.IBinder,int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void stopAppFreezingScreen(android.os.IBinder,boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void removeAppToken(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void moveAppToken(int,android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void closeSystemDialogs(java.lang.String)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAnimationScale(int,float)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAnimationScales(float[])>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setInTouchMode(boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setStrictModeVisualIndicatorPreference(java.lang.String)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: int watchRotation(android.view.IRotationWatcher)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void freezeRotation(int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void statusBarVisibilityChanged(int)>  ->_SINK_
<android.graphics.Region: boolean set(android.graphics.Region)>  ->_SINK_
<android.graphics.Region: boolean set(android.graphics.Rect)>  ->_SINK_
<android.graphics.Region: boolean set(int,int,int,int)>  ->_SINK_
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>  ->_SINK_
<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.LayerDrawable: void setDither(boolean)>  ->_SINK_
<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.ScaleDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.ScaleDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.AnimationDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.AnimationDrawable: void setOneShot(boolean)>  ->_SINK_
<android.graphics.drawable.InsetDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.InsetDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.RotateDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.RotateDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setCornerRadii(float[])>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setCornerRadius(float)>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setStroke(int,int)>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setStroke(int,int,float,float)>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setSize(int,int)>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setShape(int)>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setGradientType(int)>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setGradientCenter(float,float)>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setGradientRadius(float)>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setUseLevel(boolean)>  ->_SINK_
<android.graphics.drawable.GradientDrawable: void setColor(int)>  ->_SINK_
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.graphics.Canvas)>  ->_SINK_
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.util.DisplayMetrics)>  ->_SINK_
<android.graphics.drawable.BitmapDrawable: void setAntiAlias(boolean)>  ->_SINK_
<android.graphics.drawable.BitmapDrawable: void setFilterBitmap(boolean)>  ->_SINK_
<android.graphics.drawable.BitmapDrawable: void setDither(boolean)>  ->_SINK_
<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.graphics.Canvas)>  ->_SINK_
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(android.util.DisplayMetrics)>  ->_SINK_
<android.graphics.drawable.NinePatchDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.NinePatchDrawable: void setDither(boolean)>  ->_SINK_
<android.graphics.drawable.NinePatchDrawable: void setFilterBitmap(boolean)>  ->_SINK_
<android.graphics.drawable.AnimatedRotateDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.AnimatedRotateDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.ClipDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.ClipDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.content.ClipboardManager: void setText(java.lang.CharSequence)>  ->_SINK_
<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData)>  ->_SINK_
<android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)>  ->_SINK_
<android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)>  ->_SINK_
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.IClipboard$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void removeClient(com.android.internal.view.IInputMethodClient)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void finishInput(com.android.internal.view.IInputMethodClient)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setInputMethod(android.os.IBinder,java.lang.String)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void hideMySoftInput(android.os.IBinder,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showMySoftInput(android.os.IBinder,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void updateStatusIcon(android.os.IBinder,java.lang.String,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean switchToLastInputMethod(android.os.IBinder)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setInputMethodEnabled(java.lang.String,boolean)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void deleteSurroundingText(int,int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setComposingText(java.lang.CharSequence,int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void commitText(java.lang.CharSequence,int)>  ->_SINK_
<com.android.internal.view.IInputConnectionWrapper: void setSelection(int,int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setSelection(int,int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performEditorAction(int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performContextMenuAction(int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void clearMetaKeyStates(int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performPrivateCommand(java.lang.String,android.os.Bundle)>  ->_SINK_
<com.android.internal.view.IInputConnectionWrapper: void setComposingRegion(int,int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setComposingRegion(int,int)>  ->_SINK_
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingRegion(int,int)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean setComposingRegion(int,int)>  ->_SINK_
<android.view.inputmethod.BaseInputConnection: boolean setSelection(int,int)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setSelection(int,int)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean setSelection(int,int)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performEditorAction(int)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean performEditorAction(int)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performContextMenuAction(int)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean performContextMenuAction(int)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>  ->_SINK_
<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateSelection(int,int,int,int,int,int)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void displayCompletions(android.view.inputmethod.CompletionInfo[])>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void dispatchKeyEvent(int,android.view.KeyEvent,com.android.internal.view.IInputMethodCallback)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void dispatchTrackballEvent(int,android.view.MotionEvent,com.android.internal.view.IInputMethodCallback)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void appPrivateCommand(java.lang.String,android.os.Bundle)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void toggleSoftInput(int,int)>  ->_SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void setUsingInputMethod(boolean)>  ->_SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void onUnbindMethod(int)>  ->_SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void setActive(boolean)>  ->_SINK_
<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.ResultReceiver: void send(int,android.os.Bundle)>  ->_SINK_
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: void finishedEvent(int,boolean)>  ->_SINK_
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: void sessionCreated(com.android.internal.view.IInputMethodSession)>  ->_SINK_
<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)>  ->_SINK_
<android.view.inputmethod.BaseInputConnection: boolean setSelection(int,int)>  ->_SINK_
<android.util.PrintWriterPrinter: void println(java.lang.String)>  ->_SINK_
<android.os.DropBoxManager$Entry: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustVolume(int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamSolo(int,boolean,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamMute(int,boolean,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setRingerMode(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setVibrateSetting(int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: boolean shouldVibrate(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffect(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffectVolume(int,float)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterAudioFocusClient(java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>  ->_SINK_
<android.media.IAudioFocusDispatcher$Stub$Proxy: void dispatchAudioFocusChange(int,java.lang.String)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setCurrentClientId(int,android.app.PendingIntent,boolean)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setPlaybackState(int,int,long)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setTransportControlFlags(int,int)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setMetadata(int,android.os.Bundle)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setArtwork(int,android.graphics.Bitmap)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setAllMetadata(int,android.os.Bundle,android.graphics.Bitmap)>  ->_SINK_
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void onInformationRequested(int,int,int,int)>  ->_SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void setCurrentClientGenerationId(int)>  ->_SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void plugRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void unplugRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ActivityManager$RunningTaskInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.app.IUsageStats$Stub$Proxy: void noteLaunchTime(android.content.ComponentName,int)>  ->_SINK_
<com.android.internal.app.IUsageStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>  ->_SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)>  ->_SINK_
<android.accounts.AccountManager$AmsTask: void set(android.os.Bundle)>  ->_SINK_
<android.graphics.Matrix: void set(android.graphics.Matrix)>  ->_SINK_
<android.graphics.Matrix: void setTranslate(float,float)>  ->_SINK_
<android.graphics.Matrix: void setScale(float,float,float,float)>  ->_SINK_
<android.graphics.Matrix: void setScale(float,float)>  ->_SINK_
<android.graphics.Matrix: void setRotate(float,float,float)>  ->_SINK_
<android.graphics.Matrix: void setRotate(float)>  ->_SINK_
<android.graphics.Matrix: void setSinCos(float,float,float,float)>  ->_SINK_
<android.graphics.Matrix: void setSinCos(float,float)>  ->_SINK_
<android.graphics.Matrix: void setSkew(float,float,float,float)>  ->_SINK_
<android.graphics.Matrix: void setSkew(float,float)>  ->_SINK_
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>  ->_SINK_
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>  ->_SINK_
<android.graphics.Matrix: void setValues(float[])>  ->_SINK_
<android.graphics.Paint: void set(android.graphics.Paint)>  ->_SINK_
<android.graphics.Paint: void setBidiFlags(int)>  ->_SINK_
<android.graphics.Paint: void setARGB(int,int,int,int)>  ->_SINK_
<android.graphics.RectF: void set(android.graphics.RectF)>  ->_SINK_
<android.graphics.RectF: void set(android.graphics.Rect)>  ->_SINK_
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>  ->_SINK_
<android.app.SearchDialog: void setWorking(boolean)>  ->_SINK_
<android.app.SearchDialog: void setListSelection(int)>  ->_SINK_
<android.app.SearchableInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ISearchManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOtaspChanged(int)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.telephony.ServiceState: void setStateOutOfService()>  ->_SINK_
<android.telephony.ServiceState: void setStateOff()>  ->_SINK_
<android.telephony.ServiceState: void setCssIndicator(int)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void disableDnsCheck(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setUnitTestMode(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)>  ->_SINK_
<android.app.admin.DeviceAdminInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.app.admin.DeviceAdminInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.RemoteCallback: void sendResult(android.os.Bundle)>  ->_SINK_
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)>  ->_SINK_
<android.location.GpsStatus: void setStatus(android.location.GpsStatus)>  ->_SINK_
<android.location.Criteria: void setAccuracy(int)>  ->_SINK_
<android.location.Location: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.location.Location: void set(android.location.Location)>  ->_SINK_
<android.location.Location: void setExtras(android.os.Bundle)>  ->_SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onFirstFix(int)>  ->_SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onSvStatusChanged(int,int[],float[],float[],float[],int,int,int)>  ->_SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onNmeaReceived(long,java.lang.String)>  ->_SINK_
<android.location.LocationManager$ListenerTransport: void onStatusChanged(java.lang.String,int,android.os.Bundle)>  ->_SINK_
<android.location.ILocationListener$Stub$Proxy: void onStatusChanged(java.lang.String,int,android.os.Bundle)>  ->_SINK_
<android.location.ILocationListener$Stub$Proxy: void onProviderEnabled(java.lang.String)>  ->_SINK_
<android.location.ILocationListener$Stub$Proxy: void onProviderDisabled(java.lang.String)>  ->_SINK_
<android.location.LocationManager$ListenerTransport: void onStatusChanged(java.lang.String,int,android.os.Bundle)>  ->_SINK_
<android.app.IAlarmManager$Stub$Proxy: void set(int,long,android.app.PendingIntent)>  ->_SINK_
<android.app.IAlarmManager$Stub$Proxy: void setRepeating(int,long,long,android.app.PendingIntent)>  ->_SINK_
<android.app.IAlarmManager$Stub$Proxy: void setInexactRepeating(int,long,long,android.app.PendingIntent)>  ->_SINK_
<android.app.IAlarmManager$Stub$Proxy: void setTime(long)>  ->_SINK_
<android.app.IAlarmManager$Stub$Proxy: void setTimeZone(java.lang.String)>  ->_SINK_
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)>  ->_SINK_
<android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)>  ->_SINK_
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting(int)>  ->_SINK_
<android.os.IPowerManager$Stub$Proxy: void crash(java.lang.String)>  ->_SINK_
<android.os.IPowerManager$Stub$Proxy: void setAttentionLight(boolean,int)>  ->_SINK_
<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>  ->_SINK_
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.IIntentReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent)>  ->_SINK_
<android.app.ActivityManagerProxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean willActivityBeVisible(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void unregisterReceiver(android.content.IIntentReceiver)>  ->_SINK_
<android.app.ActivityManagerProxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void attachApplication(android.app.IApplicationThread)>  ->_SINK_
<android.app.ActivityManagerProxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void activityPaused(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.graphics.Bitmap,java.lang.CharSequence)>  ->_SINK_
<android.app.ActivityManagerProxy: void activitySlept(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void activityDestroyed(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void moveTaskToBack(int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void moveTaskBackwards(int)>  ->_SINK_
<android.app.ActivityManagerProxy: void reportThumbnail(android.os.IBinder,android.graphics.Bitmap,java.lang.CharSequence)>  ->_SINK_
<android.app.ActivityManagerProxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean unbindService(android.app.IServiceConnection)>  ->_SINK_
<android.app.ActivityManagerProxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: android.os.IBinder peekService(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void backupAgentCreated(java.lang.String,android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>  ->_SINK_
<android.app.ActivityManagerProxy: void setRequestedOrientation(android.os.IBinder,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void cancelIntentSender(android.content.IIntentSender)>  ->_SINK_
<android.app.ActivityManagerProxy: void setProcessLimit(int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setProcessForeground(android.os.IBinder,int,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: int checkPermission(java.lang.String,int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: int checkUriPermission(android.net.Uri,int,int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void showWaitingForDebugger(android.app.IApplicationThread,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void setDebugApp(java.lang.String,boolean,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void setAlwaysFinish(boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void setActivityController(android.app.IActivityController)>  ->_SINK_
<android.app.ActivityManagerProxy: void noteWakeupAlarm(android.content.IIntentSender)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean killPids(int[],java.lang.String,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ActivityManagerProxy: void signalPersistentProcesses(int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean shutdown(int)>  ->_SINK_
<android.app.ActivityManagerProxy: void closeSystemDialogs(java.lang.String)>  ->_SINK_
<android.app.ActivityManagerProxy: void killApplicationProcess(java.lang.String,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setImmersive(android.os.IBinder,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean isImmersive(android.os.IBinder)>  ->_SINK_
<android.app.ActivityManagerProxy: void crashApplication(int,int,java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ActivityManagerProxy: android.os.IBinder newUriPermissionOwner(java.lang.String)>  ->_SINK_
<android.app.ActivityManagerProxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int)>  ->_SINK_
<android.app.ActivityManagerProxy: int checkGrantUriPermission(int,java.lang.String,android.net.Uri,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setFrontActivityScreenCompatMode(int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setPackageScreenCompatMode(java.lang.String,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void setPackageAskScreenCompat(java.lang.String,boolean)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean switchUser(int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean removeSubTask(int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean removeTask(int,int)>  ->_SINK_
<android.app.ActivityManagerProxy: void registerProcessObserver(android.app.IProcessObserver)>  ->_SINK_
<android.app.ActivityManagerProxy: void unregisterProcessObserver(android.app.IProcessObserver)>  ->_SINK_
<android.app.ActivityManagerProxy: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)>  ->_SINK_
<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)>  ->_SINK_
<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)>  ->_SINK_
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>  ->_SINK_
<java.util.concurrent.ThreadPoolExecutor: void setKeepAliveTime(long,java.util.concurrent.TimeUnit)>  ->_SINK_
<android.content.ContentProviderNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.LocalSocket: void setReceiveBufferSize(int)>  ->_SINK_
<android.net.LocalSocket: void setSoTimeout(int)>  ->_SINK_
<android.net.LocalSocket: void setSendBufferSize(int)>  ->_SINK_
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])>  ->_SINK_
<com.android.internal.util.FastXmlSerializer: void setFeature(java.lang.String,boolean)>  ->_SINK_
<com.android.internal.util.FastXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>  ->_SINK_
<com.android.internal.util.FastXmlSerializer: void setPrefix(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.util.FastXmlSerializer: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.view.MotionEvent: void setSource(int)>  ->_SINK_
<android.view.KeyEvent: void setTainted(boolean)>  ->_SINK_
<android.view.MotionEvent: void setTainted(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnableSessionCreation(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnabledCipherSuites(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnabledProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setUseClientMode(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setNeedClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setWantClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void sendUrgentData(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setOOBInline(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoTimeout(int)>  ->_SINK_
<android.widget.AbsListView: void sendAccessibilityEvent(int)>  ->_SINK_
<android.widget.PopupWindow$PopupViewContainer: void sendAccessibilityEvent(int)>  ->_SINK_
<android.widget.TabHost: void sendAccessibilityEvent(int)>  ->_SINK_
<android.widget.TextView: void sendAccessibilityEvent(int)>  ->_SINK_
<android.widget.TabWidget: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.util.ReflectiveProperty: void set(java.lang.Object,java.lang.Object)>  ->_SINK_
<android.util.Property: void set(java.lang.Object,java.lang.Object)>  ->_SINK_
<android.view.animation.Animation: void setInterpolator(android.content.Context,int)>  ->_SINK_
<android.view.animation.AnimationSet: void setStartOffset(long)>  ->_SINK_
<android.view.animation.AnimationSet: void setDuration(long)>  ->_SINK_
<android.view.animation.AnimationSet: void setStartTime(long)>  ->_SINK_
<android.view.animation.AnimationSet: void setRepeatMode(int)>  ->_SINK_
<android.view.animation.AnimationSet: void setFillBefore(boolean)>  ->_SINK_
<android.view.animation.AnimationSet: void setFillAfter(boolean)>  ->_SINK_
<android.view.GLES20RenderLayer: void setTransform(android.graphics.Matrix)>  ->_SINK_
<android.view.GLES20TextureLayer: void setTransform(android.graphics.Matrix)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompatIcs$1: void sendAccessibilityEvent(android.view.View,int)>  ->_SINK_
<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void remove(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void performDeferredDestroy(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: boolean outOfMemory(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void setTransparentRegion(android.view.IWindow,android.graphics.Region)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void finishDrawing(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void setInTouchMode(boolean)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: boolean performHapticFeedback(android.view.IWindow,int,boolean)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void reportDropResult(android.view.IWindow,boolean)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void dragRecipientEntered(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void dragRecipientExited(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void setWallpaperPosition(android.os.IBinder,float,float,float,float)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void wallpaperOffsetsComplete(android.os.IBinder)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>  ->_SINK_
<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.AbsListView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.widget.ActionBarView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.TextView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.ExpandableListView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.ProgressBar$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.AdapterViewAnimator$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.AbsSpinner$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.CompoundButton$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.DatePicker$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.support.v4.view.ViewPager$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.TimePicker$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.PreferenceScreen$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.TwoStatePreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.DialogPreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.EditTextPreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.ListPreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.ExpandableListView: boolean performItemClick(android.view.View,int,long)>  ->_SINK_
<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)>  ->_SINK_
<android.widget.AdapterViewAnimator: void setSelection(int)>  ->_SINK_
<android.widget.Gallery: void setSelectedPositionInt(int)>  ->_SINK_
<android.view.View$4: void setValue(android.view.View,float)>  ->_SINK_
<android.view.View$3: void setValue(android.view.View,float)>  ->_SINK_
<android.graphics.drawable.ShapeDrawable: void setPadding(int,int,int,int)>  ->_SINK_
<android.graphics.drawable.ShapeDrawable: void setPadding(android.graphics.Rect)>  ->_SINK_
<android.graphics.drawable.ShapeDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.drawable.ShapeDrawable: void setDither(boolean)>  ->_SINK_
<android.view.View$6: void setValue(android.view.View,float)>  ->_SINK_
<android.view.View$5: void setValue(android.view.View,float)>  ->_SINK_
<android.view.View$8: void setValue(android.view.View,float)>  ->_SINK_
<android.view.View$7: void setValue(android.view.View,float)>  ->_SINK_
<android.view.View$9: void setValue(android.view.View,float)>  ->_SINK_
<android.text.TextPaint: void set(android.text.TextPaint)>  ->_SINK_
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>  ->_SINK_
<android.text.style.MetricAffectingSpan$Passthrough: void updateDrawState(android.text.TextPaint)>  ->_SINK_
<android.text.style.TextAppearanceSpan: void updateDrawState(android.text.TextPaint)>  ->_SINK_
<android.text.style.CharacterStyle$Passthrough: void updateDrawState(android.text.TextPaint)>  ->_SINK_
<android.text.style.MetricAffectingSpan$Passthrough: void updateMeasureState(android.text.TextPaint)>  ->_SINK_
<android.text.Editable: android.text.Editable append(java.lang.CharSequence)>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence)>  ->_SINK_
<android.text.Editable: android.text.Editable append(java.lang.CharSequence,int,int)>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence,int,int)>  ->_SINK_
<android.text.Editable: android.text.Editable append(char)>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(char)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setType(int)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFixedSize(int,int)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFormat(int)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setKeepScreenOn(boolean)>  ->_SINK_
<android.util.SparseIntArray: void append(int,int)>  ->_SINK_
<android.graphics.Path: void set(android.graphics.Path)>  ->_SINK_
<android.graphics.Path: void setLastPoint(float,float)>  ->_SINK_
<android.app.BackStackRecord: android.app.FragmentTransaction setCustomAnimations(int,int)>  ->_SINK_
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)>  ->_SINK_
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)>  ->_SINK_
<android.widget.AbsListView$RecycleBin: void addScrapView(android.view.View,int)>  ->_SINK_
<android.widget.AbsListView$RecycleBin: void setCacheColorHint(int)>  ->_SINK_
<android.widget.AbsListView$PositionScroller: void start(int,int)>  ->_SINK_
<android.widget.AbsListView$PositionScroller: void startWithOffset(int,int)>  ->_SINK_
<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)>  ->_SINK_
<android.widget.PopupWindow: void setTouchModal(boolean)>  ->_SINK_
<android.widget.PopupWindow: void update(int,int)>  ->_SINK_
<android.widget.PopupWindow: void update(int,int,int,int)>  ->_SINK_
<android.widget.PopupWindow: void update(int,int,int,int,boolean)>  ->_SINK_
<android.widget.PopupWindow: void update(android.view.View,int,int)>  ->_SINK_
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)>  ->_SINK_
<android.widget.EditText: void setSelection(int,int)>  ->_SINK_
<android.widget.EditText: void setSelection(int)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingRegion(int,int)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean setSelection(int,int)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performEditorAction(int)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performContextMenuAction(int)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)>  ->_SINK_
<android.view.inputmethod.InputConnectionWrapper: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>  ->_SINK_
<android.widget.AbsListView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.animation.AnimatorSet: void setTarget(java.lang.Object)>  ->_SINK_
<android.animation.Animator: void setTarget(java.lang.Object)>  ->_SINK_
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.BackStackRecord: android.app.FragmentTransaction setCustomAnimations(int,int)>  ->_SINK_
<android.app.FragmentManagerState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.animation.AnimatorSet$DependencyListener: void onAnimationStart(android.animation.Animator)>  ->_SINK_
<android.animation.AnimatorSet$DependencyListener: void onAnimationEnd(android.animation.Animator)>  ->_SINK_
<android.app.BackStackState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.util.LogWriter: void write(char[],int,int)>  ->_SINK_
<com.android.internal.widget.ActionBarView: void setSplitActionBar(boolean)>  ->_SINK_
<com.android.internal.widget.ActionBarView: void setHomeButtonEnabled(boolean)>  ->_SINK_
<com.android.internal.widget.ActionBarView: void setIcon(int)>  ->_SINK_
<com.android.internal.widget.ActionBarView: void setLogo(int)>  ->_SINK_
<com.android.internal.widget.ActionBarView: void setDropdownSelectedPosition(int)>  ->_SINK_
<com.android.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)>  ->_SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setCustomView(android.view.View)>  ->_SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setTitle(int)>  ->_SINK_
<com.android.internal.app.ActionBarImpl$ActionModeImpl: void setSubtitle(int)>  ->_SINK_
<android.animation.AnimatorSet: void setTarget(java.lang.Object)>  ->_SINK_
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>  ->_SINK_
<android.animation.ObjectAnimator: void setIntValues(int[])>  ->_SINK_
<android.animation.ObjectAnimator: void setFloatValues(float[])>  ->_SINK_
<android.animation.ObjectAnimator: void setObjectValues(java.lang.Object[])>  ->_SINK_
<android.os.PerformanceCollector: void beginSnapshot(java.lang.String)>  ->_SINK_
<android.os.PerformanceCollector: void startTiming(java.lang.String)>  ->_SINK_
<android.os.PerformanceCollector: android.os.Bundle addIteration(java.lang.String)>  ->_SINK_
<android.os.PerformanceCollector: android.os.Bundle stopTiming(java.lang.String)>  ->_SINK_
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,long)>  ->_SINK_
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,float)>  ->_SINK_
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,java.lang.String)>  ->_SINK_
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setEnabled(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setAlphabeticShortcut(char)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setTitle(int)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setCheckable(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: void setExclusiveCheckable(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setChecked(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: boolean setVisibleInt(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setVisible(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: void setIsActionButton(boolean)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setActionView(int)>  ->_SINK_
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setShowAsActionFlags(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: void setQwertyMode(boolean)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: void setShortcutsVisible(boolean)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setIcon(int)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderIcon(int)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderTitle(int)>  ->_SINK_
<com.android.internal.view.menu.SubMenuBuilder: android.view.SubMenu setHeaderView(android.view.View)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuView: boolean invokeItem(com.android.internal.view.menu.MenuItemImpl)>  ->_SINK_
<android.view.animation.Transformation: void set(android.view.animation.Transformation)>  ->_SINK_
<android.graphics.PointF: void set(android.graphics.PointF)>  ->_SINK_
<android.view.accessibility.AccessibilityEvent: void setSealed(boolean)>  ->_SINK_
<android.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: boolean isTagEnabled(java.lang.String)>  ->_SINK_
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>  ->_SINK_
<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponent(android.content.ComponentName)>  ->_SINK_
<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int)>  ->_SINK_
<android.app.WallpaperInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.app.WallpaperInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setDither(boolean)>  ->_SINK_
<android.app.WallpaperManager$FastBitmapDrawable: void setFilterBitmap(boolean)>  ->_SINK_
<android.view.IRotationWatcher$Stub$Proxy: void onRotationChanged(int)>  ->_SINK_
<java.util.zip.CRC32: void update(byte[],int,int)>  ->_SINK_
<java.util.zip.CRC32: void update(int)>  ->_SINK_
<java.util.zip.CRC32: void update(int)>  ->_SINK_
<java.util.zip.CRC32: void update(byte[])>  ->_SINK_
<java.util.zip.CRC32: void update(byte[],int,int)>  ->_SINK_
<android.os.ServiceManagerProxy: android.os.IBinder checkService(java.lang.String)>  ->_SINK_
<android.os.ServiceManagerProxy: void setPermissionController(android.os.IPermissionController)>  ->_SINK_
<android.os.ServiceManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>  ->_SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>  ->_SINK_
<android.app.LoadedApk$WarningContextClassLoader: void setDefaultAssertionStatus(boolean)>  ->_SINK_
<android.app.LoadedApk$ServiceDispatcher: void doConnected(android.content.ComponentName,android.os.IBinder)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void updateAppWidget(int,android.widget.RemoteViews)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void providerChanged(int,android.appwidget.AppWidgetProviderInfo)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void viewDataChanged(int,int)>  ->_SINK_
<android.widget.RemoteViews$ReflectionAction: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$SetOnClickFillInIntent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$ViewGroupAction: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$SetOnClickPendingIntent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.RemoteViews$SetPendingIntentTemplate: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,java.util.List)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void stopListening(int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteAppWidgetId(int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteHost(int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(int[],android.widget.RemoteViews)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(int[],android.widget.RemoteViews)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void notifyAppWidgetViewDataChanged(int[],int)>  ->_SINK_
<java.util.Collections$CheckedMap$CheckedEntry: java.lang.Object setValue(java.lang.Object)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnabledCipherSuites(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnabledCipherSuites(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnabledProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnabledProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setUseClientMode(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setUseClientMode(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setNeedClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setNeedClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setWantClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setWantClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnableSessionCreation(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnableSessionCreation(boolean)>  ->_SINK_
<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: void putValue(java.lang.String,java.lang.Object)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void putValue(java.lang.String,java.lang.Object)>  ->_SINK_
<java.util.zip.ZipEntry: void setTime(long)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setInstanceFollowRedirects(boolean)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setFixedLengthStreamingMode(int)>  ->_SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setChunkedStreamingMode(int)>  ->_SINK_
<libcore.net.http.RawHeaders: void setStatusLine(java.lang.String)>  ->_SINK_
<libcore.net.http.RawHeaders: void set(java.lang.String,java.lang.String)>  ->_SINK_
<libcore.net.http.HttpConnection: void setSoTimeout(int)>  ->_SINK_
<libcore.net.http.HttpConnection: void setupSecureSocket(javax.net.ssl.SSLSocketFactory,boolean)>  ->_SINK_
<libcore.net.http.RetryableOutputStream: void write(byte[],int,int)>  ->_SINK_
<libcore.net.http.RetryableOutputStream: void writeToSocket(java.io.OutputStream)>  ->_SINK_
<java.text.ChoiceFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>  ->_SINK_
<java.text.DecimalFormat: void setCurrency(java.util.Currency)>  ->_SINK_
<java.text.NumberFormat: void setCurrency(java.util.Currency)>  ->_SINK_
<java.text.DecimalFormat: void setGroupingUsed(boolean)>  ->_SINK_
<java.text.DecimalFormat: void setMaximumFractionDigits(int)>  ->_SINK_
<java.text.DecimalFormat: void setMaximumIntegerDigits(int)>  ->_SINK_
<java.text.DecimalFormat: void setMinimumFractionDigits(int)>  ->_SINK_
<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>  ->_SINK_
<java.text.DecimalFormat: void setParseIntegerOnly(boolean)>  ->_SINK_
<java.text.NumberFormat: void setRoundingMode(java.math.RoundingMode)>  ->_SINK_
<java.net.PlainSocketImpl: void bind(java.net.InetAddress,int)>  ->_SINK_
<java.net.SocketImpl: void setPerformancePreferences(int,int,int)>  ->_SINK_
<java.net.PlainSocketImpl: void bind(java.net.InetAddress,int)>  ->_SINK_
<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)>  ->_SINK_
<java.nio.IoVec: int doTransfer(java.io.FileDescriptor)>  ->_SINK_
<java.nio.BaseByteBuffer: java.nio.ByteBuffer putChar(char)>  ->_SINK_
<java.nio.BaseByteBuffer: java.nio.ByteBuffer putChar(int,char)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void bind(int,java.net.InetAddress)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void send(java.net.DatagramPacket)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void setTimeToLive(int)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void setTTL(byte)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void bind(int,java.net.InetAddress)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void send(java.net.DatagramPacket)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void setTimeToLive(int)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void setTTL(byte)>  ->_SINK_
<java.nio.PipeImpl$PipeSinkChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void bind(java.net.SocketAddress,int)>  ->_SINK_
<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void bind(java.net.SocketAddress)>  ->_SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void bind(java.net.SocketAddress)>  ->_SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void send(java.net.DatagramPacket)>  ->_SINK_
<java.nio.SocketChannelImpl$SocketAdapter: void bind(java.net.SocketAddress)>  ->_SINK_
<java.nio.SocketChannelImpl$SocketChannelOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.nio.SocketChannelImpl$SocketChannelOutputStream: void write(int)>  ->_SINK_
<org.apache.harmony.xml.dom.CharacterDataImpl: void setData(java.lang.String)>  ->_SINK_
<org.apache.harmony.security.fortress.Services: void initServiceInfo(java.security.Provider)>  ->_SINK_
<java.security.Provider$Service: void putAttribute(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void unregisterContentObserver(android.database.IContentObserver)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)>  ->_SINK_
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.net.VpnConfig: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.net.LegacyVpnInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>  ->_SINK_
<android.view.ViewRootImpl: boolean performHapticFeedback(int,boolean)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFixedSize(int,int)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFormat(int)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setType(int)>  ->_SINK_
<android.view.Surface: void setLayer(int)>  ->_SINK_
<android.view.Surface: void setPosition(int,int)>  ->_SINK_
<android.view.Surface: void setPosition(float,float)>  ->_SINK_
<android.view.Surface: void setTransparentRegionHint(android.graphics.Region)>  ->_SINK_
<android.view.Surface: void setAlpha(float)>  ->_SINK_
<android.view.Surface: void setMatrix(float,float,float,float)>  ->_SINK_
<android.view.Surface: void setFlags(int,int)>  ->_SINK_
<android.view.HardwareCanvas: void setBitmap(android.graphics.Bitmap)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFormat(int)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setType(int)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFixedSize(int,int)>  ->_SINK_
<android.view.ViewRootImpl$TakenSurfaceHolder: void setKeepScreenOn(boolean)>  ->_SINK_
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)>  ->_SINK_
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)>  ->_SINK_
<android.app.backup.BackupDataOutput: void setKeyPrefix(java.lang.String)>  ->_SINK_
<android.app.backup.FullBackup: void restoreFile(android.os.ParcelFileDescriptor,long,int,long,long,java.io.File)>  ->_SINK_
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>  ->_SINK_
<android.view.HardwareRenderer$Gl20Renderer: void setup(int,int)>  ->_SINK_
<android.view.GLES20Canvas: void setMatrix(android.graphics.Matrix)>  ->_SINK_
<android.view.GLES20Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>  ->_SINK_
<android.view.GLES20Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>  ->_SINK_
<android.view.GLES20Canvas: void restoreToCount(int)>  ->_SINK_
<android.view.HardwareRenderer$Gl20Renderer: void setup(int,int)>  ->_SINK_
<java.io.StringWriter: void write(char[],int,int)>  ->_SINK_
<java.io.StringWriter: java.io.StringWriter append(char)>  ->_SINK_
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkPermission(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkUidPermission(java.lang.String,int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void removePermission(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean isProtectedBroadcast(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkSignatures(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: int checkUidSignatures(int,int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void finishPackageInstall(int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void setInstallerPackageName(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void addPackageToPreferred(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void removePackageFromPreferred(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void clearPackagePreferredActivities(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(long,android.content.IntentSender)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean hasSystemFeature(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOpt(java.lang.String)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: boolean setInstallLocation(int)>  ->_SINK_
<android.content.pm.IPackageManager$Stub$Proxy: void verifyPendingInstall(int,int)>  ->_SINK_
<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>  ->_SINK_
<com.android.internal.os.AndroidPrintStream: void log(java.lang.String)>  ->_SINK_
<java.text.Collator: void setDecomposition(int)>  ->_SINK_
<android.animation.ValueAnimator: void setFrameDelay(long)>  ->_SINK_
<android.animation.ObjectAnimator: void setIntValues(int[])>  ->_SINK_
<android.animation.ValueAnimator: void setIntValues(int[])>  ->_SINK_
<android.animation.ObjectAnimator: void setFloatValues(float[])>  ->_SINK_
<android.animation.ValueAnimator: void setFloatValues(float[])>  ->_SINK_
<android.animation.ObjectAnimator: void setObjectValues(java.lang.Object[])>  ->_SINK_
<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>  ->_SINK_
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>  ->_SINK_
<android.app.ApplicationErrorReport$AnrInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.app.ApplicationErrorReport$BatteryInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.app.ApplicationErrorReport$RunningServiceInfo: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.app.IThumbnailRetriever$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.IUiModeManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.statusbar.StatusBarIconList: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.statusbar.StatusBarIconList: void setIcon(int,com.android.internal.statusbar.StatusBarIcon)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setIcon(int,com.android.internal.statusbar.StatusBarIcon)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void removeIcon(int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void addNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void updateNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void removeNotification(android.os.IBinder)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void disable(int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setHardKeyboardStatus(boolean,boolean)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIconVisibility(java.lang.String,boolean)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void removeIcon(java.lang.String)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationClick(java.lang.String,java.lang.String,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationClear(java.lang.String,java.lang.String,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setHardKeyboardEnabled(boolean)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy: void setState(int)>  ->_SINK_
<android.view.accessibility.IAccessibilityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setFindAccessibilityNodeInfosResult(java.util.List,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setPerformAccessibilityActionResult(boolean,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<java.util.concurrent.CopyOnWriteArrayList$CowIterator: void set(java.lang.Object)>  ->_SINK_
<java.util.concurrent.CopyOnWriteArrayList$CowSubList: java.lang.Object set(int,java.lang.Object)>  ->_SINK_
<android.os.WorkSource: void set(android.os.WorkSource)>  ->_SINK_
<android.os.WorkSource: void set(int)>  ->_SINK_
<android.os.WorkSource: android.os.WorkSource[] setReturningDiffs(android.os.WorkSource)>  ->_SINK_
<android.os.WorkSource: boolean add(android.os.WorkSource)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<java.util.BitSet: void set(int)>  ->_SINK_
<java.util.BitSet: void set(int,boolean)>  ->_SINK_
<java.util.BitSet: void set(int,int,boolean)>  ->_SINK_
<java.util.BitSet: void set(int,int)>  ->_SINK_
<android.location.ICountryDetector$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.database.CursorWindow: boolean setNumColumns(int)>  ->_SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,double)>  ->_SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,float)>  ->_SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,long)>  ->_SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,int)>  ->_SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,boolean)>  ->_SINK_
<android.database.DatabaseUtils$InsertHelper: void bindNull(int)>  ->_SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,byte[])>  ->_SINK_
<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)>  ->_SINK_
<android.database.sqlite.SQLiteCursor: void setWindow(android.database.CursorWindow)>  ->_SINK_
<android.database.sqlite.SQLiteCursor: void setWindow(android.database.CursorWindow)>  ->_SINK_
<android.database.sqlite.SQLiteCursor: void setSelectionArguments(java.lang.String[])>  ->_SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int close(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int connect(int,int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int reconnect(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefWrite(int,android.nfc.NdefMessage)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefMakeReadOnly(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean ndefIsWritable(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int formatNdef(int,byte[])>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int setTimeout(int,int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean canMakeReadOnly(int)>  ->_SINK_
<android.nfc.NfcActivityManager: void setNdefPushMessage(android.app.Activity,android.nfc.NdefMessage)>  ->_SINK_
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle open(java.lang.String,android.os.IBinder)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void setCardEmulationRoute(java.lang.String,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void authenticate(java.lang.String,byte[])>  ->_SINK_
<android.nfc.INfcAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.os.storage.IMountShutdownObserver$Stub$Proxy: void onShutDownComplete(int)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void registerListener(android.os.storage.IMountServiceListener)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void unregisterListener(android.os.storage.IMountServiceListener)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void setUsbMassStorageEnabled(boolean)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int mountVolume(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void unmountVolume(java.lang.String,boolean,boolean)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int formatVolume(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int destroySecureContainer(java.lang.String,boolean)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int finalizeSecureContainer(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int mountSecureContainer(java.lang.String,java.lang.String,int)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int unmountSecureContainer(java.lang.String,boolean)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: boolean isSecureContainerMounted(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int renameSecureContainer(java.lang.String,java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void shutdown(android.os.storage.IMountShutdownObserver)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: boolean isObbMounted(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int decryptStorage(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int encryptStorage(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int changeEncryptionPassword(java.lang.String)>  ->_SINK_
<android.os.storage.IMountService$Stub$Proxy: int verifyEncryptionPassword(java.lang.String)>  ->_SINK_
<android.hardware.usb.UsbRequest: boolean queue(java.nio.ByteBuffer,int)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.text.style.URLSpan: void onClick(android.view.View)>  ->_SINK_
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.app.ITransientNotification,int)>  ->_SINK_
<android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.app.ITransientNotification)>  ->_SINK_
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>  ->_SINK_
<com.android.internal.textservice.ITextServicesManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: void onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>  ->_SINK_
<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>  ->_SINK_
<java.security.SecureRandom: void setSeed(byte[])>  ->_SINK_
<android.content.pm.PackageParser$Service: void setPackageName(java.lang.String)>  ->_SINK_
<android.content.pm.PackageParser$Service: void setPackageName(java.lang.String)>  ->_SINK_
<android.content.pm.PackageParser$Component: void setPackageName(java.lang.String)>  ->_SINK_
<java.util.jar.Manifest: void write(java.util.jar.Manifest,java.io.OutputStream)>  ->_SINK_
<java.util.jar.Manifest: void write(java.io.OutputStream)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.IIntentSender$Stub$Proxy: int send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.RemoteCallback$LocalCallback: void sendResult(android.os.Bundle)>  ->_SINK_
<android.os.IRemoteCallback$Stub$Proxy: void sendResult(android.os.Bundle)>  ->_SINK_
<android.graphics.drawable.AnimationDrawable: boolean setVisible(boolean,boolean)>  ->_SINK_
<android.graphics.drawable.DrawableContainer: boolean setVisible(boolean,boolean)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void endElement(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.text.HtmlToSpannedConverter: void processingInstruction(java.lang.String,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void processingInstruction(java.lang.String,java.lang.String)>  ->_SINK_
<org.xmlpull.v1.XmlPullParserFactory: void setFeature(java.lang.String,boolean)>  ->_SINK_
<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)>  ->_SINK_
<org.xmlpull.v1.XmlPullParserFactory: void setValidating(boolean)>  ->_SINK_
<org.ccil.cowan.tagsoup.Parser: void setFeature(java.lang.String,boolean)>  ->_SINK_
<org.apache.harmony.xml.ExpatReader: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<org.ccil.cowan.tagsoup.Parser: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<org.xml.sax.helpers.ParserAdapter: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<org.apache.harmony.xml.ExpatReader: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<org.kxml2.io.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>  ->_SINK_
<org.kxml2.io.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>  ->_SINK_
<org.kxml2.io.KXmlParser: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData)>  ->_SINK_
<android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)>  ->_SINK_
<android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)>  ->_SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setTextBeforeCursor(java.lang.CharSequence,int)>  ->_SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setTextAfterCursor(java.lang.CharSequence,int)>  ->_SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setCursorCapsMode(int,int)>  ->_SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setExtractedText(android.view.inputmethod.ExtractedText,int)>  ->_SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setSelectedText(java.lang.CharSequence,int)>  ->_SINK_
<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.ResultReceiver$MyResultReceiver: void send(int,android.os.Bundle)>  ->_SINK_
<com.android.internal.os.IResultReceiver$Stub$Proxy: void send(int,android.os.Bundle)>  ->_SINK_
<android.os.ResultReceiver$MyResultReceiver: void send(int,android.os.Bundle)>  ->_SINK_
<com.android.internal.os.IResultReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void setUsingInputMethod(boolean)>  ->_SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void onUnbindMethod(int)>  ->_SINK_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void setActive(boolean)>  ->_SINK_
<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.view.IInputConnectionWrapper: void setSelection(int,int)>  ->_SINK_
<com.android.internal.view.IInputConnectionWrapper: void setComposingRegion(int,int)>  ->_SINK_
<com.android.internal.view.IInputConnectionWrapper: void dispatchMessage(android.os.Message)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustVolume(int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamSolo(int,boolean,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamMute(int,boolean,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setRingerMode(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setVibrateSetting(int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: boolean shouldVibrate(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffect(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffectVolume(int,float)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterAudioFocusClient(java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>  ->_SINK_
<com.android.internal.app.IUsageStats$Stub$Proxy: void noteLaunchTime(android.content.ComponentName,int)>  ->_SINK_
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)>  ->_SINK_
<android.accounts.AccountManager$AmsTask$Response: void onError(int,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onError(int,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)>  ->_SINK_
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)>  ->_SINK_
<android.accounts.AccountManager$AmsTask$Response: void onError(int,java.lang.String)>  ->_SINK_
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>  ->_SINK_
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>  ->_SINK_
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>  ->_SINK_
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)>  ->_SINK_
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>  ->_SINK_
<android.widget.TextView: void setTextScaleX(float)>  ->_SINK_
<android.widget.TextView: void setHintTextColor(int)>  ->_SINK_
<android.widget.TextView: void setLinkTextColor(int)>  ->_SINK_
<android.widget.TextView: void setPaintFlags(int)>  ->_SINK_
<android.widget.TextView: void setHint(int)>  ->_SINK_
<android.widget.TextView: void setInputType(int)>  ->_SINK_
<android.widget.TextView: void setInputExtras(int)>  ->_SINK_
<android.widget.TextView: boolean setFrame(int,int,int,int)>  ->_SINK_
<android.inputmethodservice.ExtractEditText: void setExtractedText(android.view.inputmethod.ExtractedText)>  ->_SINK_
<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)>  ->_SINK_
<android.widget.AutoCompleteTextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>  ->_SINK_
<android.widget.TextView: void setAllCaps(boolean)>  ->_SINK_
<android.widget.TextView: void setSelected(boolean)>  ->_SINK_
<android.widget.TextView: void sendAccessibilityEvent(int)>  ->_SINK_
<android.inputmethodservice.ExtractEditText: void setSpan_internal(java.lang.Object,int,int,int)>  ->_SINK_
<android.widget.TextView: void setSpan_internal(java.lang.Object,int,int,int)>  ->_SINK_
<android.inputmethodservice.ExtractEditText: void setCursorPosition_internal(int,int)>  ->_SINK_
<android.widget.TextView: void setCursorPosition_internal(int,int)>  ->_SINK_
<android.widget.ImageView: void setSelected(boolean)>  ->_SINK_
<android.widget.ImageView: boolean setFrame(int,int,int,int)>  ->_SINK_
<android.widget.ImageView: void setColorFilter(int)>  ->_SINK_
<android.widget.ImageView: void setAlpha(int)>  ->_SINK_
<android.widget.AutoCompleteTextView: void setDropDownWidth(int)>  ->_SINK_
<android.widget.AutoCompleteTextView: void setDropDownHeight(int)>  ->_SINK_
<android.widget.AutoCompleteTextView: void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<android.widget.AutoCompleteTextView: void setDropDownBackgroundResource(int)>  ->_SINK_
<android.widget.AutoCompleteTextView: void setDropDownVerticalOffset(int)>  ->_SINK_
<android.widget.AutoCompleteTextView: void setDropDownHorizontalOffset(int)>  ->_SINK_
<android.widget.AutoCompleteTextView: void setDropDownAnimationStyle(int)>  ->_SINK_
<android.widget.AutoCompleteTextView: void setDropDownAlwaysVisible(boolean)>  ->_SINK_
<android.widget.AutoCompleteTextView: void setListSelection(int)>  ->_SINK_
<android.widget.AutoCompleteTextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>  ->_SINK_
<android.widget.AutoCompleteTextView: void setForceIgnoreOutsideTouch(boolean)>  ->_SINK_
<android.widget.SearchView: void setIconifiedByDefault(boolean)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onSignalStrengthChanged(int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCallStateChanged(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataConnectionStateChanged(int,int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataActivity(int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onOtaspChanged(int)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccRefresh(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSuppServiceNotifications(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void conference(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setMute(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallWaiting(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendUSSD(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()>  ->_SINK_
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaSubscriptionSource(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void sendBurstDtmf(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccRefresh(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setUnitTestMode(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyDisconnect(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void saveClirSetting(int)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDisconnect(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void conference(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()>  ->_SINK_
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)>  ->_SINK_
<android.net.LinkCapabilities: void put(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneSubInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.os.RemoteCallback$LocalCallback: void sendResult(android.os.Bundle)>  ->_SINK_
<android.widget.HorizontalScrollView: void draw(android.graphics.Canvas)>  ->_SINK_
<android.widget.ScrollView: void draw(android.graphics.Canvas)>  ->_SINK_
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<java.text.DecimalFormat: void setParseIntegerOnly(boolean)>  ->_SINK_
<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>  ->_SINK_
<java.text.DecimalFormat: void setCurrency(java.util.Currency)>  ->_SINK_
<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>  ->_SINK_
<java.text.DecimalFormat: void setGroupingSize(int)>  ->_SINK_
<java.text.DecimalFormat: void setGroupingUsed(boolean)>  ->_SINK_
<java.text.DecimalFormat: void setMaximumFractionDigits(int)>  ->_SINK_
<java.text.DecimalFormat: void setMaximumIntegerDigits(int)>  ->_SINK_
<java.text.DecimalFormat: void setMinimumFractionDigits(int)>  ->_SINK_
<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>  ->_SINK_
<java.text.DecimalFormat: void setMultiplier(int)>  ->_SINK_
<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)>  ->_SINK_
<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)>  ->_SINK_
<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)>  ->_SINK_
<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)>  ->_SINK_
<java.text.DecimalFormat: void setParseBigDecimal(boolean)>  ->_SINK_
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.IServiceConnection$Stub$Proxy: void connected(android.content.ComponentName,android.os.IBinder)>  ->_SINK_
<android.app.IThumbnailReceiver$Stub$Proxy: void newThumbnail(int,android.graphics.Bitmap,java.lang.CharSequence)>  ->_SINK_
<android.app.ApplicationThreadProxy: void schedulePauseActivity(android.os.IBinder,boolean,boolean,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleStopActivity(android.os.IBinder,boolean,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleWindowVisibility(android.os.IBinder,boolean)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleSleeping(android.os.IBinder,boolean)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleResumeActivity(android.os.IBinder,boolean)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleSendResult(android.os.IBinder,java.util.List)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleNewIntent(java.util.List,android.os.IBinder)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleDestroyActivity(android.os.IBinder,boolean,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleServiceArgs(android.os.IBinder,boolean,int,int,android.content.Intent)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleStopService(android.os.IBinder)>  ->_SINK_
<android.app.ApplicationThreadProxy: void requestThumbnail(android.os.IBinder)>  ->_SINK_
<android.app.ApplicationThreadProxy: void setHttpProxy(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleActivityConfigurationChanged(android.os.IBinder)>  ->_SINK_
<android.app.ApplicationThreadProxy: void profilerControl(boolean,java.lang.String,android.os.ParcelFileDescriptor,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void setSchedulingGroup(int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void dispatchPackageBroadcast(int,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleCrash(java.lang.String)>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpHeap(boolean,java.lang.String,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void setCoreSettings(android.os.Bundle)>  ->_SINK_
<android.app.ApplicationThreadProxy: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)>  ->_SINK_
<android.app.ApplicationThreadProxy: void scheduleTrimMemory(int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.app.IActivityController$Stub$Proxy: boolean activityStarting(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.IActivityController$Stub$Proxy: boolean activityResuming(java.lang.String)>  ->_SINK_
<android.app.IActivityController$Stub$Proxy: boolean appCrashed(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)>  ->_SINK_
<android.app.IActivityController$Stub$Proxy: int appEarlyNotResponding(java.lang.String,int,java.lang.String)>  ->_SINK_
<android.app.IActivityController$Stub$Proxy: int appNotResponding(java.lang.String,int,java.lang.String)>  ->_SINK_
<android.app.IInstrumentationWatcher$Stub$Proxy: void instrumentationStatus(android.content.ComponentName,int,android.os.Bundle)>  ->_SINK_
<android.app.IInstrumentationWatcher$Stub$Proxy: void instrumentationFinished(android.content.ComponentName,int,android.os.Bundle)>  ->_SINK_
<android.content.pm.IPackageDataObserver$Stub$Proxy: void onRemoveCompleted(java.lang.String,boolean)>  ->_SINK_
<android.app.IProcessObserver$Stub$Proxy: void onForegroundActivitiesChanged(int,int,boolean)>  ->_SINK_
<android.app.IProcessObserver$Stub$Proxy: void onProcessDied(int,int)>  ->_SINK_
<android.content.ContentProviderProxy: int bulkInsert(android.net.Uri,android.content.ContentValues[])>  ->_SINK_
<android.content.ContentProviderProxy: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>  ->_SINK_
<android.content.ContentProviderProxy: int delete(android.net.Uri,java.lang.String,java.lang.String[])>  ->_SINK_
<android.content.ContentProviderProxy: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  ->_SINK_
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>  ->_SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>  ->_SINK_
<android.content.ContentProviderProxy: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(int)>  ->_SINK_
<android.net.LocalSocketImpl: void bind(android.net.LocalSocketAddress)>  ->_SINK_
<android.net.LocalSocketImpl: void setOption(int,java.lang.Object)>  ->_SINK_
<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: void putValue(java.lang.String,java.lang.Object)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void putValue(java.lang.String,java.lang.Object)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledProtocols(int,java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledCipherSuites(int,java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void setSessionTimeout(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: byte[] toBytes(javax.net.ssl.SSLSession)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.util.FloatProperty: void set(java.lang.Object,java.lang.Float)>  ->_SINK_
<com.android.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>  ->_SINK_
<android.util.ReflectiveProperty: void set(java.lang.Object,java.lang.Object)>  ->_SINK_
<android.view.accessibility.AccessibilityInteractionClient: void addConnection(int,android.accessibilityservice.IAccessibilityServiceConnection)>  ->_SINK_
<android.widget.ScrollBarDrawable: void setAlpha(int)>  ->_SINK_
<android.widget.ScrollBarDrawable: void setColorFilter(android.graphics.ColorFilter)>  ->_SINK_
<android.graphics.Interpolator: void setKeyFrame(int,int,float[])>  ->_SINK_
<android.graphics.Interpolator: void setKeyFrame(int,int,float[],float[])>  ->_SINK_
<android.graphics.Interpolator: void setRepeatMirror(float,boolean)>  ->_SINK_
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>  ->_SINK_
<android.text.SpannableStringInternal: void setSpan(java.lang.Object,int,int,int)>  ->_SINK_
<android.text.style.CharacterStyle$Passthrough: void updateDrawState(android.text.TextPaint)>  ->_SINK_
<android.text.style.MetricAffectingSpan$Passthrough: void updateDrawState(android.text.TextPaint)>  ->_SINK_
<android.text.style.MetricAffectingSpan$Passthrough: void updateMeasureState(android.text.TextPaint)>  ->_SINK_
<android.app.AlertDialog: void setCustomTitle(android.view.View)>  ->_SINK_
<android.app.AlertDialog: void setView(android.view.View)>  ->_SINK_
<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)>  ->_SINK_
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)>  ->_SINK_
<android.app.AlertDialog: void setIcon(int)>  ->_SINK_
<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)>  ->_SINK_
<android.app.AlertDialog: void setIconAttribute(int)>  ->_SINK_
<android.app.AlertDialog: void setInverseBackgroundForced(boolean)>  ->_SINK_
<android.widget.PopupWindow$PopupViewContainer: boolean dispatchKeyEvent(android.view.KeyEvent)>  ->_SINK_
<android.widget.PopupWindow$PopupViewContainer: void sendAccessibilityEvent(int)>  ->_SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void bind(android.content.Context,int,android.content.Intent)>  ->_SINK_
<android.widget.ExpandableListView: void dispatchDraw(android.graphics.Canvas)>  ->_SINK_
<android.widget.ExpandableListView: boolean performItemClick(android.view.View,int,long)>  ->_SINK_
<android.widget.ExpandableListView: void setSelectedGroup(int)>  ->_SINK_
<android.widget.ExpandableListView: boolean setSelectedChild(int,int,boolean)>  ->_SINK_
<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)>  ->_SINK_
<android.widget.ListView: void setSelectionInt(int)>  ->_SINK_
<android.widget.ListView: void setCacheColorHint(int)>  ->_SINK_
<android.widget.ExpandableListView: void dispatchDraw(android.graphics.Canvas)>  ->_SINK_
<android.widget.OverScroller: void setFriction(float)>  ->_SINK_
<android.widget.OverScroller: void setFinalX(int)>  ->_SINK_
<android.widget.OverScroller: void setFinalY(int)>  ->_SINK_
<com.android.internal.widget.ActionBarView: void setSplitActionBar(boolean)>  ->_SINK_
<com.android.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)>  ->_SINK_
<com.android.internal.widget.AbsActionBarView: void setVisibility(int)>  ->_SINK_
<android.widget.TabWidget: void setDividerDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<android.widget.LinearLayout: void setWeightSum(float)>  ->_SINK_
<android.widget.LinearLayout: void setHorizontalGravity(int)>  ->_SINK_
<android.widget.LinearLayout: void setVerticalGravity(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuView: boolean invokeItem(com.android.internal.view.menu.MenuItemImpl)>  ->_SINK_
<com.android.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>  ->_SINK_
<android.animation.AnimatorSet$DependencyListener: void onAnimationEnd(android.animation.Animator)>  ->_SINK_
<android.animation.AnimatorSet$DependencyListener: void onAnimationStart(android.animation.Animator)>  ->_SINK_
<com.android.internal.widget.ActionBarView$HomeView: void setUp(boolean)>  ->_SINK_
<com.android.internal.widget.ActionBarView$HomeView: void setIcon(android.graphics.drawable.Drawable)>  ->_SINK_
<android.widget.Spinner: void setEnabled(boolean)>  ->_SINK_
<android.widget.Spinner: void setPromptId(int)>  ->_SINK_
<android.widget.ProgressBar: void setProgress(int)>  ->_SINK_
<android.widget.AbsSeekBar: void setMax(int)>  ->_SINK_
<android.widget.ProgressBar: void setInterpolator(android.content.Context,int)>  ->_SINK_
<android.widget.ProgressBar: void setVisibility(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setCheckable(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: com.android.internal.view.menu.ActionMenuItem setExclusiveCheckable(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setChecked(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setEnabled(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setTitle(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setVisible(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: void setShowAsAction(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionView(android.view.View)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionView(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setShowAsActionFlags(int)>  ->_SINK_
<com.android.internal.widget.ActionBarView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.HorizontalScrollView: void setOverScrollMode(int)>  ->_SINK_
<android.widget.HorizontalScrollView: void draw(android.graphics.Canvas)>  ->_SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setIntValues(int[])>  ->_SINK_
<android.animation.PropertyValuesHolder: void setIntValues(int[])>  ->_SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setFloatValues(float[])>  ->_SINK_
<android.animation.PropertyValuesHolder: void setFloatValues(float[])>  ->_SINK_
<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])>  ->_SINK_
<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>  ->_SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setupSetter(java.lang.Class)>  ->_SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setupSetter(java.lang.Class)>  ->_SINK_
<android.animation.PropertyValuesHolder: void setupSetter(java.lang.Class)>  ->_SINK_
<android.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder: void setupStartValue(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder: void setupEndValue(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: boolean startViewServer(int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void pauseKeyDispatching(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void resumeKeyDispatching(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setEventDispatching(boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppGroupId(android.os.IBinder,int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppOrientation(android.view.IApplicationToken,int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setFocusedApp(android.os.IBinder,boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int,boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,android.os.IBinder,boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppWillBeHidden(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAppVisibility(android.os.IBinder,boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void startAppFreezingScreen(android.os.IBinder,int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void stopAppFreezingScreen(android.os.IBinder,boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void removeAppToken(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void moveAppToken(int,android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void closeSystemDialogs(java.lang.String)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAnimationScale(int,float)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setAnimationScales(float[])>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setInTouchMode(boolean)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setStrictModeVisualIndicatorPreference(java.lang.String)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: int watchRotation(android.view.IRotationWatcher)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void freezeRotation(int)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void statusBarVisibilityChanged(int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setCheckable(boolean)>  ->_SINK_
<com.android.internal.view.menu.ListMenuItemView: void setCheckable(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setChecked(boolean)>  ->_SINK_
<com.android.internal.view.menu.ListMenuItemView: void setChecked(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setShortcut(boolean,char)>  ->_SINK_
<com.android.internal.view.menu.ListMenuItemView: void setShortcut(boolean,char)>  ->_SINK_
<com.android.internal.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)>  ->_SINK_
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<libcore.io.Streams: byte[] readFullyNoClose(java.io.InputStream)>  ->_SINK_
<libcore.io.Streams: java.lang.String readFully(java.io.Reader)>  ->_SINK_
<libcore.io.Streams: int copy(java.io.InputStream,java.io.OutputStream)>  ->_SINK_
<android.os.ServiceManagerProxy: android.os.IBinder checkService(java.lang.String)>  ->_SINK_
<android.os.ServiceManagerProxy: void setPermissionController(android.os.IPermissionController)>  ->_SINK_
<android.os.IPermissionController$Stub$Proxy: boolean checkPermission(java.lang.String,int,int)>  ->_SINK_
<android.widget.AdapterViewAnimator: void setDisplayedChild(int)>  ->_SINK_
<android.widget.AdapterViewAnimator: void setInAnimation(android.content.Context,int)>  ->_SINK_
<android.widget.AdapterViewAnimator: void setOutAnimation(android.content.Context,int)>  ->_SINK_
<android.widget.AdapterViewAnimator: void setRemoteViewsAdapter(android.content.Intent)>  ->_SINK_
<android.widget.AdapterViewAnimator: void setSelection(int)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void updateAppWidget(int,android.widget.RemoteViews)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void providerChanged(int,android.appwidget.AppWidgetProviderInfo)>  ->_SINK_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void viewDataChanged(int,int)>  ->_SINK_
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry: java.lang.Object setValue(java.lang.Object)>  ->_SINK_
<libcore.net.http.RequestHeaders: void setIfModifiedSince(java.util.Date)>  ->_SINK_
<libcore.net.http.AbstractHttpOutputStream: void write(int)>  ->_SINK_
<libcore.net.http.ChunkedOutputStream: void write(byte[],int,int)>  ->_SINK_
<libcore.net.http.HttpConnectionPool: void recycle(libcore.net.http.HttpConnection)>  ->_SINK_
<libcore.net.http.FixedLengthOutputStream: void write(byte[],int,int)>  ->_SINK_
<javax.net.ssl.SSLParameters: void setCipherSuites(java.lang.String[])>  ->_SINK_
<javax.net.ssl.SSLParameters: void setProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void setSessionTimeout(int)>  ->_SINK_
<java.util.jar.JarVerifier: void addMetaEntry(java.lang.String,byte[])>  ->_SINK_
<java.util.jar.JarVerifier$VerifierEntry: void write(int)>  ->_SINK_
<java.util.jar.JarVerifier$VerifierEntry: void write(byte[],int,int)>  ->_SINK_
<java.util.jar.JarFile$JarFileInputStream: int read(byte[],int,int)>  ->_SINK_
<java.util.zip.Inflater: void setDictionary(byte[])>  ->_SINK_
<java.util.zip.Inflater: void setDictionary(byte[],int,int)>  ->_SINK_
<java.util.zip.Inflater: void setInput(byte[])>  ->_SINK_
<java.util.zip.Inflater: int setFileInput(java.io.FileDescriptor,long,int)>  ->_SINK_
<java.net.Socks4Message: void setCommandOrResult(int)>  ->_SINK_
<java.net.Socks4Message: void setPort(int)>  ->_SINK_
<java.net.Socks4Message: void setIP(byte[])>  ->_SINK_
<java.net.Socks4Message: void setUserId(java.lang.String)>  ->_SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(int)>  ->_SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>  ->_SINK_
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer put(double)>  ->_SINK_
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer put(int,double)>  ->_SINK_
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer put(double[],int,int)>  ->_SINK_
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer put(float)>  ->_SINK_
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer put(int,float)>  ->_SINK_
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer put(float[],int,int)>  ->_SINK_
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(short)>  ->_SINK_
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(int,short)>  ->_SINK_
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(short[],int,int)>  ->_SINK_
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer put(int)>  ->_SINK_
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer put(int,int)>  ->_SINK_
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer put(int[],int,int)>  ->_SINK_
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer put(char)>  ->_SINK_
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer put(int,char)>  ->_SINK_
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer put(char[],int,int)>  ->_SINK_
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer put(long)>  ->_SINK_
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer put(int,long)>  ->_SINK_
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer put(long[],int,int)>  ->_SINK_
<org.apache.harmony.xml.dom.AttrImpl: void setPrefix(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setAttribute(java.lang.String,java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setPrefix(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setIdAttribute(java.lang.String,boolean)>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)>  ->_SINK_
<android.content.PeriodicSync: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.view.Surface$CompatibleCanvas: void setMatrix(android.graphics.Matrix)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void dataChanged(java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void clearBackupData(java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void agentDisconnected(java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupEnabled(boolean)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setAutoRestore(boolean)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupProvisioned(boolean)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: boolean setBackupPassword(java.lang.String,java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,java.lang.String[])>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String selectBackupTransport(java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void opComplete(int)>  ->_SINK_
<android.app.IBackupAgent$Stub$Proxy: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)>  ->_SINK_
<android.app.IBackupAgent$Stub$Proxy: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)>  ->_SINK_
<android.app.IBackupAgent$Stub$Proxy: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)>  ->_SINK_
<android.app.IBackupAgent$Stub$Proxy: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)>  ->_SINK_
<android.view.GLES20RenderLayer: void setTransform(android.graphics.Matrix)>  ->_SINK_
<android.view.GLES20TextureLayer: void setTransform(android.graphics.Matrix)>  ->_SINK_
<android.content.pm.IPackageMoveObserver$Stub$Proxy: void packageMoved(java.lang.String,int)>  ->_SINK_
<android.content.pm.IPackageDeleteObserver$Stub$Proxy: void packageDeleted(java.lang.String,int)>  ->_SINK_
<android.content.pm.IPackageInstallObserver$Stub$Proxy: void packageInstalled(java.lang.String,int)>  ->_SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.LogRecord)>  ->_SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)>  ->_SINK_
<java.util.logging.Logger: void setManager(java.util.logging.LogManager)>  ->_SINK_
<java.util.logging.Logger: void setLevel(java.util.logging.Level)>  ->_SINK_
<java.util.logging.Logger: void setParent(java.util.logging.Logger)>  ->_SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.LogRecord)>  ->_SINK_
<java.util.logging.Handler: void setEncoding(java.lang.String)>  ->_SINK_
<com.android.internal.os.AndroidPrintStream: void log(java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[])>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[],int,int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(char[])>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(char)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(double)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(float)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(long)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.Object)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(boolean)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println()>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(char[])>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(char)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(double)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(float)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(long)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.Object)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(boolean)>  ->_SINK_
<libcore.icu.RuleBasedCollatorICU: void setDecomposition(int)>  ->_SINK_
<libcore.icu.RuleBasedCollatorICU: void setStrength(int)>  ->_SINK_
<libcore.icu.RuleBasedCollatorICU: void setAttribute(int,int)>  ->_SINK_
<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)>  ->_SINK_
<android.os.IVibratorService$Stub$Proxy: void vibratePattern(long[],int,android.os.IBinder)>  ->_SINK_
<android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)>  ->_SINK_
<android.app.IUiModeManager$Stub$Proxy: void enableCarMode(int)>  ->_SINK_
<android.app.IUiModeManager$Stub$Proxy: void disableCarMode(int)>  ->_SINK_
<android.app.IUiModeManager$Stub$Proxy: void setNightMode(int)>  ->_SINK_
<com.android.internal.statusbar.StatusBarNotification: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setIcon(int,com.android.internal.statusbar.StatusBarIcon)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void removeIcon(int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void addNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void updateNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void removeNotification(android.os.IBinder)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void disable(int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)>  ->_SINK_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void setHardKeyboardStatus(boolean,boolean)>  ->_SINK_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)>  ->_SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>  ->_SINK_
<android.view.IWindow$Stub$Proxy: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.view.IWindow$Stub$Proxy: void closeSystemDialogs(java.lang.String)>  ->_SINK_
<android.view.IWindow$Stub$Proxy: void dispatchWallpaperOffsets(float,float,float,float,boolean)>  ->_SINK_
<android.view.IWindow$Stub$Proxy: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>  ->_SINK_
<android.view.IWindow$Stub$Proxy: void dispatchSystemUiVisibilityChanged(int,int,int,int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)>  ->_SINK_
<android.os.IMessenger$Stub$Proxy: void send(android.os.Message)>  ->_SINK_
<android.location.ICountryDetector$Stub$Proxy: void addCountryListener(android.location.ICountryListener)>  ->_SINK_
<android.location.ICountryDetector$Stub$Proxy: void removeCountryListener(android.location.ICountryListener)>  ->_SINK_
<android.nfc.INdefPushCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcTag$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>  ->_SINK_
<android.view.SurfaceView: void setVisibility(int)>  ->_SINK_
<android.view.SurfaceView: boolean setFrame(int,int,int,int)>  ->_SINK_
<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>  ->_SINK_
<android.view.SurfaceView: void setZOrderOnTop(boolean)>  ->_SINK_
<android.os.storage.IObbActionListener$Stub$Proxy: void onObbResult(java.lang.String,int,int)>  ->_SINK_
<android.os.storage.IMountServiceListener$Stub$Proxy: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.os.storage.IMountShutdownObserver$Stub$Proxy: void onShutDownComplete(int)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openDevice(java.lang.String)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setCurrentFunction(java.lang.String,boolean)>  ->_SINK_
<android.hardware.usb.IUsbManager$Stub$Proxy: void setMassStorageBackingFile(java.lang.String)>  ->_SINK_
<android.text.style.URLSpan: void onClick(android.view.View)>  ->_SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(com.android.internal.textservice.ISpellCheckerSessionListener)>  ->_SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellChecker(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellCheckerSubtype(java.lang.String,int)>  ->_SINK_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setSpellCheckerEnabled(boolean)>  ->_SINK_
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: void onServiceConnected(com.android.internal.textservice.ISpellCheckerSession)>  ->_SINK_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>  ->_SINK_
<android.util.Base64$Decoder: boolean process(byte[],int,int,boolean)>  ->_SINK_
<android.util.Base64$Decoder: boolean process(byte[],int,int,boolean)>  ->_SINK_
<android.util.Base64$Encoder: boolean process(byte[],int,int,boolean)>  ->_SINK_
<android.util.Base64$Encoder: boolean process(byte[],int,int,boolean)>  ->_SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)>  ->_SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)>  ->_SINK_
<org.apache.harmony.xml.ExpatParser$EntityParser: void startElement(java.lang.String,java.lang.String,java.lang.String,int,int)>  ->_SINK_
<org.apache.harmony.xml.ExpatParser: void startElement(java.lang.String,java.lang.String,java.lang.String,int,int)>  ->_SINK_
<org.apache.harmony.xml.ExpatParser: void startNamespace(java.lang.String,java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.ExpatParser: void startDtd(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void deleteSurroundingText(int,int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setComposingText(java.lang.CharSequence,int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void commitText(java.lang.CharSequence,int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setSelection(int,int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performEditorAction(int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performContextMenuAction(int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void clearMetaKeyStates(int)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void performPrivateCommand(java.lang.String,android.os.Bundle)>  ->_SINK_
<com.android.internal.view.IInputContext$Stub$Proxy: void setComposingRegion(int,int)>  ->_SINK_
<com.android.internal.os.IResultReceiver$Stub$Proxy: void send(int,android.os.Bundle)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void removeClient(com.android.internal.view.IInputMethodClient)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void finishInput(com.android.internal.view.IInputMethodClient)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setInputMethod(android.os.IBinder,java.lang.String)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void hideMySoftInput(android.os.IBinder,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showMySoftInput(android.os.IBinder,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void updateStatusIcon(android.os.IBinder,java.lang.String,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setImeWindowStatus(android.os.IBinder,int,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean switchToLastInputMethod(android.os.IBinder)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setInputMethodEnabled(java.lang.String,boolean)>  ->_SINK_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>  ->_SINK_
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: void finishedEvent(int,boolean)>  ->_SINK_
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: void sessionCreated(com.android.internal.view.IInputMethodSession)>  ->_SINK_
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)>  ->_SINK_
<android.inputmethodservice.IInputMethodSessionWrapper: void executeMessage(android.os.Message)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateSelection(int,int,int,int,int,int)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void displayCompletions(android.view.inputmethod.CompletionInfo[])>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void dispatchKeyEvent(int,android.view.KeyEvent,com.android.internal.view.IInputMethodCallback)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void dispatchTrackballEvent(int,android.view.MotionEvent,com.android.internal.view.IInputMethodCallback)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void appPrivateCommand(java.lang.String,android.os.Bundle)>  ->_SINK_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void toggleSoftInput(int,int)>  ->_SINK_
<android.media.IAudioFocusDispatcher$Stub$Proxy: void dispatchAudioFocusChange(int,java.lang.String)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setCurrentClientId(int,android.app.PendingIntent,boolean)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setPlaybackState(int,int,long)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setTransportControlFlags(int,int)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setMetadata(int,android.os.Bundle)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setArtwork(int,android.graphics.Bitmap)>  ->_SINK_
<android.media.IRemoteControlDisplay$Stub$Proxy: void setAllMetadata(int,android.os.Bundle,android.graphics.Bitmap)>  ->_SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void onInformationRequested(int,int,int,int)>  ->_SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void setCurrentClientGenerationId(int)>  ->_SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void plugRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.media.IRemoteControlClient$Stub$Proxy: void unplugRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>  ->_SINK_
<android.widget.ListPopupWindow: void setModal(boolean)>  ->_SINK_
<android.widget.ListPopupWindow: void setSoftInputMode(int)>  ->_SINK_
<android.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<android.widget.ListPopupWindow: void setAnimationStyle(int)>  ->_SINK_
<android.widget.ListPopupWindow: void setContentWidth(int)>  ->_SINK_
<android.widget.ListPopupWindow: void setInputMethodMode(int)>  ->_SINK_
<android.widget.ListPopupWindow: void setSelection(int)>  ->_SINK_
<android.widget.TextView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.inputmethodservice.ExtractEditText: void setExtractedText(android.view.inputmethod.ExtractedText)>  ->_SINK_
<android.inputmethodservice.ExtractEditText: void setSpan_internal(java.lang.Object,int,int,int)>  ->_SINK_
<android.inputmethodservice.ExtractEditText: void setCursorPosition_internal(int,int)>  ->_SINK_
<android.os.RegistrantList: void notifyException(java.lang.Throwable)>  ->_SINK_
<android.os.RegistrantList: void notifyResult(java.lang.Object)>  ->_SINK_
<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>  ->_SINK_
<android.os.Registrant: void notifyResult(java.lang.Object)>  ->_SINK_
<android.os.Registrant: void notifyException(java.lang.Throwable)>  ->_SINK_
<android.os.Registrant: void notifyRegistrant(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.SMSDispatcher: void handleSendComplete(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>  ->_SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)>  ->_SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])>  ->_SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>  ->_SINK_
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,int,boolean)>  ->_SINK_
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void disableDnsCheck(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyDisconnectP(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyOtaspChanged(int)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)>  ->_SINK_
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IccRecords: void setVoiceCallForwardingFlag(int,boolean)>  ->_SINK_
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataConnection(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DataConnectionTracker: void notifyDataConnection(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DataConnectionTracker: boolean setInternalDataEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IccFileHandler: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.SmsUsageMonitor: boolean check(java.lang.String,int)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDisconnect(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)>  ->_SINK_
<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>  ->_SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>  ->_SINK_
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>  ->_SINK_
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>  ->_SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int)>  ->_SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>  ->_SINK_
<com.android.internal.telephony.cat.CatService: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataConnection(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.RIL$RILSender: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IccCardStatus: void setCardState(int)>  ->_SINK_
<com.android.internal.telephony.IccCardStatus: void setUniversalPinState(int)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.AdnRecordCache: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOtaspChanged(int)>  ->_SINK_
<android.os.IRemoteCallback$Stub$Proxy: void sendResult(android.os.Bundle)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)>  ->_SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onFirstFix(int)>  ->_SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onSvStatusChanged(int,int[],float[],float[],float[],int,int,int)>  ->_SINK_
<android.location.IGpsStatusListener$Stub$Proxy: void onNmeaReceived(long,java.lang.String)>  ->_SINK_
<android.location.ILocationListener$Stub$Proxy: void onStatusChanged(java.lang.String,int,android.os.Bundle)>  ->_SINK_
<android.location.ILocationListener$Stub$Proxy: void onProviderEnabled(java.lang.String)>  ->_SINK_
<android.location.ILocationListener$Stub$Proxy: void onProviderDisabled(java.lang.String)>  ->_SINK_
<android.app.IAlarmManager$Stub$Proxy: void set(int,long,android.app.PendingIntent)>  ->_SINK_
<android.app.IAlarmManager$Stub$Proxy: void setRepeating(int,long,long,android.app.PendingIntent)>  ->_SINK_
<android.app.IAlarmManager$Stub$Proxy: void setInexactRepeating(int,long,long,android.app.PendingIntent)>  ->_SINK_
<android.app.IAlarmManager$Stub$Proxy: void setTime(long)>  ->_SINK_
<android.app.IAlarmManager$Stub$Proxy: void setTimeZone(java.lang.String)>  ->_SINK_
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)>  ->_SINK_
<android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)>  ->_SINK_
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting(int)>  ->_SINK_
<android.os.IPowerManager$Stub$Proxy: void crash(java.lang.String)>  ->_SINK_
<android.os.IPowerManager$Stub$Proxy: void setAttentionLight(boolean,int)>  ->_SINK_
<android.database.BulkCursorProxy: void onMove(int)>  ->_SINK_
<android.database.BulkCursorProxy: int requery(android.database.IContentObserver)>  ->_SINK_
<android.database.BulkCursorProxy: android.os.Bundle respond(android.os.Bundle)>  ->_SINK_
<android.database.BulkCursorNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(int)>  ->_SINK_
<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>  ->_SINK_
<java.security.KeyStore: void setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])>  ->_SINK_
<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void putSessionData(javax.net.ssl.SSLSession,byte[])>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1SequenceOf: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.x509.TBSCertificate: void dumpValue(java.lang.StringBuilder)>  ->_SINK_
<org.apache.harmony.security.x509.Extensions: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Sequence: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<java.security.Signature: void setParameter(java.lang.String,java.lang.Object)>  ->_SINK_
<org.apache.harmony.security.x509.Extension: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<android.view.animation.AnimationSet: void setFillAfter(boolean)>  ->_SINK_
<android.view.animation.AnimationSet: void setFillBefore(boolean)>  ->_SINK_
<android.view.animation.AnimationSet: void setRepeatMode(int)>  ->_SINK_
<android.view.animation.AnimationSet: void setStartOffset(long)>  ->_SINK_
<android.view.animation.AnimationSet: void setDuration(long)>  ->_SINK_
<android.view.animation.AnimationSet: void setStartTime(long)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void remove(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void performDeferredDestroy(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: boolean outOfMemory(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void setTransparentRegion(android.view.IWindow,android.graphics.Region)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void finishDrawing(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void setInTouchMode(boolean)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: boolean performHapticFeedback(android.view.IWindow,int,boolean)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void reportDropResult(android.view.IWindow,boolean)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void dragRecipientEntered(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void dragRecipientExited(android.view.IWindow)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void setWallpaperPosition(android.os.IBinder,float,float,float,float)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void wallpaperOffsetsComplete(android.os.IBinder)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)>  ->_SINK_
<android.view.IWindowSession$Stub$Proxy: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>  ->_SINK_
<com.android.internal.widget.IRemoteViewsFactory$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy: void onServiceConnected(android.os.IBinder)>  ->_SINK_
<android.widget.ExpandableListView$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.OverScroller$SplineOverScroller: void notifyEdgeReached(int,int,int)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setCheckable(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setChecked(boolean)>  ->_SINK_
<com.android.internal.view.menu.ActionMenuItemView: void setShortcut(boolean,char)>  ->_SINK_
<android.widget.ProgressBar$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.animation.Keyframe$IntKeyframe: void setValue(java.lang.Object)>  ->_SINK_
<android.animation.Keyframe$FloatKeyframe: void setValue(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setFloatValues(float[])>  ->_SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setupSetter(java.lang.Class)>  ->_SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setIntValues(int[])>  ->_SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setupSetter(java.lang.Class)>  ->_SINK_
<android.view.IRotationWatcher$Stub$Proxy: void onRotationChanged(int)>  ->_SINK_
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>  ->_SINK_
<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponent(android.content.ComponentName)>  ->_SINK_
<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int)>  ->_SINK_
<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>  ->_SINK_
<android.os.IPermissionController$Stub$Proxy: boolean checkPermission(java.lang.String,int,int)>  ->_SINK_
<android.widget.AdapterViewAnimator$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<javax.net.ssl.SSLContext: void setDefault(javax.net.ssl.SSLContext)>  ->_SINK_
<libcore.net.http.AbstractHttpInputStream: void cacheWrite(byte[],int,int)>  ->_SINK_
<java.util.Vector: void setElementAt(java.lang.Object,int)>  ->_SINK_
<org.apache.harmony.xml.dom.NodeImpl: void setNodeValue(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.AttrImpl: void setPrefix(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.ElementImpl: void setPrefix(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.NodeImpl: void setPrefix(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.NodeImpl: void setTextContent(java.lang.String)>  ->_SINK_
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)>  ->_SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl: void setParameter(java.lang.String,java.lang.Object)>  ->_SINK_
<org.apache.harmony.xml.dom.CharacterDataImpl: void setData(java.lang.String)>  ->_SINK_
<java.util.concurrent.atomic.AtomicLong: void lazySet(long)>  ->_SINK_
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.IBackupAgent$Stub$Proxy: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)>  ->_SINK_
<android.app.IBackupAgent$Stub$Proxy: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)>  ->_SINK_
<android.app.IBackupAgent$Stub$Proxy: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)>  ->_SINK_
<android.app.IBackupAgent$Stub$Proxy: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)>  ->_SINK_
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: void onBackupPackage(java.lang.String)>  ->_SINK_
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: void onRestorePackage(java.lang.String)>  ->_SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreAll(long,android.app.backup.IRestoreObserver)>  ->_SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreSome(long,android.app.backup.IRestoreObserver,java.lang.String[])>  ->_SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)>  ->_SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)>  ->_SINK_
<com.android.internal.logging.AndroidHandler$1: java.lang.String format(java.util.logging.LogRecord)>  ->_SINK_
<com.android.internal.logging.AndroidHandler$1: java.lang.String format(java.util.logging.LogRecord)>  ->_SINK_
<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream$1: void write(int)>  ->_SINK_
<java.text.CollationElementIterator: void setOffset(int)>  ->_SINK_
<java.text.CollationElementIterator: void setText(java.lang.String)>  ->_SINK_
<libcore.icu.CollationElementIteratorICU: void setText(java.lang.String)>  ->_SINK_
<libcore.icu.CollationElementIteratorICU: void setOffset(int)>  ->_SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setFindAccessibilityNodeInfosResult(java.util.List,int)>  ->_SINK_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void setPerformAccessibilityActionResult(boolean,int)>  ->_SINK_
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.database.ContentObservable: void notifyChange(boolean)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle open(java.lang.String,android.os.IBinder)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void setCardEmulationRoute(java.lang.String,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void authenticate(java.lang.String,byte[])>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int close(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int connect(int,int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int reconnect(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefWrite(int,android.nfc.NdefMessage)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefMakeReadOnly(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean ndefIsWritable(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int formatNdef(int,byte[])>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int setTimeout(int,int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean canMakeReadOnly(int)>  ->_SINK_
<android.nfc.tech.IsoDep: void setTimeout(int)>  ->_SINK_
<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)>  ->_SINK_
<android.nfc.tech.NfcF: void setTimeout(int)>  ->_SINK_
<android.nfc.tech.MifareUltralight: void setTimeout(int)>  ->_SINK_
<android.nfc.tech.MifareClassic: void increment(int,int)>  ->_SINK_
<android.nfc.tech.MifareClassic: void decrement(int,int)>  ->_SINK_
<android.nfc.tech.MifareClassic: void setTimeout(int)>  ->_SINK_
<android.nfc.tech.NfcA: void setTimeout(int)>  ->_SINK_
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: void onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>  ->_SINK_
<org.apache.harmony.xml.ExpatParser$EntityParser: void startElement(java.lang.String,java.lang.String,java.lang.String,int,int)>  ->_SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setTextBeforeCursor(java.lang.CharSequence,int)>  ->_SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setTextAfterCursor(java.lang.CharSequence,int)>  ->_SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setCursorCapsMode(int,int)>  ->_SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setExtractedText(android.view.inputmethod.ExtractedText,int)>  ->_SINK_
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void setSelectedText(java.lang.CharSequence,int)>  ->_SINK_
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onError(int,java.lang.String)>  ->_SINK_
<java.text.BreakIterator: void setText(java.lang.String)>  ->_SINK_
<java.text.RuleBasedBreakIterator: void setText(java.text.CharacterIterator)>  ->_SINK_
<android.text.style.TextAppearanceSpan: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.text.style.TextAppearanceSpan: void updateDrawState(android.text.TextPaint)>  ->_SINK_
<android.text.PackedIntVector: void setValue(int,int,int)>  ->_SINK_
<android.text.PackedObjectVector: void setValue(int,int,java.lang.Object)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void setExtractViewShown(boolean)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void setCandidatesViewShown(boolean)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void setCandidatesView(android.view.View)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void sendDownUpKeyEvents(int)>  ->_SINK_
<android.inputmethodservice.InputMethodService: boolean sendDefaultEditorAction(boolean)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void sendKeyChar(char)>  ->_SINK_
<android.inputmethodservice.InputMethodService: boolean onExtractTextContextMenuItem(int)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onSignalStrengthChanged(int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCallStateChanged(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataConnectionStateChanged(int,int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataActivity(int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onOtaspChanged(int)>  ->_SINK_
<com.android.internal.telephony.AdnRecordLoader: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.SmsHeader: byte[] toByteArray(com.android.internal.telephony.SmsHeader)>  ->_SINK_
<android.provider.Telephony$Sms: boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)>  ->_SINK_
<android.preference.PreferenceFragment: void setPreferenceScreen(android.preference.PreferenceScreen)>  ->_SINK_
<android.preference.PreferenceGroup: void setEnabled(boolean)>  ->_SINK_
<android.preference.Preference: void notifyDependencyChange(boolean)>  ->_SINK_
<android.preference.Preference: boolean persistString(java.lang.String)>  ->_SINK_
<android.preference.Preference: boolean persistInt(int)>  ->_SINK_
<android.preference.Preference: boolean persistFloat(float)>  ->_SINK_
<android.preference.Preference: boolean persistLong(long)>  ->_SINK_
<android.preference.Preference: boolean persistBoolean(boolean)>  ->_SINK_
<android.preference.GenericInflater: java.lang.Object createItem(java.lang.String,java.lang.String,android.util.AttributeSet)>  ->_SINK_
<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void reqSetLinkPropertiesHttpProxy(android.net.ProxyProperties)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void setLinkPropertiesHttpProxySync(android.net.ProxyProperties)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void reqUpdateLinkPropertiesDataCallState(com.android.internal.telephony.DataCallState)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void reqAddApnContext(com.android.internal.telephony.ApnContext)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void addApnContextSync(com.android.internal.telephony.ApnContext)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void reqRemomveApnContext(com.android.internal.telephony.ApnContext)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void removeApnContextSync(com.android.internal.telephony.ApnContext)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void reqSetReconnectIntent(android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void setReconnectIntentSync(android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[])>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setMute(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSuppServiceNotifications(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallWaiting(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendUSSD(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaSubscriptionSource(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<android.net.rtp.AudioGroup: void sendDtmf(int)>  ->_SINK_
<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)>  ->_SINK_
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCalling(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRingingBack(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEnded(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallBusy(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onError(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistering(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationDone(android.net.sip.ISipSession,int)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationTimeout(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void setListener(android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void register(int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setSecure(boolean)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setHeader(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setHost(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setMAddrParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setPort(int)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setTTLParam(int)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setTransportParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setUser(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setUserParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setUserPassword(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setMethodParam(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void sendStartDecodingMessageParams(com.android.internal.telephony.cat.RilMessage)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void sendMsgParamsDecoded(com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.CommandParams)>  ->_SINK_
<com.android.internal.telephony.cat.CommandParams: boolean setIcon(android.graphics.Bitmap)>  ->_SINK_
<com.android.internal.telephony.cat.ResponseData: void writeLength(java.io.ByteArrayOutputStream,int)>  ->_SINK_
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)>  ->_SINK_
<com.android.internal.telephony.cat.Input: boolean setIcon(android.graphics.Bitmap)>  ->_SINK_
<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setDataConnection(com.android.internal.telephony.DataConnection)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setDataConnectionAc(com.android.internal.telephony.DataConnectionAc)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setApnSetting(com.android.internal.telephony.ApnSetting)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setWaitingApns(java.util.ArrayList)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setReason(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setDependencyMet(boolean)>  ->_SINK_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm8BitUnpackedToString(byte[],int,int,java.lang.String)>  ->_SINK_
<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)>  ->_SINK_
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,long)>  ->_SINK_
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,java.lang.Object,long)>  ->_SINK_
<com.android.internal.util.StateMachine: void sendMessageDelayed(android.os.Message,long)>  ->_SINK_
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(android.os.Message)>  ->_SINK_
<com.android.internal.util.StateMachine: void setDbg(boolean)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.util.StateMachine$SmHandler$HaltingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.util.StateMachine$SmHandler$QuittingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.util.StateMachine$SmHandler$HaltingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.util.StateMachine$SmHandler$QuittingState: boolean processMessage(android.os.Message)>  ->_SINK_
<javax.sip.SipFactory: javax.sip.SipStack createSipStack(java.util.Properties)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)>  ->_SINK_
<android.location.Address: void setAddressLine(int,java.lang.String)>  ->_SINK_
<android.location.Address: void setExtras(android.os.Bundle)>  ->_SINK_
<android.database.BulkCursorProxy: void onMove(int)>  ->_SINK_
<android.database.BulkCursorProxy: int requery(android.database.IContentObserver)>  ->_SINK_
<android.database.BulkCursorProxy: android.os.Bundle respond(android.os.Bundle)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1SetOf: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Implicit: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Any: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.x501.AttributeTypeAndValue$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.x509.ReasonFlags$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1BitString: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1OctetString: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1GeneralizedTime: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1UTCTime: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1StringType: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1SequenceOf: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1SetOf: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Explicit: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Sequence: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Set: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Integer: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Oid$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Oid: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Boolean: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Enumerated: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.x509.ReasonFlags$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1BitString: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Integer: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Implicit: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Explicit: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.x509.CertificateIssuer: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.CertificateIssuer: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.ExtendedKeyUsage: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.IssuingDistributionPoint: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.AlternativeName: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.NameConstraints: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.CRLDistributionPoints: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.CertificatePolicies: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.ExtensionValue: void dumpValue(java.lang.StringBuilder)>  ->_SINK_
<org.apache.harmony.security.x509.ExtendedKeyUsage: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Oid$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Oid: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Any: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.x509.IssuingDistributionPoint: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Boolean: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1OctetString: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.x509.AlternativeName: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.NameConstraints: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.CRLDistributionPoints: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.CertificatePolicies: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.crypto.internal.NullCipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)>  ->_SINK_
<org.apache.harmony.crypto.internal.NullCipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)>  ->_SINK_
<android.widget.ScrollView: void setOverScrollMode(int)>  ->_SINK_
<android.widget.ScrollView: void draw(android.graphics.Canvas)>  ->_SINK_
<android.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>  ->_SINK_
<android.widget.SimpleCursorAdapter: void setViewText(android.widget.TextView,java.lang.String)>  ->_SINK_
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy: void onServiceConnected(android.os.IBinder)>  ->_SINK_
<com.android.internal.view.menu.ListMenuItemView: void setCheckable(boolean)>  ->_SINK_
<com.android.internal.view.menu.ListMenuItemView: void setChecked(boolean)>  ->_SINK_
<com.android.internal.view.menu.ListMenuItemView: void setShortcut(boolean,char)>  ->_SINK_
<com.android.internal.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)>  ->_SINK_
<android.widget.AbsSpinner$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.animation.Keyframe$IntKeyframe: void setValue(java.lang.Object)>  ->_SINK_
<android.animation.Keyframe$FloatKeyframe: void setValue(java.lang.Object)>  ->_SINK_
<android.util.IntProperty: void set(java.lang.Object,java.lang.Integer)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnabledCipherSuites(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnabledProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnableSessionCreation(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setNeedClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setUseClientMode(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setWantClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)>  ->_SINK_
<javax.net.ssl.SSLEngine: void setSSLParameters(javax.net.ssl.SSLParameters)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: void set(org.apache.harmony.xml.dom.DOMConfigurationImpl,java.lang.Object)>  ->_SINK_
<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: void set(org.apache.harmony.xml.dom.DOMConfigurationImpl,java.lang.Object)>  ->_SINK_
<android.content.SyncManager$ActiveSyncContext: void sendHeartbeat()>  ->_SINK_
<android.content.SyncManager$ActiveSyncContext: void toString(java.lang.StringBuilder)>  ->_SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>  ->_SINK_
<android.content.SyncManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>  ->_SINK_
<android.content.SyncManager: void dumpSyncState(java.io.PrintWriter)>  ->_SINK_
<android.content.SyncManager: void dumpSyncHistory(java.io.PrintWriter)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void dataChanged(java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void clearBackupData(java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void agentDisconnected(java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupEnabled(boolean)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setAutoRestore(boolean)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupProvisioned(boolean)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: boolean setBackupPassword(java.lang.String,java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,java.lang.String[])>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String selectBackupTransport(java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)>  ->_SINK_
<android.app.backup.IBackupManager$Stub$Proxy: void opComplete(int)>  ->_SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreSetsAvailable(android.app.backup.RestoreSet[])>  ->_SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreSetsAvailable(android.app.backup.RestoreSet[])>  ->_SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreStarting(int)>  ->_SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreStarting(int)>  ->_SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void onUpdate(int,java.lang.String)>  ->_SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreFinished(int)>  ->_SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreFinished(int)>  ->_SINK_
<android.app.backup.IRestoreSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<java.text.MessageFormat: void setFormatByArgumentIndex(int,java.text.Format)>  ->_SINK_
<java.text.MessageFormat: void setFormatsByArgumentIndex(java.text.Format[])>  ->_SINK_
<java.text.MessageFormat: java.lang.Object[] parse(java.lang.String,java.text.ParsePosition)>  ->_SINK_
<java.text.MessageFormat: void setFormat(int,java.text.Format)>  ->_SINK_
<java.text.MessageFormat: void setFormats(java.text.Format[])>  ->_SINK_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>  ->_SINK_
<libcore.icu.NativeBreakIterator: void setText(java.lang.String)>  ->_SINK_
<java.text.RuleBasedBreakIterator: void setText(java.text.CharacterIterator)>  ->_SINK_
<android.util.Patterns: java.lang.String concatGroups(java.util.regex.Matcher)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.inputmethodservice.SoftInputWindow: void setSize(int)>  ->_SINK_
<android.inputmethodservice.SoftInputWindow: void setGravity(int)>  ->_SINK_
<android.preference.PreferenceActivity: boolean onPreferenceStartFragment(android.preference.PreferenceFragment,android.preference.Preference)>  ->_SINK_
<android.preference.PreferenceGroup: void setEnabled(boolean)>  ->_SINK_
<android.preference.PreferenceScreen$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>  ->_SINK_
<java.util.concurrent.ConcurrentHashMap$WriteThroughEntry: java.lang.Object setValue(java.lang.Object)>  ->_SINK_
<android.net.TrafficStats: void setThreadStatsTag(int)>  ->_SINK_
<android.net.TrafficStats: void setThreadStatsUid(int)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: int processMessage(java.lang.String,java.lang.String,android.content.Intent)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean addPackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean updatePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean deletePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAddress(java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setEncryption(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setBandwidth(java.lang.String,int)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: void writeExternal(java.io.ObjectOutput)>  ->_SINK_
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: void writeExternal(java.io.ObjectOutput)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.References: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.Item: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.IntRangeManager: boolean enableRange(int,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IntRangeManager: boolean disableRange(int,int,java.lang.String)>  ->_SINK_
<com.android.internal.util.StateMachine$SmHandler$HaltingState: boolean processMessage(android.os.Message)>  ->_SINK_
<gov.nist.javax.sip.SipStackImpl: javax.sip.ListeningPoint createListeningPoint(java.lang.String,int,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: void setPrettyEncoding(boolean)>  ->_SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: void setDefaultContentEncodingCharset(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.HeaderFactoryImpl: void setPrettyEncoding(boolean)>  ->_SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: void setDefaultContentEncodingCharset(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setIsdnSubAddress(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setPhoneContext(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setPhoneNumber(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setPostDial(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setGlobal(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseTag(com.android.internal.telephony.gsm.SimTlv,int)>  ->_SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseEf(com.android.internal.telephony.gsm.SimTlv,java.util.Map,int)>  ->_SINK_
<android.widget.GridView: void setRemoteViewsAdapter(android.content.Intent)>  ->_SINK_
<android.widget.GridView: void setSelectionInt(int)>  ->_SINK_
<org.apache.harmony.security.x501.AttributeTypeAndValue$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.x509.ReasonFlags$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1BitString: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1OctetString: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1GeneralizedTime: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1UTCTime: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1StringType: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Set: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.BitString: void setBit(int,boolean)>  ->_SINK_
<org.apache.harmony.security.x509.ReasonFlags$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1GeneralizedTime: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1UTCTime: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Oid$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.x509.DistributionPointName: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.harmony.security.asn1.ASN1Enumerated: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<org.apache.harmony.security.x509.DistributionPoint: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<android.text.format.DateUtils: java.lang.String writeDateTime(java.util.Calendar,boolean)>  ->_SINK_
<android.content.SyncResult: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>  ->_SINK_
<android.content.ISyncAdapter$Stub$Proxy: void cancelSync(android.content.ISyncContext)>  ->_SINK_
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.SyncManager$ActiveSyncContext: void sendHeartbeat()>  ->_SINK_
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: void onBackupPackage(java.lang.String)>  ->_SINK_
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: void onRestorePackage(java.lang.String)>  ->_SINK_
<android.app.backup.IRestoreObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreAll(long,android.app.backup.IRestoreObserver)>  ->_SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreSome(long,android.app.backup.IRestoreObserver,java.lang.String[])>  ->_SINK_
<android.app.backup.IRestoreSession$Stub$Proxy: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)>  ->_SINK_
<java.text.ChoiceFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>  ->_SINK_
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)>  ->_SINK_
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setTitle(int)>  ->_SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setSubtitle(int)>  ->_SINK_
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setCustomView(android.view.View)>  ->_SINK_
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)>  ->_SINK_
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)>  ->_SINK_
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)>  ->_SINK_
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCalling(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRingingBack(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEnded(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallBusy(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onError(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistering(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationDone(android.net.sip.ISipSession,int)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationTimeout(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void setListener(android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void register(int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)>  ->_SINK_
<com.android.i18n.phonenumbers.RegexCache$LRUCache: void put(java.lang.Object,java.lang.Object)>  ->_SINK_
<com.android.internal.util.StateMachine$SmHandler$QuittingState: boolean processMessage(android.os.Message)>  ->_SINK_
<gov.nist.javax.sip.header.AcceptEncoding: void setQValue(float)>  ->_SINK_
<gov.nist.javax.sip.header.Accept: void setQValue(float)>  ->_SINK_
<gov.nist.javax.sip.header.AcceptLanguage: void setAcceptLanguage(java.util.Locale)>  ->_SINK_
<gov.nist.javax.sip.header.AcceptLanguage: void setLanguageRange(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AcceptLanguage: void setQValue(float)>  ->_SINK_
<gov.nist.javax.sip.header.CSeq: void setMethod(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setCNonce(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setNextNonce(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setNonceCount(int)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setQop(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setResponse(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.InReplyTo: void setCallId(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.CallID: void setCallId(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.CallInfo: void setPurpose(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setExpires(int)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setQValue(float)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)>  ->_SINK_
<gov.nist.javax.sip.header.ContentDisposition: void setHandling(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ContentLanguage: void setLanguageTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ContentLength: void setContentLength(int)>  ->_SINK_
<gov.nist.javax.sip.header.ContentType: void setContentType(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.SIPDateHeader: void setDate(java.util.Calendar)>  ->_SINK_
<gov.nist.javax.sip.header.Event: void setEventId(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.SIPIfMatch: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.SIPETag: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.SessionExpires: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PPreferredService: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Replaces: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.MinSE: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityVerify: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PMediaAuthorization: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.ServiceRoute: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PPreferredIdentity: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PUserDatabase: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Join: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PProfileKey: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PCalledPartyID: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAssertedIdentity: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.Path: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.Privacy: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.ReferredBy: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PServedUser: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityClient: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityServer: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAssociatedURI: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAssertedService: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.References: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.From: void setTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.RAck: void setCSeqNumber(int)>  ->_SINK_
<gov.nist.javax.sip.header.RAck: void setRSeqNumber(int)>  ->_SINK_
<gov.nist.javax.sip.header.CSeq: void setSeqNumber(long)>  ->_SINK_
<gov.nist.javax.sip.header.CSeq: void setSequenceNumber(int)>  ->_SINK_
<gov.nist.javax.sip.header.RSeq: void setSequenceNumber(int)>  ->_SINK_
<gov.nist.javax.sip.header.Reason: void setCause(int)>  ->_SINK_
<gov.nist.javax.sip.header.Reason: void setText(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.RetryAfter: void setDuration(int)>  ->_SINK_
<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)>  ->_SINK_
<gov.nist.javax.sip.header.To: void setTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setHost(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setMAddr(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setPort(int)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setProtocol(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setReceived(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setTTL(int)>  ->_SINK_
<gov.nist.javax.sip.header.ErrorInfo: void setErrorMessage(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Replaces: void setToTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Replaces: void setFromTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Join: void setToTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Join: void setFromTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setCGI3GPP(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setUtranCellID3GPP(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setDSLLocation(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setCI3GPP2(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setChargingCollectionFunctionAddress(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setEventChargingFunctionAddress(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setICID(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setICIDGeneratedAt(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setOriginatingIOI(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setTerminatingIOI(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setVisitedNetworkID(gov.nist.core.Token)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PServedUser: void setSessionCase(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PServedUser: void setRegistrationState(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PPreferredService: void setSubserviceIdentifiers(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.SessionExpires: void setRefresher(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.References: void setRel(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setExpires(int)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setQValue(float)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setSipInstanceParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setPubGruuParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setTempGruuParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setChargingCollectionFunctionAddress(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setEventChargingFunctionAddress(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PPreferredService: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PPreferredService: void setSubserviceIdentifiers(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Replaces: void setToTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Replaces: void setFromTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Replaces: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.CallInfo: void setPurpose(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ContentType: void setContentType(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ContentType: void setContentType(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ContentType: void setContentSubType(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.From: void setTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ErrorInfo: void setErrorMessage(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.CallID: void setCallId(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.MinSE: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.SIPIfMatch: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityVerify: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setProtocolVersion(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setHost(gov.nist.core.Host)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setHost(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setPort(int)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setProtocol(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setTTL(int)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setMAddr(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setReceived(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PMediaAuthorization: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AcceptLanguage: void setLanguageRange(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AcceptLanguage: void setQValue(float)>  ->_SINK_
<gov.nist.javax.sip.header.AcceptLanguage: void setAcceptLanguage(java.util.Locale)>  ->_SINK_
<gov.nist.javax.sip.header.ims.ServiceRoute: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PPreferredIdentity: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PUserDatabase: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Join: void setToTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Join: void setFromTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.Join: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.RSeq: void setSequenceNumber(int)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PProfileKey: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setVisitedNetworkID(gov.nist.core.Token)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.To: void setTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Reason: void setCause(int)>  ->_SINK_
<gov.nist.javax.sip.header.Reason: void setText(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.RAck: void setCSeqNumber(int)>  ->_SINK_
<gov.nist.javax.sip.header.RAck: void setRSeqNumber(int)>  ->_SINK_
<gov.nist.javax.sip.header.AcceptEncoding: void setQValue(float)>  ->_SINK_
<gov.nist.javax.sip.header.SIPETag: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PCalledPartyID: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAssertedIdentity: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.Path: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.Privacy: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Accept: void setContentSubType(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Accept: void setContentType(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Accept: void setQValue(float)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.SessionExpires: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.SessionExpires: void setRefresher(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ContentLanguage: void setLanguageTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.ReferredBy: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setICID(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setICIDGeneratedAt(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setOriginatingIOI(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setTerminatingIOI(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PChargingVector: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PServedUser: void setRegistrationState(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PServedUser: void setSessionCase(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PServedUser: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.SIPDateHeader: void setDate(java.util.Calendar)>  ->_SINK_
<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)>  ->_SINK_
<gov.nist.javax.sip.header.RetryAfter: void setDuration(int)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setCGI3GPP(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setUtranCellID3GPP(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setDSLLocation(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setCI3GPP2(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setParameter(java.lang.String,java.lang.Object)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ContentLength: void setContentLength(int)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setCNonce(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setNextNonce(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setNonceCount(int)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setQop(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setResponse(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.InReplyTo: void setCallId(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityClient: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityServer: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAssociatedURI: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.CSeq: void setSeqNumber(long)>  ->_SINK_
<gov.nist.javax.sip.header.CSeq: void setSequenceNumber(int)>  ->_SINK_
<gov.nist.javax.sip.header.CSeq: void setMethod(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAssertedService: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.References: void setRel(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.References: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.References: void setValue(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ContentDisposition: void setHandling(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Event: void setEventId(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setScheme(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setUserPassword(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setUser(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setDefaultParm(java.lang.String,java.lang.Object)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setHost(gov.nist.core.Host)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setUriParm(java.lang.String,java.lang.Object)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setMAddr(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setUserParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setMethod(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setIsdnSubAddress(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setPort(int)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setQHeader(gov.nist.core.NameValue)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setUriParameter(gov.nist.core.NameValue)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setHostPort(gov.nist.core.HostPort)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setHeader(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setHost(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setMAddrParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setMethodParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setSecure(boolean)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setTTLParam(int)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setTransportParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setGrParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.AddressImpl: void setUser(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setGlobal(boolean)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setIsdnSubAddress(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setPostDial(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setPhoneNumber(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelURLImpl: void setPhoneContext(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPRequest: void setMethod(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPResponse: void setStatusCode(int)>  ->_SINK_
<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.ListeningPointImpl: void setSentBy(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.ListeningPointImpl: void sendHeartbeat(java.lang.String,int)>  ->_SINK_
<gov.nist.javax.sip.SipProviderImpl: void setListeningPoint(javax.sip.ListeningPoint)>  ->_SINK_
<gov.nist.javax.sip.SipProviderImpl: void sendRequest(javax.sip.message.Request)>  ->_SINK_
<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)>  ->_SINK_
<gov.nist.javax.sip.message.MessageFactoryImpl: void setDefaultContentEncodingCharset(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPRequest: byte[] encodeAsBytes(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPMessage: void attachHeader(gov.nist.javax.sip.header.SIPHeader,boolean,boolean)>  ->_SINK_
<gov.nist.javax.sip.message.SIPMessage: void setHeader(gov.nist.javax.sip.header.SIPHeaderList)>  ->_SINK_
<gov.nist.javax.sip.message.SIPMessage: void setCallId(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPMessage: void setMessageContent(java.lang.String,java.lang.String,byte[])>  ->_SINK_
<gov.nist.javax.sip.message.SIPMessage: void setFromTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPMessage: void setToTag(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPResponse: void setSIPVersion(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPRequest: void setSIPVersion(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPResponse: void setStatusCode(int)>  ->_SINK_
<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPResponse: void setSIPVersion(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPRequest: void setMethod(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPRequest: byte[] encodeAsBytes(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPRequest: void setSIPVersion(java.lang.String)>  ->_SINK_
<org.apache.harmony.security.x509.ReasonFlags$1: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>  ->_SINK_
<android.widget.CompoundButton$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>  ->_SINK_
<android.content.ISyncAdapter$Stub$Proxy: void cancelSync(android.content.ISyncContext)>  ->_SINK_
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreSetsAvailable(android.app.backup.RestoreSet[])>  ->_SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreStarting(int)>  ->_SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void onUpdate(int,java.lang.String)>  ->_SINK_
<android.app.backup.IRestoreObserver$Stub$Proxy: void restoreFinished(int)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.inputmethodservice.IInputMethodSessionWrapper: void executeMessage(android.os.Message)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean setSelection(int,int)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean performEditorAction(int)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean performContextMenuAction(int)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean setComposingRegion(int,int)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)>  ->_SINK_
<com.android.internal.view.InputConnectionWrapper: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void attachToken(android.os.IBinder)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void startInput(com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void restartInput(com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void createSession(com.android.internal.view.IInputMethodCallback)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void setSessionEnabled(com.android.internal.view.IInputMethodSession,boolean)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void revokeSession(com.android.internal.view.IInputMethodSession)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void showSoftInput(int,android.os.ResultReceiver)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void hideSoftInput(int,android.os.ResultReceiver)>  ->_SINK_
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)>  ->_SINK_
<java.io.CharArrayWriter: void write(char[],int,int)>  ->_SINK_
<java.io.CharArrayWriter: void write(int)>  ->_SINK_
<java.io.CharArrayWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(char)>  ->_SINK_
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)>  ->_SINK_
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: int processMessage(java.lang.String,java.lang.String,android.content.Intent)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean addPackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean updatePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean deletePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.core.NameValueList: void set(gov.nist.core.NameValue)>  ->_SINK_
<gov.nist.core.NameValueList: void set(java.lang.String,java.lang.Object)>  ->_SINK_
<gov.nist.core.NameValueList: gov.nist.core.NameValue put(java.lang.String,gov.nist.core.NameValue)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationInfo: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.extensions.References: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setQuotedParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,int)>  ->_SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,boolean)>  ->_SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,float)>  ->_SINK_
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setParameter(java.lang.String,java.lang.Object)>  ->_SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,java.lang.Object)>  ->_SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(gov.nist.core.NameValue)>  ->_SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setMultiParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ParametersHeader: void setMultiParameter(gov.nist.core.NameValue)>  ->_SINK_
<gov.nist.core.DuplicateNameValueList: void set(gov.nist.core.NameValue)>  ->_SINK_
<gov.nist.core.DuplicateNameValueList: void set(java.lang.String,java.lang.Object)>  ->_SINK_
<gov.nist.core.DuplicateNameValueList: gov.nist.core.NameValue put(java.lang.String,gov.nist.core.NameValue)>  ->_SINK_
<gov.nist.core.GenericObject: void dbgPrint(java.lang.String)>  ->_SINK_
<gov.nist.core.LexerCore: void addKeyword(java.lang.String,int)>  ->_SINK_
<gov.nist.core.LexerCore: java.util.Hashtable addLexer(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setEncryptionAlgorithm(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setAlgorithm(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setProtocol(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setMode(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setSPIClient(int)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setSPIServer(int)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setPortClient(int)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setPortServer(int)>  ->_SINK_
<gov.nist.javax.sip.header.ims.SecurityAgree: void setPreference(float)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setChallenge(gov.nist.javax.sip.header.Challenge)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setRealm(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setNonce(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setAlgorithm(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setQop(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setOpaque(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setDomain(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setStale(boolean)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setCNonce(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setNonceCount(int)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setResponse(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setUsername(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setIK(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setCK(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.AuthenticationHeader: void setIntegrityProtected(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Protocol: void setProtocol(java.lang.String)>  ->_SINK_
<gov.nist.core.Host: void setHostname(java.lang.String)>  ->_SINK_
<gov.nist.core.Host: void setHostAddress(java.lang.String)>  ->_SINK_
<gov.nist.core.Host: void setAddress(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Accept: void setContentSubType(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ContentType: void setContentSubType(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Accept: void setContentType(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.ContentType: void setContentType(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelephoneNumber: void setPostDial(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelephoneNumber: void setParm(java.lang.String,java.lang.Object)>  ->_SINK_
<gov.nist.javax.sip.address.TelephoneNumber: void setIsdnSubaddress(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.TelephoneNumber: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.parser.ParserFactory: gov.nist.javax.sip.parser.HeaderParser createParser(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.NameMap: void addExtensionHeader(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.SipUri: void setGrParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.Authority: void setPassword(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.Authority: void setUser(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.address.Authority: void setHost(gov.nist.core.Host)>  ->_SINK_
<gov.nist.javax.sip.address.Authority: void setPort(int)>  ->_SINK_
<gov.nist.javax.sip.message.SIPRequest: void setSIPVersion(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.SIPResponse: void setSIPVersion(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendRequest(javax.sip.ClientTransaction)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendAck(javax.sip.message.Request)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendReliableProvisionalResponse(javax.sip.message.Response)>  ->_SINK_
<gov.nist.core.InternalErrorHandler: void handleException(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.message.HeaderIterator: void set(java.lang.Object)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void putPendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void setHostAddress(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void addForkedClientTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void attachToken(android.os.IBinder)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void startInput(com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void restartInput(com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void createSession(com.android.internal.view.IInputMethodCallback)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void setSessionEnabled(com.android.internal.view.IInputMethodSession,boolean)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void revokeSession(com.android.internal.view.IInputMethodSession)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void showSoftInput(int,android.os.ResultReceiver)>  ->_SINK_
<com.android.internal.view.IInputMethod$Stub$Proxy: void hideSoftInput(int,android.os.ResultReceiver)>  ->_SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)>  ->_SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)>  ->_SINK_
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)>  ->_SINK_
<gov.nist.core.GenericObjectList: boolean match(java.lang.Object)>  ->_SINK_
<gov.nist.core.MultiValueMapImpl: java.util.List put(java.lang.String,java.lang.Object)>  ->_SINK_
<gov.nist.core.MultiValueMapImpl: java.util.List put(java.lang.String,java.util.List)>  ->_SINK_
<gov.nist.core.ParserCore: void dbg_enter(java.lang.String)>  ->_SINK_
<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)>  ->_SINK_
<gov.nist.core.ParserCore: void peekLine(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Challenge: void setParameter(gov.nist.core.NameValue)>  ->_SINK_
<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void setState(javax.sip.TransactionState)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void setMapped(boolean)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void setState(int)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendAck(javax.sip.message.Request)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendRequest(javax.sip.ClientTransaction)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendRequest(javax.sip.ClientTransaction,boolean)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void setResponseTags(gov.nist.javax.sip.message.SIPResponse)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void setLastResponse(gov.nist.javax.sip.stack.SIPTransaction,gov.nist.javax.sip.message.SIPResponse)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void startRetransmitTimer(gov.nist.javax.sip.stack.SIPServerTransaction,javax.sip.message.Response)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPDialog: void sendReliableProvisionalResponse(javax.sip.message.Response)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void setState(javax.sip.TransactionState)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.SipProviderImpl: void sendRequest(javax.sip.message.Request)>  ->_SINK_
<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)>  ->_SINK_
<gov.nist.javax.sip.SipProviderImpl: void setListeningPoint(javax.sip.ListeningPoint)>  ->_SINK_
<gov.nist.javax.sip.ListeningPointImpl: void setSentBy(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.ListeningPointImpl: void sendHeartbeat(java.lang.String,int)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>  ->_SINK_
<gov.nist.javax.sip.DialogFilter: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>  ->_SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>  ->_SINK_
<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,javax.sip.address.Hop)>  ->_SINK_
<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int)>  ->_SINK_
<gov.nist.javax.sip.DialogFilter: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>  ->_SINK_
<gov.nist.javax.sip.DialogFilter: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress,int)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress,int)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: void cacheMessageChannel(gov.nist.javax.sip.stack.TCPMessageChannel)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress,int)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: void cacheMessageChannel(gov.nist.javax.sip.stack.TLSMessageChannel)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress,int)>  ->_SINK_
<gov.nist.javax.sip.SipStackImpl: void <init>(java.util.Properties)>  ->_SINK_
<gov.nist.javax.sip.SipStackImpl: javax.sip.ListeningPoint createListeningPoint(java.lang.String,int,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>  ->_SINK_
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,java.lang.String,boolean)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnabledCipherSuites(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnabledCipherSuites(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnabledProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnabledProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setNeedClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setNeedClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setWantClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setWantClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setUseClientMode(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setUseClientMode(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnableSessionCreation(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnableSessionCreation(boolean)>  ->_SINK_
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)>  ->_SINK_
<java.net.MulticastSocket: void setInterface(java.net.InetAddress)>  ->_SINK_
<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)>  ->_SINK_
<java.net.MulticastSocket: void setTimeToLive(int)>  ->_SINK_
<java.net.MulticastSocket: void setTTL(byte)>  ->_SINK_
<java.net.MulticastSocket: void setLoopbackMode(boolean)>  ->_SINK_
<gov.nist.javax.sip.ListeningPointImpl: void sendHeartbeat(java.lang.String,int)>  ->_SINK_
<gov.nist.javax.sip.stack.TCPMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.stack.TLSMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)>  ->_SINK_
<gov.nist.javax.sip.clientauthutils.CredentialsCache: void cacheAuthorizationHeader(java.lang.String,javax.sip.header.AuthorizationHeader,int)>  ->_SINK_
<gov.nist.javax.sip.DialogFilter: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>  ->_SINK_
<gov.nist.javax.sip.DialogFilter: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>  ->_SINK_
<gov.nist.javax.sip.DialogFilter: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>  ->_SINK_
<android.app.LocalActivityManager: android.view.Window startActivity(java.lang.String,android.content.Intent)>  ->_SINK_
<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)>  ->_SINK_
<android.app.LocalActivityManager: void dispatchPause(boolean)>  ->_SINK_
<android.app.LocalActivityManager: void dispatchDestroy(boolean)>  ->_SINK_
<android.widget.DatePicker: void setMinDate(long)>  ->_SINK_
<android.widget.DatePicker: void setMaxDate(long)>  ->_SINK_
<android.widget.DatePicker: void setCalendarViewShown(boolean)>  ->_SINK_
<android.widget.DatePicker: void setSpinnersShown(boolean)>  ->_SINK_
<android.app.DatePickerDialog: void updateDate(int,int,int)>  ->_SINK_
<android.widget.NumberPicker: void setEnabled(boolean)>  ->_SINK_
<android.widget.NumberPicker: void setValue(int)>  ->_SINK_
<android.widget.CalendarView: void setEnabled(boolean)>  ->_SINK_
<android.widget.CalendarView: void setMinDate(long)>  ->_SINK_
<android.widget.CalendarView: void setMaxDate(long)>  ->_SINK_
<android.widget.CalendarView: void setDate(long)>  ->_SINK_
<android.widget.CalendarView: void setDate(long,boolean,boolean)>  ->_SINK_
<android.widget.DatePicker$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.CalendarView$WeeksAdapter: void setSelectedDay(java.util.Calendar)>  ->_SINK_
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.ExpandableListActivity: void onRestoreInstanceState(android.os.Bundle)>  ->_SINK_
<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)>  ->_SINK_
<android.app.ExpandableListActivity: void setSelectedGroup(int)>  ->_SINK_
<android.preference.PreferenceActivity: void onRestoreInstanceState(android.os.Bundle)>  ->_SINK_
<android.app.ListActivity: void onRestoreInstanceState(android.os.Bundle)>  ->_SINK_
<android.app.ListActivity: void setSelection(int)>  ->_SINK_
<android.app.ListFragment: void setSelection(int)>  ->_SINK_
<android.app.ListFragment: void setListShown(boolean)>  ->_SINK_
<android.app.ListFragment: void setListShownNoAnimation(boolean)>  ->_SINK_
<android.app.TabActivity: void onRestoreInstanceState(android.os.Bundle)>  ->_SINK_
<android.widget.TabHost: void sendAccessibilityEvent(int)>  ->_SINK_
<android.widget.TabWidget: void setDividerDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<android.widget.TabWidget: void setDividerDrawable(int)>  ->_SINK_
<android.widget.TabWidget: void setLeftStripDrawable(int)>  ->_SINK_
<android.widget.TabWidget: void setRightStripDrawable(int)>  ->_SINK_
<android.widget.TabWidget: void setEnabled(boolean)>  ->_SINK_
<android.widget.TabWidget: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.app.backup.BackupAgentHelper: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.app.backup.BackupAgentHelper: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.app.backup.BackupHelperDispatcher: void addHelper(java.lang.String,android.app.backup.BackupHelper)>  ->_SINK_
<android.app.backup.BackupHelperDispatcher: void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.app.backup.RestoreSession: int restoreSome(long,android.app.backup.RestoreObserver,java.lang.String[])>  ->_SINK_
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)>  ->_SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreSetsAvailable(android.app.backup.RestoreSet[])>  ->_SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreStarting(int)>  ->_SINK_
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreFinished(int)>  ->_SINK_
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)>  ->_SINK_
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)>  ->_SINK_
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setDeviceOutOfBandData(byte[],byte[])>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setPasskey(int)>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)>  ->_SINK_
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)>  ->_SINK_
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>  ->_SINK_
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)>  ->_SINK_
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.BluetoothOutputStream: void write(int)>  ->_SINK_
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)>  ->_SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>  ->_SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)>  ->_SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)>  ->_SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.test.InstrumentationTestCase: void sendKeys(java.lang.String)>  ->_SINK_
<android.test.InstrumentationTestCase: void sendKeys(int[])>  ->_SINK_
<android.test.InstrumentationTestCase: void sendRepeatedKeys(int[])>  ->_SINK_
<junit.runner.BaseTestRunner: void setPreference(java.lang.String,java.lang.String)>  ->_SINK_
<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)>  ->_SINK_
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.database.MatrixCursor: void addRow(java.lang.Object[])>  ->_SINK_
<android.database.MatrixCursor: void addRow(java.lang.Iterable)>  ->_SINK_
<android.database.MatrixCursor: void addRow(java.util.ArrayList,int)>  ->_SINK_
<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)>  ->_SINK_
<android.media.MediaRecorder: void setCaptureRate(double)>  ->_SINK_
<android.media.MediaRecorder: void setOrientationHint(int)>  ->_SINK_
<android.media.MediaRecorder: void setLocation(float,float)>  ->_SINK_
<android.media.MediaRecorder: void setAudioSamplingRate(int)>  ->_SINK_
<android.media.MediaRecorder: void setAudioChannels(int)>  ->_SINK_
<android.media.MediaRecorder: void setAudioEncodingBitRate(int)>  ->_SINK_
<android.media.MediaRecorder: void setVideoEncodingBitRate(int)>  ->_SINK_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)>  ->_SINK_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.lang.String)>  ->_SINK_
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[])>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(int)>  ->_SINK_
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>  ->_SINK_
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setJpegThumbnailQuality(int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setJpegQuality(int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setPreviewFrameRate(int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setPreviewFormat(int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setPictureFormat(int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setRotation(int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setGpsLatitude(double)>  ->_SINK_
<android.hardware.Camera$Parameters: void setGpsLongitude(double)>  ->_SINK_
<android.hardware.Camera$Parameters: void setGpsAltitude(double)>  ->_SINK_
<android.hardware.Camera$Parameters: void setGpsTimestamp(long)>  ->_SINK_
<android.hardware.Camera$Parameters: void setGpsProcessingMethod(java.lang.String)>  ->_SINK_
<android.hardware.Camera$Parameters: void setWhiteBalance(java.lang.String)>  ->_SINK_
<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)>  ->_SINK_
<android.hardware.Camera$Parameters: void setAntibanding(java.lang.String)>  ->_SINK_
<android.hardware.Camera$Parameters: void setSceneMode(java.lang.String)>  ->_SINK_
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>  ->_SINK_
<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)>  ->_SINK_
<android.hardware.Camera$Parameters: void setExposureCompensation(int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setAutoExposureLock(boolean)>  ->_SINK_
<android.hardware.Camera$Parameters: void setAutoWhiteBalanceLock(boolean)>  ->_SINK_
<android.hardware.Camera$Parameters: void setZoom(int)>  ->_SINK_
<android.hardware.Camera$Parameters: void setRecordingHint(boolean)>  ->_SINK_
<android.hardware.Camera$Parameters: void setVideoStabilization(boolean)>  ->_SINK_
<android.graphics.ColorMatrix: void set(android.graphics.ColorMatrix)>  ->_SINK_
<android.graphics.ColorMatrix: void set(float[])>  ->_SINK_
<android.graphics.ColorMatrix: void setScale(float,float,float,float)>  ->_SINK_
<android.graphics.ColorMatrix: void setRotate(int,float)>  ->_SINK_
<android.graphics.ColorMatrix: void setConcat(android.graphics.ColorMatrix,android.graphics.ColorMatrix)>  ->_SINK_
<android.graphics.ColorMatrix: void setSaturation(float)>  ->_SINK_
<android.graphics.drawable.PaintDrawable: void setCornerRadius(float)>  ->_SINK_
<android.graphics.drawable.PaintDrawable: void setCornerRadii(float[])>  ->_SINK_
<android.graphics.pdf.PdfDocument: void writeTo(java.io.OutputStream)>  ->_SINK_
<android.inputmethodservice.KeyboardView: boolean setShifted(boolean)>  ->_SINK_
<android.inputmethodservice.KeyboardView: void setVerticalCorrection(int)>  ->_SINK_
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)>  ->_SINK_
<android.media.IMediaScannerListener$Stub$Proxy: void scanCompleted(java.lang.String,android.net.Uri)>  ->_SINK_
<android.media.IMediaScannerListener$Stub$Proxy: void scanCompleted(java.lang.String,android.net.Uri)>  ->_SINK_
<android.media.IMediaScannerService$Stub$Proxy: void requestScanFile(java.lang.String,java.lang.String,android.media.IMediaScannerListener)>  ->_SINK_
<android.media.IMediaScannerService$Stub$Proxy: void scanFile(java.lang.String,java.lang.String)>  ->_SINK_
<android.media.IMediaScannerService$Stub$Proxy: void requestScanFile(java.lang.String,java.lang.String,android.media.IMediaScannerListener)>  ->_SINK_
<android.media.IMediaScannerService$Stub$Proxy: void scanFile(java.lang.String,java.lang.String)>  ->_SINK_
<android.media.MediaFile: void addFileType(java.lang.String,int,java.lang.String)>  ->_SINK_
<android.media.MediaFile: void addFileType(java.lang.String,int,java.lang.String,int)>  ->_SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map)>  ->_SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)>  ->_SINK_
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>  ->_SINK_
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>  ->_SINK_
<android.media.MediaPlayer: void setSurface(android.view.Surface)>  ->_SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>  ->_SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>  ->_SINK_
<android.media.MediaPlayer: void setDataSource(java.lang.String)>  ->_SINK_
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)>  ->_SINK_
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>  ->_SINK_
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>  ->_SINK_
<android.media.MediaPlayer: boolean setParameter(int,java.lang.String)>  ->_SINK_
<android.media.MediaPlayer: boolean setParameter(int,int)>  ->_SINK_
<android.webkit.HTML5VideoViewProxy: void onPrepared(android.media.MediaPlayer)>  ->_SINK_
<android.media.MiniThumbFile: void saveMiniThumbToFile(byte[],long,long)>  ->_SINK_
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>  ->_SINK_
<android.provider.DrmStore: android.content.Intent addDrmFile(android.content.ContentResolver,java.io.FileInputStream,java.lang.String)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache: org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache usingDirectory(java.io.File)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnabledCipherSuites(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnabledProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setUseClientMode(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setNeedClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setWantClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnableSessionCreation(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnableSessionCreation(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnabledProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnabledCipherSuites(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setWantClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setNeedClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setUseClientMode(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoLinger(boolean,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTcpNoDelay(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setReuseAddress(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setKeepAlive(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTrafficClass(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoTimeout(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSendBufferSize(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setReceiveBufferSize(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void putSessionData(javax.net.ssl.SSLSession,byte[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnabledCipherSuites(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnabledProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setUseClientMode(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setNeedClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setWantClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnableSessionCreation(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoLinger(boolean,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTcpNoDelay(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setReuseAddress(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setKeepAlive(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTrafficClass(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoTimeout(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSendBufferSize(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setReceiveBufferSize(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnabledCipherSuites(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnabledProtocols(java.lang.String[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setUseClientMode(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setNeedClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setWantClientAuth(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnableSessionCreation(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void sendUrgentData(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setOOBInline(boolean)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void writeAppData(byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: void alert(byte,byte)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void send(org.apache.harmony.xnet.provider.jsse.Message)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void alert(byte,byte)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(java.lang.String)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ClientHello: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ServerHello: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateMessage: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateRequest: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ServerHelloDone: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateVerify: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.Finished: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ClientHello: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ServerHello: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateMessage: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateRequest: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ServerHelloDone: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.CertificateVerify: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.Finished: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.DigitalSignature: void update(byte[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] encrypt(byte,byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] encrypt(byte,byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] decrypt(byte,byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] decrypt(byte,byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] encrypt(byte,byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] decrypt(byte,byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: void <init>(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] encrypt(byte,byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] decrypt(byte,byte[],int,int)>  ->_SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.entity.StringEntity: void writeTo(java.io.OutputStream)>  ->_SINK_
<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)>  ->_SINK_
<org.apache.http.message.BasicHttpResponse: void setStatusCode(int)>  ->_SINK_
<org.apache.http.message.BasicHttpResponse: void setReasonPhrase(java.lang.String)>  ->_SINK_
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(int)>  ->_SINK_
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.Deflater: void setDictionary(byte[])>  ->_SINK_
<java.util.zip.Deflater: void setDictionary(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setIdleDuration(long,java.util.concurrent.TimeUnit)>  ->_SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void openCompleted(boolean,org.apache.http.params.HttpParams)>  ->_SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>  ->_SINK_
<org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])>  ->_SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void openCompleted(boolean,org.apache.http.params.HttpParams)>  ->_SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>  ->_SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setSocketTimeout(int)>  ->_SINK_
<org.apache.http.impl.SocketHttpClientConnection: void setSocketTimeout(int)>  ->_SINK_
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.SocketHttpClientConnection: void setSocketTimeout(int)>  ->_SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[])>  ->_SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(int)>  ->_SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(int)>  ->_SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[])>  ->_SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setSocketTimeout(int)>  ->_SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setIdleDuration(long,java.util.concurrent.TimeUnit)>  ->_SINK_
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.message.BasicHttpResponse: void setStatusCode(int)>  ->_SINK_
<org.apache.http.message.BasicHttpResponse: void setReasonPhrase(java.lang.String)>  ->_SINK_
<org.apache.http.impl.cookie.BasicClientCookie: void setDomain(java.lang.String)>  ->_SINK_
<org.apache.http.impl.cookie.BasicClientCookie: void setDomain(java.lang.String)>  ->_SINK_
<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)>  ->_SINK_
<org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)>  ->_SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[])>  ->_SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(int)>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(int)>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[])>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[])>  ->_SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)>  ->_SINK_
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)>  ->_SINK_
<android.net.http.Headers: void setContentType(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setContentEncoding(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setLocation(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setContentDisposition(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setAcceptRanges(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setExpires(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setCacheControl(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setLastModified(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setEtag(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)>  ->_SINK_
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)>  ->_SINK_
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>  ->_SINK_
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)>  ->_SINK_
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void data(byte[],int)>  ->_SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[])>  ->_SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[],int,int)>  ->_SINK_
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)>  ->_SINK_
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)>  ->_SINK_
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)>  ->_SINK_
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)>  ->_SINK_
<android.webkit.CookieManager: void setAcceptCookie(boolean)>  ->_SINK_
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.WebView: void setOverScrollMode(int)>  ->_SINK_
<android.webkit.WebView: void setScrollBarStyle(int)>  ->_SINK_
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>  ->_SINK_
<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)>  ->_SINK_
<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)>  ->_SINK_
<android.webkit.WebView: void savePassword(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.WebView: void setNetworkAvailable(boolean)>  ->_SINK_
<android.webkit.WebView: boolean restorePicture(android.os.Bundle,java.io.File)>  ->_SINK_
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)>  ->_SINK_
<android.webkit.WebView: void loadUrl(java.lang.String)>  ->_SINK_
<android.webkit.WebView: void saveWebArchive(java.lang.String)>  ->_SINK_
<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)>  ->_SINK_
<android.webkit.WebView: void setInitialScale(int)>  ->_SINK_
<android.webkit.WebView: boolean setFrame(int,int,int,int)>  ->_SINK_
<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)>  ->_SINK_
<android.webkit.WebView: void setBackgroundColor(int)>  ->_SINK_
<android.webkit.WebChromeClient: void setupAutoFill(android.os.Message)>  ->_SINK_
<android.webkit.WebSettings: void setNavDump(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setAllowContentAccess(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setTextZoom(int)>  ->_SINK_
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setUseDoubleTree(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setUserAgent(int)>  ->_SINK_
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setMinimumFontSize(int)>  ->_SINK_
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)>  ->_SINK_
<android.webkit.WebSettings: void setDefaultFontSize(int)>  ->_SINK_
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>  ->_SINK_
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setPluginsEnabled(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setPluginsPath(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setDatabasePath(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setAppCacheEnabled(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setAppCachePath(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setAppCacheMaxSize(long)>  ->_SINK_
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>  ->_SINK_
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setUserAgentString(java.lang.String)>  ->_SINK_
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)>  ->_SINK_
<android.webkit.CallbackProxy: boolean uiOverrideUrlLoading(java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: void onPageStarted(java.lang.String,android.graphics.Bitmap)>  ->_SINK_
<android.webkit.CallbackProxy: void onReceivedError(int,java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: void onFormResubmission(android.os.Message,android.os.Message)>  ->_SINK_
<android.webkit.CallbackProxy: boolean shouldOverrideUrlLoading(java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: void onReceivedHttpAuthRequest(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: void onReceivedSslError(android.webkit.SslErrorHandler,android.net.http.SslError)>  ->_SINK_
<android.webkit.CallbackProxy: void onReceivedClientCertRequest(android.webkit.ClientCertRequestHandler,java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: void onScaleChanged(float,float)>  ->_SINK_
<android.webkit.CallbackProxy: void onReceivedLoginRequest(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: boolean onSavePassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<android.webkit.CallbackProxy: void onReceivedHttpAuthCredentials(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: void onJsAlert(java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: boolean onJsConfirm(java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: java.lang.String onJsPrompt(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: boolean onJsBeforeUnload(java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.CallbackProxy: void addMessageToConsole(java.lang.String,int,java.lang.String,int)>  ->_SINK_
<android.webkit.WebStorage: void setQuotaForOrigin(java.lang.String,long)>  ->_SINK_
<android.webkit.ZoomManager: void setInitialScaleInPercent(int)>  ->_SINK_
<android.webkit.ZoomManager: void setZoomScale(float,boolean)>  ->_SINK_
<android.webkit.ZoomManager: void restoreZoomState(android.os.Bundle)>  ->_SINK_
<android.webkit.ZoomManager: void setHardwareAccelerated()>  ->_SINK_
<android.webkit.WebViewCore: void setMockDeviceOrientation(boolean,double,boolean,double,boolean,double)>  ->_SINK_
<android.webkit.HTML5VideoViewProxy: void onPrepared(android.media.MediaPlayer)>  ->_SINK_
<android.webkit.HTML5VideoViewProxy: void setBaseLayer(int)>  ->_SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String,int)>  ->_SINK_
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String)>  ->_SINK_
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String,int)>  ->_SINK_
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String)>  ->_SINK_
<android.speech.tts.TextToSpeech: int setSpeechRate(float)>  ->_SINK_
<android.speech.tts.TextToSpeech: int setPitch(float)>  ->_SINK_
<android.webkit.OverScrollGlow: boolean drawEdgeGlows(android.graphics.Canvas)>  ->_SINK_
<android.webkit.FindActionModeCallback: void setText(java.lang.String)>  ->_SINK_
<android.webkit.JWebCoreJavaBridge: void storeFilePathForContentUri(java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.SslCertLookupTable: void setIsAllowed(android.net.http.SslError)>  ->_SINK_
<android.security.Credentials: void install(android.content.Context,java.security.KeyPair)>  ->_SINK_
<android.security.Credentials: void install(android.content.Context,java.lang.String,byte[])>  ->_SINK_
<android.webkit.DeviceMotionAndOrientationManager: void setMockOrientation(boolean,double,boolean,double,boolean,double)>  ->_SINK_
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void data(byte[],int)>  ->_SINK_
<android.provider.Browser: void saveBookmark(android.content.Context,java.lang.String,java.lang.String)>  ->_SINK_
<android.provider.Browser: void sendString(android.content.Context,java.lang.String)>  ->_SINK_
<android.provider.Browser: void sendString(android.content.Context,java.lang.String,java.lang.String)>  ->_SINK_
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>  ->_SINK_
<android.speech.tts.TtsEngines: void updateLocalePrefForEngine(java.lang.String,java.lang.String)>  ->_SINK_
<org.json.JSONArray: org.json.JSONArray put(int,boolean)>  ->_SINK_
<org.json.JSONArray: org.json.JSONArray put(int,double)>  ->_SINK_
<org.json.JSONArray: org.json.JSONArray put(int,int)>  ->_SINK_
<org.json.JSONArray: org.json.JSONArray put(int,long)>  ->_SINK_
<org.json.JSONArray: org.json.JSONObject toJSONObject(org.json.JSONArray)>  ->_SINK_
<org.json.JSONArray: java.lang.String toString(int)>  ->_SINK_
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>  ->_SINK_
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>  ->_SINK_
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>  ->_SINK_
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>  ->_SINK_
<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>  ->_SINK_
<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>  ->_SINK_
<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>  ->_SINK_
<org.json.JSONObject: java.lang.String toString(int)>  ->_SINK_
<android.security.KeyChain: void choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],java.lang.String,int,java.lang.String)>  ->_SINK_
<android.widget.ZoomControls: void setZoomSpeed(long)>  ->_SINK_
<android.widget.ZoomControls: void setIsZoomInEnabled(boolean)>  ->_SINK_
<android.widget.ZoomControls: void setIsZoomOutEnabled(boolean)>  ->_SINK_
<android.widget.ZoomButtonsController: void setZoomInEnabled(boolean)>  ->_SINK_
<android.widget.ZoomButtonsController: void setZoomOutEnabled(boolean)>  ->_SINK_
<android.widget.ZoomButtonsController: void setZoomSpeed(long)>  ->_SINK_
<android.widget.ZoomButtonsController: void setFocusable(boolean)>  ->_SINK_
<android.webkit.HTML5VideoView: void setVideoURI(java.lang.String,android.webkit.HTML5VideoViewProxy)>  ->_SINK_
<android.webkit.HTML5VideoView: void setOnCompletionListener(android.webkit.HTML5VideoViewProxy)>  ->_SINK_
<android.webkit.HTML5VideoView: void setOnErrorListener(android.webkit.HTML5VideoViewProxy)>  ->_SINK_
<android.webkit.HTML5VideoView: void setOnInfoListener(android.webkit.HTML5VideoViewProxy)>  ->_SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int loadLanguage(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.speech.tts.ITextToSpeechService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onStart(java.lang.String)>  ->_SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onDone(java.lang.String)>  ->_SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onError(java.lang.String)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: void installCertificate(java.security.cert.X509Certificate)>  ->_SINK_
<android.security.IKeyChainService$Stub$Proxy: void installCaCertificate(byte[])>  ->_SINK_
<android.security.IKeyChainService$Stub$Proxy: boolean deleteCaCertificate(java.lang.String)>  ->_SINK_
<android.security.IKeyChainService$Stub$Proxy: void setGrant(int,java.lang.String,boolean)>  ->_SINK_
<android.security.IKeyChainService$Stub$Proxy: boolean hasGrant(int,java.lang.String)>  ->_SINK_
<android.widget.ZoomButton: void setEnabled(boolean)>  ->_SINK_
<android.widget.MediaController: void setEnabled(boolean)>  ->_SINK_
<android.provider.BrowserContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>  ->_SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onStart(java.lang.String)>  ->_SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onDone(java.lang.String)>  ->_SINK_
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void onError(java.lang.String)>  ->_SINK_
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int loadLanguage(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.security.IKeyChainAliasCallback$Stub$Proxy: void alias(java.lang.String)>  ->_SINK_
<android.security.IKeyChainService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.provider.SyncStateContract$Helpers: void set(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])>  ->_SINK_
<android.provider.SyncStateContract$Helpers: void update(android.content.ContentProviderClient,android.net.Uri,byte[])>  ->_SINK_
<android.security.IKeyChainAliasCallback$Stub$Proxy: void alias(java.lang.String)>  ->_SINK_
<android.security.IKeyChainService$Stub$Proxy: void installCaCertificate(byte[])>  ->_SINK_
<android.security.IKeyChainService$Stub$Proxy: boolean deleteCaCertificate(java.lang.String)>  ->_SINK_
<android.security.IKeyChainService$Stub$Proxy: void setGrant(int,java.lang.String,boolean)>  ->_SINK_
<android.security.IKeyChainService$Stub$Proxy: boolean hasGrant(int,java.lang.String)>  ->_SINK_
<android.widget.AbsSeekBar: void setMax(int)>  ->_SINK_
<android.opengl.GLSurfaceView: void setEGLConfigChooser(boolean)>  ->_SINK_
<android.opengl.GLSurfaceView: void setEGLConfigChooser(int,int,int,int,int,int)>  ->_SINK_
<android.opengl.GLSurfaceView: void setRenderMode(int)>  ->_SINK_
<android.opengl.GLSurfaceView$LogWriter: void write(char[],int,int)>  ->_SINK_
<android.os.FileObserver$ObserverThread: int startWatching(java.lang.String,int,android.os.FileObserver)>  ->_SINK_
<android.preference.TwoStatePreference: void setSummaryOn(int)>  ->_SINK_
<android.preference.TwoStatePreference: void setSummaryOff(int)>  ->_SINK_
<android.preference.TwoStatePreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.DialogPreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.DialogPreference: void setDialogTitle(int)>  ->_SINK_
<android.preference.DialogPreference: void setDialogMessage(int)>  ->_SINK_
<android.preference.DialogPreference: void setDialogIcon(int)>  ->_SINK_
<android.preference.DialogPreference: void setPositiveButtonText(int)>  ->_SINK_
<android.preference.DialogPreference: void setNegativeButtonText(int)>  ->_SINK_
<android.preference.EditTextPreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.EditTextPreference: void setText(java.lang.String)>  ->_SINK_
<android.preference.ListPreference: void setValueIndex(int)>  ->_SINK_
<android.preference.ListPreference$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.preference.PreferenceActivity: void setListFooter(android.view.View)>  ->_SINK_
<android.preference.PreferenceActivity: void onRestoreInstanceState(android.os.Bundle)>  ->_SINK_
<android.preference.PreferenceActivity: android.content.Intent onBuildStartFragmentIntent(java.lang.String,android.os.Bundle,int,int)>  ->_SINK_
<android.preference.PreferenceActivity: void startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int)>  ->_SINK_
<android.preference.PreferenceActivity: void startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int,int,int)>  ->_SINK_
<android.preference.PreferenceActivity: void startPreferencePanel(java.lang.String,android.os.Bundle,int,java.lang.CharSequence,android.app.Fragment,int)>  ->_SINK_
<android.preference.PreferenceActivity: boolean onPreferenceStartFragment(android.preference.PreferenceFragment,android.preference.Preference)>  ->_SINK_
<android.preference.PreferenceActivity: void setPreferenceScreen(android.preference.PreferenceScreen)>  ->_SINK_
<android.preference.PreferenceActivity$Header: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)>  ->_SINK_
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>  ->_SINK_
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>  ->_SINK_
<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: void writeExternal(java.io.ObjectOutput)>  ->_SINK_
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: void writeExternal(java.io.ObjectOutput)>  ->_SINK_
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: void writeExternal(java.io.ObjectOutput)>  ->_SINK_
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>  ->_SINK_
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>  ->_SINK_
<android.renderscript.Allocation: void setFromFieldPacker(int,android.renderscript.FieldPacker)>  ->_SINK_
<android.renderscript.Allocation: void setFromFieldPacker(int,int,android.renderscript.FieldPacker)>  ->_SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onRmsChanged(float)>  ->_SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onBufferReceived(byte[])>  ->_SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onError(int)>  ->_SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onEvent(int,android.os.Bundle)>  ->_SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onRmsChanged(float)>  ->_SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onBufferReceived(byte[])>  ->_SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onError(int)>  ->_SINK_
<android.speech.IRecognitionListener$Stub$Proxy: void onEvent(int,android.os.Bundle)>  ->_SINK_
<android.speech.IRecognitionService$Stub$Proxy: void startListening(android.content.Intent,android.speech.IRecognitionListener)>  ->_SINK_
<android.speech.IRecognitionService$Stub$Proxy: void stopListening(android.speech.IRecognitionListener)>  ->_SINK_
<android.speech.IRecognitionService$Stub$Proxy: void cancel(android.speech.IRecognitionListener)>  ->_SINK_
<android.speech.IRecognitionService$Stub$Proxy: void startListening(android.content.Intent,android.speech.IRecognitionListener)>  ->_SINK_
<android.speech.IRecognitionService$Stub$Proxy: void stopListening(android.speech.IRecognitionListener)>  ->_SINK_
<android.speech.IRecognitionService$Stub$Proxy: void cancel(android.speech.IRecognitionListener)>  ->_SINK_
<android.speech.IRecognitionService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)>  ->_SINK_
<android.support.v13.app.FragmentCompat$ICSFragmentCompatImpl: void setMenuVisibility(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat$BaseFragmentCompatImpl: void setMenuVisibility(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat$ICSMR1FragmentCompatImpl: void setUserVisibleHint(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat$BaseFragmentCompatImpl: void setUserVisibleHint(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat$ICSFragmentCompatImpl: void setMenuVisibility(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat$BaseFragmentCompatImpl: void setMenuVisibility(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat$ICSMR1FragmentCompatImpl: void setUserVisibleHint(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat$BaseFragmentCompatImpl: void setUserVisibleHint(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat: void setMenuVisibility(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat: void setUserVisibleHint(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat$ICSFragmentCompatImpl: void setMenuVisibility(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompat$ICSMR1FragmentCompatImpl: void setUserVisibleHint(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompatICS: void setMenuVisibility(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentCompatICSMR1: void setUserVisibleHint(android.app.Fragment,boolean)>  ->_SINK_
<android.support.v13.app.FragmentPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)>  ->_SINK_
<android.support.v4.view.PagerAdapter: void startUpdate(android.view.ViewGroup)>  ->_SINK_
<android.support.v13.app.FragmentPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)>  ->_SINK_
<android.support.v4.view.PagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)>  ->_SINK_
<android.support.v4.view.PagerAdapter: void setPrimaryItem(android.view.View,int,java.lang.Object)>  ->_SINK_
<android.support.v4.util.LogWriter: void write(char[],int,int)>  ->_SINK_
<android.text.HtmlToSpannedConverter: void processingInstruction(java.lang.String,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.Parser: void setFeature(java.lang.String,boolean)>  ->_SINK_
<org.ccil.cowan.tagsoup.Parser: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<org.ccil.cowan.tagsoup.Schema: void elementType(java.lang.String,int,int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.Schema: void entity(java.lang.String,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void aname(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void aval(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void etag(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void gi(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void pi(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void pitarget(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.HTMLScanner: void scan(java.io.Reader,org.ccil.cowan.tagsoup.ScanHandler)>  ->_SINK_
<org.ccil.cowan.tagsoup.Element: void setAttribute(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setURI(int,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setLocalName(int,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setQName(int,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setType(int,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.AttributesImpl: void setValue(int,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.HTMLScanner: void scan(java.io.Reader,org.ccil.cowan.tagsoup.ScanHandler)>  ->_SINK_
<org.ccil.cowan.tagsoup.ElementType: void setAttribute(org.ccil.cowan.tagsoup.AttributesImpl,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.ElementType: void setAttribute(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void aname(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void aval(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void etag(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void gi(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void pitarget(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void pi(char[],int,int)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void endElement(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void processingInstruction(java.lang.String,java.lang.String)>  ->_SINK_
<org.ccil.cowan.tagsoup.PYXWriter: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>  ->_SINK_
<android.widget.ActivityChooserModel: void setDefaultActivity(int)>  ->_SINK_
<android.widget.ActivityChooserView: void setActivityChooserModel(android.widget.ActivityChooserModel)>  ->_SINK_
<android.widget.ActivityChooserView: void setExpandActivityOverflowButtonDrawable(android.graphics.drawable.Drawable)>  ->_SINK_
<android.widget.ActivityChooserView: void setExpandActivityOverflowButtonContentDescription(int)>  ->_SINK_
<android.widget.ActivityChooserView: void setActivityChooserModel(android.widget.ActivityChooserModel)>  ->_SINK_
<android.support.v4.content.LocalBroadcastManager: void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>  ->_SINK_
<android.support.v4.content.LocalBroadcastManager: boolean sendBroadcast(android.content.Intent)>  ->_SINK_
<android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl: void setThreadStatsTag(int)>  ->_SINK_
<android.support.v4.net.TrafficStatsCompat: void setThreadStatsTag(int)>  ->_SINK_
<android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl: void setThreadStatsTag(int)>  ->_SINK_
<android.support.v4.net.TrafficStatsCompat$IcsTrafficStatsCompatImpl: void setThreadStatsTag(int)>  ->_SINK_
<android.support.v4.net.TrafficStatsCompat$IcsTrafficStatsCompatImpl: void setThreadStatsTag(int)>  ->_SINK_
<android.support.v4.net.TrafficStatsCompatIcs: void setThreadStatsTag(int)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1: void sendAccessibilityEvent(android.view.View,int)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1: void sendAccessibilityEvent(android.view.View,int)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat: void sendAccessibilityEvent(android.view.View,int)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl: void sendAccessibilityEvent(java.lang.Object,android.view.View,int)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl: void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setParent(android.view.View)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setBoundsInParent(android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setBoundsInScreen(android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setEnabled(boolean)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompatIcs: void sendAccessibilityEvent(java.lang.Object,android.view.View,int)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompatIcs: void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl: void sendAccessibilityEvent(java.lang.Object,android.view.View,int)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl: void sendAccessibilityEvent(java.lang.Object,android.view.View,int)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl: void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl: void sendAccessibilityEvent(java.lang.Object,android.view.View,int)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl: void sendAccessibilityEvent(java.lang.Object,android.view.View,int)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl: void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setParent(java.lang.Object,android.view.View)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setParent(java.lang.Object,android.view.View)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setBoundsInParent(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setBoundsInParent(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setEnabled(java.lang.Object,boolean)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setEnabled(java.lang.Object,boolean)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setPackageName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setPackageName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setClassName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setClassName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setContentDescription(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setContentDescription(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setBoundsInParent(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setBoundsInParent(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setClassName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setClassName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setContentDescription(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setContentDescription(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setEnabled(java.lang.Object,boolean)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setEnabled(java.lang.Object,boolean)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setPackageName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setPackageName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setParent(java.lang.Object,android.view.View)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl: void setParent(java.lang.Object,android.view.View)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setBoundsInParent(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setClassName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setContentDescription(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setEnabled(java.lang.Object,boolean)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setPackageName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl: void setParent(java.lang.Object,android.view.View)>  ->_SINK_
<android.support.v4.view.AccessibilityDelegateCompatIcs$1: void sendAccessibilityEvent(android.view.View,int)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setBoundsInParent(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setClassName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setContentDescription(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setEnabled(java.lang.Object,boolean)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setPackageName(java.lang.Object,java.lang.CharSequence)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setParent(java.lang.Object,android.view.View)>  ->_SINK_
<android.support.v4.view.ViewPager: void setCurrentItem(int)>  ->_SINK_
<android.support.v4.view.ViewPager: void setCurrentItem(int,boolean)>  ->_SINK_
<android.support.v4.view.ViewPager: void setCurrentItemInternal(int,boolean,boolean)>  ->_SINK_
<android.support.v4.view.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)>  ->_SINK_
<android.support.v4.view.ViewPager: void draw(android.graphics.Canvas)>  ->_SINK_
<android.support.v4.widget.EdgeEffectCompat: void setSize(int,int)>  ->_SINK_
<android.support.v4.view.ViewPager$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>  ->_SINK_
<android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl: void setSize(java.lang.Object,int,int)>  ->_SINK_
<android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl: void setSize(java.lang.Object,int,int)>  ->_SINK_
<android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl: void setSize(java.lang.Object,int,int)>  ->_SINK_
<android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl: void setSize(java.lang.Object,int,int)>  ->_SINK_
<android.support.v4.view.ViewCompat$ICSViewCompatImpl: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>  ->_SINK_
<android.support.v4.view.ViewCompat$BaseViewCompatImpl: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>  ->_SINK_
<android.support.v4.view.ViewCompat$ICSViewCompatImpl: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>  ->_SINK_
<android.support.v4.view.ViewCompat$ICSViewCompatImpl: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>  ->_SINK_
<android.support.v4.view.ViewCompat$BaseViewCompatImpl: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>  ->_SINK_
<android.support.v4.widget.EdgeEffectCompatIcs: void setSize(java.lang.Object,int,int)>  ->_SINK_
<android.support.v4.view.ViewCompatICS: void setAccessibilityDelegate(android.view.View,java.lang.Object)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setSource(android.view.View,int)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl: void setSource(java.lang.Object,android.view.View,int)>  ->_SINK_
<android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl: void setSource(java.lang.Object,android.view.View,int)>  ->_SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>  ->_SINK_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)>  ->_SINK_
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)>  ->_SINK_
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])>  ->_SINK_
<android.telephony.SmsManager: boolean enableCellBroadcast(int)>  ->_SINK_
<android.telephony.SmsManager: boolean disableCellBroadcast(int)>  ->_SINK_
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)>  ->_SINK_
<android.test.IsolatedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>  ->_SINK_
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.test.IsolatedContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.test.mock.MockContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.test.mock.MockContext: void startActivity(android.content.Intent)>  ->_SINK_
<android.test.mock.MockContext: void startActivities(android.content.Intent[])>  ->_SINK_
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)>  ->_SINK_
<android.test.RenamingDelegatingContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.util.Base64OutputStream: void write(int)>  ->_SINK_
<android.util.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<android.util.PrefixPrinter: void println(java.lang.String)>  ->_SINK_
<android.view.ViewStub: void setVisibility(int)>  ->_SINK_
<android.widget.Gallery: void setSelectedPositionInt(int)>  ->_SINK_
<android.widget.QuickContactBadge: void setMode(int)>  ->_SINK_
<android.widget.RadioGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>  ->_SINK_
<android.widget.RelativeLayout$DependencyGraph: void add(android.view.View)>  ->_SINK_
<android.widget.RelativeLayout: void setHorizontalGravity(int)>  ->_SINK_
<android.widget.RelativeLayout: void setVerticalGravity(int)>  ->_SINK_
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,int)>  ->_SINK_
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,java.lang.String)>  ->_SINK_
<android.widget.SimpleAdapter: void setViewText(android.widget.TextView,java.lang.String)>  ->_SINK_
<android.widget.Switch: void setSwitchTextAppearance(android.content.Context,int)>  ->_SINK_
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface,int)>  ->_SINK_
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface)>  ->_SINK_
<android.widget.TableLayout$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>  ->_SINK_
<android.widget.TableLayout: void setColumnCollapsed(int,boolean)>  ->_SINK_
<android.widget.TableLayout: void setColumnStretchable(int,boolean)>  ->_SINK_
<android.widget.TableLayout: void setColumnShrinkable(int,boolean)>  ->_SINK_
<android.widget.TableRow$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>  ->_SINK_
<android.widget.TimePicker$SavedState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.widget.VideoView: void setVideoPath(java.lang.String)>  ->_SINK_
<android.widget.ViewAnimator: void setInAnimation(android.content.Context,int)>  ->_SINK_
<android.widget.ViewAnimator: void setOutAnimation(android.content.Context,int)>  ->_SINK_
<java.io.FilterWriter: void write(char[],int,int)>  ->_SINK_
<java.io.FilterWriter: void write(int)>  ->_SINK_
<java.io.FilterWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.PipedOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.PipedOutputStream: void write(int)>  ->_SINK_
<java.lang.ProcessBuilder: void <init>(java.lang.String[])>  ->_SINK_
<java.lang.ProcessBuilder: void <init>(java.util.List)>  ->_SINK_
<java.lang.ProcessBuilder: java.util.List command()>  ->_SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.lang.String[])>  ->_SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>  ->_SINK_
<java.lang.ProcessBuilder: java.lang.Process start()>  ->_SINK_
<java.nio.channels.Channels$OutputStreamChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.Channels$ChannelOutputStream: void write(int)>  ->_SINK_
<java.nio.channels.Channels$ChannelOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.sql.Date: void setHours(int)>  ->_SINK_
<java.sql.Date: void setMinutes(int)>  ->_SINK_
<java.sql.Date: void setSeconds(int)>  ->_SINK_
<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>  ->_SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.xml.sax.helpers.ParserAdapter: void startElement(java.lang.String,org.xml.sax.AttributeList)>  ->_SINK_
<org.xml.sax.helpers.ParserAdapter: void setProperty(java.lang.String,java.lang.Object)>  ->_SINK_
<org.xml.sax.helpers.ParserAdapter: void startElement(java.lang.String,org.xml.sax.AttributeList)>  ->_SINK_
<org.xml.sax.helpers.AttributesImpl: void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<org.xml.sax.helpers.AttributesImpl: void setURI(int,java.lang.String)>  ->_SINK_
<org.xml.sax.helpers.AttributesImpl: void setLocalName(int,java.lang.String)>  ->_SINK_
<org.xml.sax.helpers.AttributesImpl: void setQName(int,java.lang.String)>  ->_SINK_
<org.xml.sax.helpers.AttributesImpl: void setType(int,java.lang.String)>  ->_SINK_
<org.xml.sax.helpers.AttributesImpl: void setValue(int,java.lang.String)>  ->_SINK_
<org.xml.sax.helpers.NamespaceSupport$Context: void declarePrefix(java.lang.String,java.lang.String)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(char[],int,int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(char[])>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(java.lang.String)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(java.lang.String,int,int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.SocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(java.lang.String,java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(int,java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(int)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int getReply()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: java.lang.String[] getReplyStrings()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int helo(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int mail(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int rcpt(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int data()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int send(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int soml(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int saml(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int rset()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int vrfy(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int expn(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int help()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int help(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int noop()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int turn()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int quit()>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean login(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean login()>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: java.io.Writer sendMessageData()>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendShortMessageData(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendSimpleMessage(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendSimpleMessage(java.lang.String,java.lang.String[],java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean reset()>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean verify(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: java.lang.String listHelp()>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: java.lang.String listHelp(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendNoOp()>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.harmony.security.x509.TBSCertList: void dumpValue(java.lang.StringBuilder)>  ->_SINK_
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: void dumpValue(java.lang.StringBuilder,java.lang.String)>  ->_SINK_
<org.apache.http.entity.StringEntity: void writeTo(java.io.OutputStream)>  ->_SINK_
