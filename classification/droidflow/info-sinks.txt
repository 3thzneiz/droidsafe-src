<com.android.internal.os.LoggingPrintStream: void print(char[])>  ->_SINK_
<java.io.PrintStream: void print(char[])>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(char)>  ->_SINK_
<java.io.PrintStream: void print(char)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(double)>  ->_SINK_
<java.io.PrintStream: void print(double)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(float)>  ->_SINK_
<java.io.PrintStream: void print(float)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(int)>  ->_SINK_
<java.io.PrintStream: void print(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(long)>  ->_SINK_
<java.io.PrintStream: void print(long)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.Object)>  ->_SINK_
<java.io.PrintStream: void print(java.lang.Object)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.String)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(java.lang.String)>  ->_SINK_
<java.io.PrintStream: void print(java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(boolean)>  ->_SINK_
<java.io.PrintStream: void print(boolean)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println()>  ->_SINK_
<java.io.PrintStream: void println()>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(char[])>  ->_SINK_
<java.io.PrintStream: void println(char[])>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(char)>  ->_SINK_
<java.io.PrintStream: void println(char)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(double)>  ->_SINK_
<java.io.PrintStream: void println(double)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(float)>  ->_SINK_
<java.io.PrintStream: void println(float)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(int)>  ->_SINK_
<java.io.PrintStream: void println(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(long)>  ->_SINK_
<java.io.PrintStream: void println(long)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.Object)>  ->_SINK_
<java.io.PrintStream: void println(java.lang.Object)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.String)>  ->_SINK_
<java.io.PrintStream: void println(java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(boolean)>  ->_SINK_
<java.io.PrintStream: void println(boolean)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(int)>  ->_SINK_
<java.io.PrintStream: void write(int)>  ->_SINK_
<java.io.PrintWriter: void print(char[])>  ->_SINK_
<java.io.PrintWriter: void print(char)>  ->_SINK_
<java.io.PrintWriter: void print(double)>  ->_SINK_
<java.io.PrintWriter: void print(float)>  ->_SINK_
<java.io.PrintWriter: void print(int)>  ->_SINK_
<java.io.PrintWriter: void print(long)>  ->_SINK_
<java.io.PrintWriter: void print(java.lang.Object)>  ->_SINK_
<java.io.PrintWriter: void print(java.lang.String)>  ->_SINK_
<java.io.PrintWriter: void print(boolean)>  ->_SINK_
<java.io.PrintWriter: void println()>  ->_SINK_
<java.io.PrintWriter: void println(char[])>  ->_SINK_
<java.io.PrintWriter: void println(char)>  ->_SINK_
<java.io.PrintWriter: void println(double)>  ->_SINK_
<java.io.PrintWriter: void println(float)>  ->_SINK_
<java.io.PrintWriter: void println(int)>  ->_SINK_
<java.io.PrintWriter: void println(long)>  ->_SINK_
<java.io.PrintWriter: void println(java.lang.Object)>  ->_SINK_
<java.io.PrintWriter: void println(java.lang.String)>  ->_SINK_
<java.io.PrintWriter: void println(boolean)>  ->_SINK_
<java.io.PrintWriter: void write(char[],int,int)>  ->_SINK_
<java.io.PrintWriter: void write(int)>  ->_SINK_
<java.io.ObjectOutputStream: void write(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>  ->_SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object,boolean)>  ->_SINK_
<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>  ->_SINK_
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>  ->_SINK_
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>  ->_SINK_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])>  ->_SINK_
<java.net.URL: java.io.InputStream openStream()>  ->_SINK_
<java.net.URL: java.net.URLConnection openConnection()>  ->_SINK_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>  ->_SINK_
<java.io.DataOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(byte[],int,int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[],int,int)>  ->_SINK_
<android.util.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.SocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(int)>  ->_SINK_
<java.io.PrintStream: void write(int)>  ->_SINK_
<java.io.DataOutputStream: void write(int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(int)>  ->_SINK_
<android.util.Base64OutputStream: void write(int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(int)>  ->_SINK_
<java.io.FilterOutputStream: void write(int)>  ->_SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[])>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(byte[])>  ->_SINK_
<java.io.OutputStream: void write(byte[])>  ->_SINK_
<java.io.DataOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(byte[],int,int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[],int,int)>  ->_SINK_
<android.util.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.SocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.FileOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.OutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.ObjectOutputStream: void write(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(int)>  ->_SINK_
<java.io.PrintStream: void write(int)>  ->_SINK_
<java.io.DataOutputStream: void write(int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(int)>  ->_SINK_
<android.util.Base64OutputStream: void write(int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(int)>  ->_SINK_
<java.io.FilterOutputStream: void write(int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>  ->_SINK_
<java.io.FileOutputStream: void write(int)>  ->_SINK_
<java.io.ByteArrayOutputStream: void write(int)>  ->_SINK_
<java.nio.SocketChannelImpl$SocketChannelOutputStream: void write(int)>  ->_SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(int)>  ->_SINK_
<libcore.net.http.AbstractHttpOutputStream: void write(int)>  ->_SINK_
<java.util.jar.JarVerifier$VerifierEntry: void write(int)>  ->_SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(int)>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream$1: void write(int)>  ->_SINK_
<android.bluetooth.BluetoothOutputStream: void write(int)>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(int)>  ->_SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(int)>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(int)>  ->_SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)>  ->_SINK_
<java.io.PipedOutputStream: void write(int)>  ->_SINK_
<java.nio.channels.Channels$ChannelOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(int)>  ->_SINK_
<java.io.OutputStream: void write(int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.FileOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>  ->_SINK_
<java.io.FileOutputStream: void write(int)>  ->_SINK_
<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>  ->_SINK_
<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>  ->_SINK_
<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>  ->_SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>  ->_SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  ->_SINK_
<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String)>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])>  ->_SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>  ->_SINK_
<java.io.ObjectOutputStream: void write(int)>  ->_SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>  ->_SINK_
<java.io.DataOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.DataOutputStream: void write(int)>  ->_SINK_
<java.io.ByteArrayOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(char[])>  ->_SINK_
<java.io.Writer: void write(char[])>  ->_SINK_
<java.io.PrintWriter: void write(char[],int,int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)>  ->_SINK_
<java.io.BufferedWriter: void write(char[],int,int)>  ->_SINK_
<android.util.LogWriter: void write(char[],int,int)>  ->_SINK_
<java.io.StringWriter: void write(char[],int,int)>  ->_SINK_
<java.io.CharArrayWriter: void write(char[],int,int)>  ->_SINK_
<android.opengl.GLSurfaceView$LogWriter: void write(char[],int,int)>  ->_SINK_
<android.support.v4.util.LogWriter: void write(char[],int,int)>  ->_SINK_
<java.io.FilterWriter: void write(char[],int,int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(char[],int,int)>  ->_SINK_
<java.io.Writer: void write(char[],int,int)>  ->_SINK_
<java.io.PrintWriter: void write(int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(int)>  ->_SINK_
<java.io.BufferedWriter: void write(int)>  ->_SINK_
<java.io.CharArrayWriter: void write(int)>  ->_SINK_
<java.io.FilterWriter: void write(int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(int)>  ->_SINK_
<java.io.Writer: void write(int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(java.lang.String)>  ->_SINK_
<java.io.Writer: void write(java.lang.String)>  ->_SINK_
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.CharArrayWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.FilterWriter: void write(java.lang.String,int,int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.Writer: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.BufferedOutputStream: void write(int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(int)>  ->_SINK_
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)>  ->_SINK_
<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.test.RenamingDelegatingContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.test.mock.MockContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>  ->_SINK_
<android.app.ContextImpl: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.Activity: void startActivity(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void startActivity(android.content.Intent)>  ->_SINK_
<android.test.mock.MockContext: void startActivity(android.content.Intent)>  ->_SINK_
<android.content.Context: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void startActivities(android.content.Intent[])>  ->_SINK_
<android.app.Activity: void startActivities(android.content.Intent[])>  ->_SINK_
<android.content.ContextWrapper: void startActivities(android.content.Intent[])>  ->_SINK_
<android.test.mock.MockContext: void startActivities(android.content.Intent[])>  ->_SINK_
<android.content.Context: void startActivities(android.content.Intent[])>  ->_SINK_
<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.content.Context: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>  ->_SINK_
<android.content.Context: void sendStickyBroadcast(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.Activity: void setIntent(android.content.Intent)>  ->_SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int)>  ->_SINK_
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.Activity: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.Activity: void startActivities(android.content.Intent[])>  ->_SINK_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>  ->_SINK_
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>  ->_SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>  ->_SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>  ->_SINK_
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.Activity: void setResult(int)>  ->_SINK_
<android.app.Activity: void setResult(int,android.content.Intent)>  ->_SINK_
<android.app.Activity: boolean navigateUpTo(android.content.Intent)>  ->_SINK_
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.Service: void setForeground(boolean)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.content.BroadcastReceiver: void setResultCode(int)>  ->_SINK_
<android.content.BroadcastReceiver: void setResultData(java.lang.String)>  ->_SINK_
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>  ->_SINK_
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.BroadcastReceiver: void setPendingResult(android.content.BroadcastReceiver$PendingResult)>  ->_SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.app.ContextImpl: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void startActivities(android.content.Intent[])>  ->_SINK_
<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)>  ->_SINK_
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(int[],android.widget.RemoteViews)>  ->_SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(int,android.widget.RemoteViews)>  ->_SINK_
<android.appwidget.AppWidgetManager: void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)>  ->_SINK_
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>  ->_SINK_
<libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>  ->_SINK_
<java.io.BufferedWriter: void write(char[],int,int)>  ->_SINK_
<java.io.BufferedWriter: void write(int)>  ->_SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)>  ->_SINK_
<libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>  ->_SINK_
<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.SocketChannelImpl: boolean connect(java.net.SocketAddress)>  ->_SINK_
<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>  ->_SINK_
<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>  ->_SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  ->_SINK_
<java.lang.ProcessManager: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File,boolean)>  ->_SINK_
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)>  ->_SINK_
<dalvik.system.VMDebug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>  ->_SINK_
<java.io.DataOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)>  ->_SINK_
<java.io.ObjectOutputStream: void write(int)>  ->_SINK_
<java.io.DataOutputStream: void write(int)>  ->_SINK_
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>  ->_SINK_
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>  ->_SINK_
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>  ->_SINK_
<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])>  ->_SINK_
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>  ->_SINK_
<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.test.RenamingDelegatingContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>  ->_SINK_
<android.app.Activity: void startActivity(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void startActivity(android.content.Intent)>  ->_SINK_
<android.app.Activity: void startActivities(android.content.Intent[])>  ->_SINK_
<android.content.ContextWrapper: void startActivities(android.content.Intent[])>  ->_SINK_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>  ->_SINK_
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>  ->_SINK_
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>  ->_SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int d(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Log: int println(int,java.lang.String,java.lang.String)>  ->_SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.cat.Item: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.Parcel: void writeSerializable(java.io.Serializable)>  ->_SINK_
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>  ->_SINK_
<android.app.ApplicationPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>  ->_SINK_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>  ->_SINK_
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>  ->_SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IccFileHandler: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.CatService: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL$RILSender: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.AdnRecordCache: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.AdnRecordLoader: void handleMessage(android.os.Message)>  ->_SINK_
<android.os.Handler: boolean sendMessage(android.os.Message)>  ->_SINK_
<android.os.Handler: boolean sendEmptyMessage(int)>  ->_SINK_
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>  ->_SINK_
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>  ->_SINK_
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>  ->_SINK_
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>  ->_SINK_
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>  ->_SINK_
<android.os.Handler: void dump(android.util.Printer,java.lang.String)>  ->_SINK_
<android.app.UiModeManager: void enableCarMode(int)>  ->_SINK_
<android.app.UiModeManager: void setNightMode(int)>  ->_SINK_
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>  ->_SINK_
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>  ->_SINK_
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)>  ->_SINK_
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)>  ->_SINK_
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>  ->_SINK_
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)>  ->_SINK_
<android.app.DownloadManager: android.os.ParcelFileDescriptor openDownloadedFile(long)>  ->_SINK_
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)>  ->_SINK_
<android.hardware.usb.UsbManager: void setMassStorageBackingFile(java.lang.String)>  ->_SINK_
<android.app.NotificationManager: void notify(int,android.app.Notification)>  ->_SINK_
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>  ->_SINK_
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>  ->_SINK_
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>  ->_SINK_
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)>  ->_SINK_
<android.media.AudioManager: void setRingerMode(int)>  ->_SINK_
<android.media.AudioManager: void setStreamVolume(int,int,int)>  ->_SINK_
<android.media.AudioManager: void setStreamSolo(int,boolean)>  ->_SINK_
<android.media.AudioManager: void setStreamMute(int,boolean)>  ->_SINK_
<android.media.AudioManager: void setVibrateSetting(int,int)>  ->_SINK_
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>  ->_SINK_
<android.media.AudioManager: void setBluetoothScoOn(boolean)>  ->_SINK_
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>  ->_SINK_
<android.media.AudioManager: void setWiredHeadsetOn(boolean)>  ->_SINK_
<android.media.AudioManager: void setMicrophoneMute(boolean)>  ->_SINK_
<android.media.AudioManager: void setMode(int)>  ->_SINK_
<android.media.AudioManager: void setRouting(int,int,int)>  ->_SINK_
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<android.media.AudioManager: void setParameters(java.lang.String)>  ->_SINK_
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>  ->_SINK_
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.app.SearchManager: void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)>  ->_SINK_
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)>  ->_SINK_
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean)>  ->_SINK_
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>  ->_SINK_
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>  ->_SINK_
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>  ->_SINK_
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.location.LocationManager: boolean sendNiResponse(int,int)>  ->_SINK_
<android.net.ConnectivityManager: void setNetworkPreference(int)>  ->_SINK_
<android.net.ConnectivityManager: boolean setRadios(boolean)>  ->_SINK_
<android.net.ConnectivityManager: boolean setRadio(int,boolean)>  ->_SINK_
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>  ->_SINK_
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)>  ->_SINK_
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)>  ->_SINK_
<android.net.ConnectivityManager: int setUsbTethering(boolean)>  ->_SINK_
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)>  ->_SINK_
<android.net.ConnectivityManager: void setDataDependency(int,boolean)>  ->_SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)>  ->_SINK_
<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)>  ->_SINK_
<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)>  ->_SINK_
<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>  ->_SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>  ->_SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromData(byte[],java.lang.String)>  ->_SINK_
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>  ->_SINK_
<android.app.Instrumentation: void sendStringSync(java.lang.String)>  ->_SINK_
<android.app.Instrumentation: void sendKeyDownUpSync(int)>  ->_SINK_
<android.app.Instrumentation: void sendCharacterSync(int)>  ->_SINK_
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.FragmentManagerImpl: void setBackStackIndex(int,android.app.BackStackRecord)>  ->_SINK_
<android.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)>  ->_SINK_
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence)>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence,int,int)>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(char)>  ->_SINK_
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.app.WallpaperManager: void setResource(int)>  ->_SINK_
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>  ->_SINK_
<android.app.WallpaperManager: void setStream(java.io.InputStream)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>  ->_SINK_
<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.os.FileUtils: boolean copyToFile(java.io.InputStream,java.io.File)>  ->_SINK_
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>  ->_SINK_
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>  ->_SINK_
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>  ->_SINK_
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>  ->_SINK_
<java.io.RandomAccessFile: void setLength(long)>  ->_SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)>  ->_SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>  ->_SINK_
<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.PipeImpl$PipeSinkChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.Channels$OutputStreamChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>  ->_SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)>  ->_SINK_
<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)>  ->_SINK_
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>  ->_SINK_
<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.SocketChannelImpl: boolean connect(java.net.SocketAddress)>  ->_SINK_
<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int pwrite(java.io.FileDescriptor,byte[],int,int,long)>  ->_SINK_
<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)>  ->_SINK_
<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>  ->_SINK_
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)>  ->_SINK_
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  ->_SINK_
<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.SyncStatusInfo: void setPeriodicSyncTime(int,long)>  ->_SINK_
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.backup.BackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)>  ->_SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int d(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int i(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int w(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int w(java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int e(java.lang.String,java.lang.String)>  ->_SINK_
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.util.Slog: int println(int,java.lang.String,java.lang.String)>  ->_SINK_
<android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>  ->_SINK_
<android.os.Debug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>  ->_SINK_
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)>  ->_SINK_
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.app.ApplicationPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INdefPushCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcTag$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.PhoneSubInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(android.os.Message)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int,java.lang.Object)>  ->_SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,java.lang.Object)>  ->_SINK_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)>  ->_SINK_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.Messenger: void send(android.os.Message)>  ->_SINK_
<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)>  ->_SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>  ->_SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>  ->_SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>  ->_SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>  ->_SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>  ->_SINK_
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])>  ->_SINK_
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>  ->_SINK_
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.os.Handler$MessengerImpl: void send(android.os.Message)>  ->_SINK_
<android.os.Handler$MessengerImpl: void send(android.os.Message)>  ->_SINK_
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>  ->_SINK_
<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)>  ->_SINK_
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)>  ->_SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustVolume(int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamSolo(int,boolean,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamMute(int,boolean,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setRingerMode(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setVibrateSetting(int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: boolean shouldVibrate(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffect(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffectVolume(int,float)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterAudioFocusClient(java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>  ->_SINK_
<android.media.IAudioFocusDispatcher$Stub$Proxy: void dispatchAudioFocusChange(int,java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>  ->_SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)>  ->_SINK_
<android.accounts.AccountManager$AmsTask: void set(android.os.Bundle)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOtaspChanged(int)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.telephony.ServiceState: void setStateOutOfService()>  ->_SINK_
<android.telephony.ServiceState: void setStateOff()>  ->_SINK_
<android.telephony.ServiceState: void setCssIndicator(int)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void disableDnsCheck(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setUnitTestMode(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)>  ->_SINK_
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)>  ->_SINK_
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>  ->_SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>  ->_SINK_
<android.net.LocalSocket: void setReceiveBufferSize(int)>  ->_SINK_
<android.net.LocalSocket: void setSoTimeout(int)>  ->_SINK_
<android.net.LocalSocket: void setSendBufferSize(int)>  ->_SINK_
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])>  ->_SINK_
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.text.Editable: android.text.Editable append(java.lang.CharSequence)>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence)>  ->_SINK_
<android.text.Editable: android.text.Editable append(java.lang.CharSequence,int,int)>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence,int,int)>  ->_SINK_
<android.text.Editable: android.text.Editable append(char)>  ->_SINK_
<android.text.SpannableStringBuilder: android.text.Editable append(char)>  ->_SINK_
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.util.LogWriter: void write(char[],int,int)>  ->_SINK_
<android.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>  ->_SINK_
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>  ->_SINK_
<java.net.PlainSocketImpl: void bind(java.net.InetAddress,int)>  ->_SINK_
<java.net.PlainSocketImpl: void bind(java.net.InetAddress,int)>  ->_SINK_
<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)>  ->_SINK_
<java.nio.IoVec: int doTransfer(java.io.FileDescriptor)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void bind(int,java.net.InetAddress)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void send(java.net.DatagramPacket)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void bind(int,java.net.InetAddress)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void send(java.net.DatagramPacket)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>  ->_SINK_
<java.nio.PipeImpl$PipeSinkChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.SocketChannelImpl$SocketChannelOutputStream: void write(int)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)>  ->_SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.app.backup.FullBackup: void restoreFile(android.os.ParcelFileDescriptor,long,int,long,long,java.io.File)>  ->_SINK_
<java.io.StringWriter: void write(char[],int,int)>  ->_SINK_
<com.android.internal.os.AndroidPrintStream: void log(java.lang.String)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int close(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int connect(int,int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int reconnect(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefWrite(int,android.nfc.NdefMessage)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefMakeReadOnly(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean ndefIsWritable(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int formatNdef(int,byte[])>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int setTimeout(int,int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean canMakeReadOnly(int)>  ->_SINK_
<android.nfc.NfcActivityManager: void setNdefPushMessage(android.app.Activity,android.nfc.NdefMessage)>  ->_SINK_
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle open(java.lang.String,android.os.IBinder)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void setCardEmulationRoute(java.lang.String,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void authenticate(java.lang.String,byte[])>  ->_SINK_
<android.nfc.INfcAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.hardware.usb.UsbRequest: boolean queue(java.nio.ByteBuffer,int)>  ->_SINK_
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustVolume(int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamSolo(int,boolean,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setStreamMute(int,boolean,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setRingerMode(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setVibrateSetting(int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: boolean shouldVibrate(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffect(int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void playSoundEffectVolume(int,float)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterAudioFocusClient(java.lang.String)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void registerRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)>  ->_SINK_
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>  ->_SINK_
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)>  ->_SINK_
<android.accounts.AccountManager$AmsTask$Response: void onError(int,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onError(int,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)>  ->_SINK_
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)>  ->_SINK_
<android.accounts.AccountManager$AmsTask$Response: void onError(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onSignalStrengthChanged(int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCallStateChanged(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataConnectionStateChanged(int,int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataActivity(int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onOtaspChanged(int)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccRefresh(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSuppServiceNotifications(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void conference(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setMute(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallWaiting(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendUSSD(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()>  ->_SINK_
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaSubscriptionSource(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void sendBurstDtmf(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnIccRefresh(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.BaseCommands: void setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setUnitTestMode(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyDisconnect(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void saveClirSetting(int)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDisconnect(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void conference(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()>  ->_SINK_
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)>  ->_SINK_
<android.net.LinkCapabilities: void put(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneSubInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>  ->_SINK_
<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>  ->_SINK_
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>  ->_SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>  ->_SINK_
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(int)>  ->_SINK_
<android.net.LocalSocketImpl: void bind(android.net.LocalSocketAddress)>  ->_SINK_
<android.net.LocalSocketImpl: void setOption(int,java.lang.Object)>  ->_SINK_
<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(int)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void bind(android.content.Context,int,android.content.Intent)>  ->_SINK_
<android.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  ->_SINK_
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)>  ->_SINK_
<libcore.net.http.AbstractHttpOutputStream: void write(int)>  ->_SINK_
<java.util.jar.JarVerifier$VerifierEntry: void write(int)>  ->_SINK_
<java.util.zip.Inflater: void setInput(byte[])>  ->_SINK_
<java.util.zip.Inflater: int setFileInput(java.io.FileDescriptor,long,int)>  ->_SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(int)>  ->_SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)>  ->_SINK_
<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>  ->_SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.LogRecord)>  ->_SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)>  ->_SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.LogRecord)>  ->_SINK_
<com.android.internal.os.AndroidPrintStream: void log(java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void write(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(char[])>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(char)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(double)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(float)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(long)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.Object)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void print(boolean)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println()>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(char[])>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(char)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(double)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(float)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(int)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(long)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.Object)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream: void println(boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>  ->_SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)>  ->_SINK_
<android.nfc.INdefPushCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcTag$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>  ->_SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)>  ->_SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])>  ->_SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)>  ->_SINK_
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)>  ->_SINK_
<android.media.IAudioFocusDispatcher$Stub$Proxy: void dispatchAudioFocusChange(int,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>  ->_SINK_
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>  ->_SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.SMSDispatcher: void handleSendComplete(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>  ->_SINK_
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)>  ->_SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])>  ->_SINK_
<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>  ->_SINK_
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GSMPhone: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void disableDnsCheck(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyDisconnectP(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setEchoSuppressionEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyOtaspChanged(int)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CDMAPhone: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: int enableApnType(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)>  ->_SINK_
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IccRecords: void setVoiceCallForwardingFlag(int,boolean)>  ->_SINK_
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataConnection(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DataConnectionTracker: void notifyDataConnection(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DataConnectionTracker: boolean setInternalDataEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IccFileHandler: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.SmsUsageMonitor: boolean check(java.lang.String,int)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDisconnect(com.android.internal.telephony.Connection)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void sendUssdResponse(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setRadioPower(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOutgoingCallerIdDisplay(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCallWaiting(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setDataRoamingEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone$SipCall: void setMute(boolean)>  ->_SINK_
<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>  ->_SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>  ->_SINK_
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>  ->_SINK_
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>  ->_SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int)>  ->_SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipPhone$SipConnection: void setMute(boolean)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.PhoneSubInfoProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)>  ->_SINK_
<com.android.internal.telephony.cat.CatService: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataConnection(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)>  ->_SINK_
<com.android.internal.telephony.RIL$RILSender: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IccCardStatus: void setCardState(int)>  ->_SINK_
<com.android.internal.telephony.IccCardStatus: void setUniversalPinState(int)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.AdnRecordCache: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)>  ->_SINK_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOtaspChanged(int)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void removeGpsStatusListener(android.location.IGpsStatusListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)>  ->_SINK_
<android.location.ILocationManager$Stub$Proxy: boolean sendNiResponse(int,int)>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(int)>  ->_SINK_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  ->_SINK_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setAnimatedValue(java.lang.Object)>  ->_SINK_
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)>  ->_SINK_
<com.android.internal.os.LoggingPrintStream$1: void write(int)>  ->_SINK_
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle open(java.lang.String,android.os.IBinder)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void setCardEmulationRoute(java.lang.String,int)>  ->_SINK_
<android.nfc.INfcAdapterExtras$Stub$Proxy: void authenticate(java.lang.String,byte[])>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int close(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int connect(int,int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int reconnect(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefWrite(int,android.nfc.NdefMessage)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int ndefMakeReadOnly(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean ndefIsWritable(int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int formatNdef(int,byte[])>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: int setTimeout(int,int)>  ->_SINK_
<android.nfc.INfcTag$Stub$Proxy: boolean canMakeReadOnly(int)>  ->_SINK_
<android.nfc.tech.IsoDep: void setTimeout(int)>  ->_SINK_
<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)>  ->_SINK_
<android.nfc.tech.NfcF: void setTimeout(int)>  ->_SINK_
<android.nfc.tech.MifareUltralight: void setTimeout(int)>  ->_SINK_
<android.nfc.tech.MifareClassic: void increment(int,int)>  ->_SINK_
<android.nfc.tech.MifareClassic: void decrement(int,int)>  ->_SINK_
<android.nfc.tech.MifareClassic: void setTimeout(int)>  ->_SINK_
<android.nfc.tech.NfcA: void setTimeout(int)>  ->_SINK_
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onError(int,java.lang.String)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onSignalStrengthChanged(int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onCallStateChanged(int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataConnectionStateChanged(int,int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onDataActivity(int)>  ->_SINK_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void onOtaspChanged(int)>  ->_SINK_
<com.android.internal.telephony.AdnRecordLoader: void handleMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.SmsHeader: byte[] toByteArray(com.android.internal.telephony.SmsHeader)>  ->_SINK_
<android.provider.Telephony$Sms: boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void reqSetLinkPropertiesHttpProxy(android.net.ProxyProperties)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void setLinkPropertiesHttpProxySync(android.net.ProxyProperties)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void reqUpdateLinkPropertiesDataCallState(com.android.internal.telephony.DataCallState)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void reqAddApnContext(com.android.internal.telephony.ApnContext)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void addApnContextSync(com.android.internal.telephony.ApnContext)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void reqRemomveApnContext(com.android.internal.telephony.ApnContext)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void removeApnContextSync(com.android.internal.telephony.ApnContext)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void reqSetReconnectIntent(android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.DataConnectionAc: void setReconnectIntentSync(android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[])>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setMute(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSuppServiceNotifications(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallWaiting(boolean,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendUSSD(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setBandMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setSmscAddress(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaRoamingPreference(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaSubscriptionSource(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setTTYMode(int,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastConfig(int[],android.os.Message)>  ->_SINK_
<com.android.internal.telephony.sip.SipCommandInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)>  ->_SINK_
<android.net.rtp.AudioGroup: void sendDtmf(int)>  ->_SINK_
<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)>  ->_SINK_
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCalling(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRingingBack(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEnded(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallBusy(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onError(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistering(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationDone(android.net.sip.ISipSession,int)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationTimeout(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void setListener(android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void register(int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void sendStartDecodingMessageParams(com.android.internal.telephony.cat.RilMessage)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder: void sendMsgParamsDecoded(com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.CommandParams)>  ->_SINK_
<com.android.internal.telephony.cat.CommandParams: boolean setIcon(android.graphics.Bitmap)>  ->_SINK_
<com.android.internal.telephony.cat.ResponseData: void writeLength(java.io.ByteArrayOutputStream,int)>  ->_SINK_
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)>  ->_SINK_
<com.android.internal.telephony.cat.Input: boolean setIcon(android.graphics.Bitmap)>  ->_SINK_
<com.android.internal.telephony.cat.Menu: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setDataConnection(com.android.internal.telephony.DataConnection)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setDataConnectionAc(com.android.internal.telephony.DataConnectionAc)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setApnSetting(com.android.internal.telephony.ApnSetting)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setWaitingApns(java.util.ArrayList)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setReason(java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setEnabled(boolean)>  ->_SINK_
<com.android.internal.telephony.ApnContext: void setDependencyMet(boolean)>  ->_SINK_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm8BitUnpackedToString(byte[],int,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(int)>  ->_SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>  ->_SINK_
<android.content.SyncManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>  ->_SINK_
<android.content.SyncManager: void dumpSyncState(java.io.PrintWriter)>  ->_SINK_
<android.content.SyncManager: void dumpSyncHistory(java.io.PrintWriter)>  ->_SINK_
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.net.TrafficStats: void setThreadStatsTag(int)>  ->_SINK_
<android.net.TrafficStats: void setThreadStatsUid(int)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: int processMessage(java.lang.String,java.lang.String,android.content.Intent)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean addPackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean updatePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean deletePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAddress(java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setEncryption(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setBandwidth(java.lang.String,int)>  ->_SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)>  ->_SINK_
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)>  ->_SINK_
<com.android.internal.telephony.cat.Item: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.IntRangeManager: boolean enableRange(int,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.IntRangeManager: boolean disableRange(int,int,java.lang.String)>  ->_SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseTag(com.android.internal.telephony.gsm.SimTlv,int)>  ->_SINK_
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseEf(com.android.internal.telephony.gsm.SimTlv,java.util.Map,int)>  ->_SINK_
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>  ->_SINK_
<android.content.ISyncAdapter$Stub$Proxy: void cancelSync(android.content.ISyncContext)>  ->_SINK_
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)>  ->_SINK_
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)>  ->_SINK_
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)>  ->_SINK_
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)>  ->_SINK_
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCalling(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRingingBack(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallEnded(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallBusy(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onError(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistering(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationDone(android.net.sip.ISipSession,int)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)>  ->_SINK_
<android.net.sip.ISipSessionListener$Stub$Proxy: void onRegistrationTimeout(android.net.sip.ISipSession)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void setListener(android.net.sip.ISipSessionListener)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void register(int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)>  ->_SINK_
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setExpires(int)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setQValue(float)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setExpires(int)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setQValue(float)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setSipInstanceParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setPubGruuParam(java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setTempGruuParam(java.lang.String)>  ->_SINK_
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>  ->_SINK_
<android.content.ISyncAdapter$Stub$Proxy: void cancelSync(android.content.ISyncContext)>  ->_SINK_
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)>  ->_SINK_
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)>  ->_SINK_
<java.io.CharArrayWriter: void write(char[],int,int)>  ->_SINK_
<java.io.CharArrayWriter: void write(int)>  ->_SINK_
<java.io.CharArrayWriter: void write(java.lang.String,int,int)>  ->_SINK_
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)>  ->_SINK_
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: int processMessage(java.lang.String,java.lang.String,android.content.Intent)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean addPackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean updatePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)>  ->_SINK_
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: boolean deletePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>  ->_SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)>  ->_SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)>  ->_SINK_
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>  ->_SINK_
<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>  ->_SINK_
<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)>  ->_SINK_
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.app.backup.BackupHelperDispatcher: void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>  ->_SINK_
<android.app.backup.RestoreSession: int restoreSome(long,android.app.backup.RestoreObserver,java.lang.String[])>  ->_SINK_
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)>  ->_SINK_
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)>  ->_SINK_
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)>  ->_SINK_
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setDeviceOutOfBandData(byte[],byte[])>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setPasskey(int)>  ->_SINK_
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)>  ->_SINK_
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)>  ->_SINK_
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>  ->_SINK_
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)>  ->_SINK_
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.BluetoothOutputStream: void write(int)>  ->_SINK_
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)>  ->_SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)>  ->_SINK_
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>  ->_SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)>  ->_SINK_
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)>  ->_SINK_
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ->_SINK_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)>  ->_SINK_
<android.test.InstrumentationTestCase: void sendKeys(java.lang.String)>  ->_SINK_
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>  ->_SINK_
<android.database.MatrixCursor: void addRow(java.lang.Object[])>  ->_SINK_
<android.database.MatrixCursor: void addRow(java.lang.Iterable)>  ->_SINK_
<android.database.MatrixCursor: void addRow(java.util.ArrayList,int)>  ->_SINK_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)>  ->_SINK_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.lang.String)>  ->_SINK_
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[])>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(int)>  ->_SINK_
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>  ->_SINK_
<android.graphics.pdf.PdfDocument: void writeTo(java.io.OutputStream)>  ->_SINK_
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)>  ->_SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map)>  ->_SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)>  ->_SINK_
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>  ->_SINK_
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>  ->_SINK_
<android.media.MediaPlayer: void setSurface(android.view.Surface)>  ->_SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>  ->_SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>  ->_SINK_
<android.media.MediaPlayer: void setDataSource(java.lang.String)>  ->_SINK_
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)>  ->_SINK_
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>  ->_SINK_
<android.media.MiniThumbFile: void saveMiniThumbToFile(byte[],long,long)>  ->_SINK_
<android.provider.DrmStore: android.content.Intent addDrmFile(android.content.ContentResolver,java.io.FileInputStream,java.lang.String)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(java.lang.String)>  ->_SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(int)>  ->_SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.entity.StringEntity: void writeTo(java.io.OutputStream)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(int)>  ->_SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>  ->_SINK_
<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>  ->_SINK_
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>  ->_SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>  ->_SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(int)>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(int)>  ->_SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)>  ->_SINK_
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)>  ->_SINK_
<android.net.http.Headers: void setContentType(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setContentEncoding(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setLocation(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setContentDisposition(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setAcceptRanges(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setExpires(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setCacheControl(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setLastModified(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setEtag(java.lang.String)>  ->_SINK_
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)>  ->_SINK_
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)>  ->_SINK_
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>  ->_SINK_
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)>  ->_SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[])>  ->_SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[],int,int)>  ->_SINK_
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)>  ->_SINK_
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)>  ->_SINK_
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)>  ->_SINK_
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)>  ->_SINK_
<android.webkit.WebView: void loadUrl(java.lang.String)>  ->_SINK_
<android.security.Credentials: void install(android.content.Context,java.security.KeyPair)>  ->_SINK_
<android.security.Credentials: void install(android.content.Context,java.lang.String,byte[])>  ->_SINK_
<android.webkit.DeviceMotionAndOrientationManager: void setMockOrientation(boolean,double,boolean,double,boolean,double)>  ->_SINK_
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>  ->_SINK_
<android.opengl.GLSurfaceView$LogWriter: void write(char[],int,int)>  ->_SINK_
<android.preference.EditTextPreference: void setText(java.lang.String)>  ->_SINK_
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>  ->_SINK_
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>  ->_SINK_
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>  ->_SINK_
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>  ->_SINK_
<android.support.v4.util.LogWriter: void write(char[],int,int)>  ->_SINK_
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)>  ->_SINK_
<android.support.v4.content.LocalBroadcastManager: boolean sendBroadcast(android.content.Intent)>  ->_SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>  ->_SINK_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>  ->_SINK_
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)>  ->_SINK_
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)>  ->_SINK_
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])>  ->_SINK_
<android.telephony.SmsManager: boolean enableCellBroadcast(int)>  ->_SINK_
<android.telephony.SmsManager: boolean disableCellBroadcast(int)>  ->_SINK_
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)>  ->_SINK_
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)>  ->_SINK_
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.test.mock.MockContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.test.mock.MockContext: void startActivity(android.content.Intent)>  ->_SINK_
<android.test.mock.MockContext: void startActivities(android.content.Intent[])>  ->_SINK_
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent)>  ->_SINK_
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent,java.lang.String)>  ->_SINK_
<android.test.RenamingDelegatingContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>  ->_SINK_
<android.util.Base64OutputStream: void write(int)>  ->_SINK_
<android.util.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<android.widget.QuickContactBadge: void setMode(int)>  ->_SINK_
<java.io.FilterWriter: void write(char[],int,int)>  ->_SINK_
<java.io.FilterWriter: void write(int)>  ->_SINK_
<java.io.FilterWriter: void write(java.lang.String,int,int)>  ->_SINK_
<java.io.PipedOutputStream: void write(int)>  ->_SINK_
<java.lang.ProcessBuilder: void <init>(java.lang.String[])>  ->_SINK_
<java.lang.ProcessBuilder: void <init>(java.util.List)>  ->_SINK_
<java.lang.ProcessBuilder: java.util.List command()>  ->_SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.lang.String[])>  ->_SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>  ->_SINK_
<java.lang.ProcessBuilder: java.lang.Process start()>  ->_SINK_
<java.nio.channels.Channels$OutputStreamChannel: int write(java.nio.ByteBuffer)>  ->_SINK_
<java.nio.channels.Channels$ChannelOutputStream: void write(int)>  ->_SINK_
<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>  ->_SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(int)>  ->_SINK_
<javax.crypto.CipherOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(int)>  ->_SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(char[],int,int)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(char[])>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(java.lang.String)>  ->_SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(java.lang.String,int,int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.SocketOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(java.lang.String,java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(int,java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(int)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int getReply()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: java.lang.String[] getReplyStrings()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int helo(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int mail(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int rcpt(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int data()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int send(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int soml(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int saml(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int rset()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int vrfy(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int expn(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int help()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int help(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int noop()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int turn()>  ->_SINK_
<org.apache.commons.net.smtp.SMTP: int quit()>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean login(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean login()>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: java.io.Writer sendMessageData()>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendShortMessageData(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendSimpleMessage(java.lang.String,java.lang.String,java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendSimpleMessage(java.lang.String,java.lang.String[],java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean reset()>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean verify(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: java.lang.String listHelp()>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: java.lang.String listHelp(java.lang.String)>  ->_SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendNoOp()>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(int)>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(byte[])>  ->_SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(byte[],int,int)>  ->_SINK_
<org.apache.http.entity.StringEntity: void writeTo(java.io.OutputStream)>  ->_SINK_
