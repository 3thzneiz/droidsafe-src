<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)> - @DSSource({DSSourceKind.IMAGE}) 
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)> - @DSSource({DSSourceKind.IMAGE}) 
<android.media.ExifInterface: byte[] getThumbnail()> - @DSSource({DSSourceKind.IMAGE}) 
<android.media.ExifInterface: boolean getLatLong(float[])> - @DSSource({DSSourceKind.IMAGE}) 
<android.media.ExifInterface: double getAltitude(double)> - @DSSource({DSSourceKind.IMAGE}) 
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<com.google.android.maps.GeoPoint: int getLatitudeE6()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.google.android.maps.GeoPoint: int getLongitudeE6()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.google.android.maps.GeoPoint: int hashCode()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.google.android.maps.GeoPoint: boolean equals(java.lang.Object)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.google.android.maps.GeoPoint: java.lang.String toString()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.google.android.maps.MapView: int getLatitudeSpan()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.google.android.maps.MapView: int getLongitudeSpan()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.google.android.maps.MyLocationOverlay: float getOrientation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getEsn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getSubscriberId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getMsisdn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimImpi()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSubscriberId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1AlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getMeid()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1Number()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.SmsCbLocation: java.lang.String getPlmn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.DataConnectionTracker: java.lang.String apnIdToType(int)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaMin()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getSubscriberId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaMin()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.SmsCbLocation: java.lang.String toString()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getImei()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.UiccCardApplication: java.lang.String getAid()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimDomain()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1AlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaPrlVersion()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getAddress()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceSvn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1AlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceSvn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IccCardProxy: java.lang.String getServiceProviderName()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.AdnRecord: java.lang.String getNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1Number()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailNumber(java.lang.String)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getMsisdn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneBase: java.lang.String getActiveApnHost(java.lang.String)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getImei()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getCompleteVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()> android.permission.CALL_PRIVILEGED - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> android.permission.READ_PHONE_STATE - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceSvn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> android.permission.READ_PHONE_STATE - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1Number()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getCnapName()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()> android.permission.READ_PHONE_STATE - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaEriText()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getImei()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getEsn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> android.permission.READ_PHONE_STATE - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getIccSerialNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipUri()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaPrlVersion()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getEsn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getCompleteVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getIccSerialNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()> android.permission.READ_PHONE_STATE - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getPhoneName()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> android.permission.READ_PHONE_STATE - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getIsimImpi()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getMeid()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getEsn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.PhoneNumberUtils: java.lang.String getUsernameFromUriNumber(java.lang.String)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> android.permission.READ_PHONE_STATE - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getActiveApnHost(java.lang.String)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getImei()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.IccRecords: java.lang.String getServiceProviderName()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaPrlVersion()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaMin()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.CallTracker: java.lang.String checkForTestEmergencyNumber(java.lang.String)> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaEriText()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String getEsn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaEriText()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneBase: java.lang.String getMsisdn()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> - @DSSource({DSSourceKind.UNIQUE_IDENTIFIER}) 
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.GpsSatellite: int getPrn()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getFeatureName()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.sip.SipPhone: android.telephony.CellLocation getCellLocation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getAdminArea()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: float getSpeed()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.MockProvider: long getStatusUpdateTime()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.util.Locale getLocale()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationManager: java.util.List getProviders(boolean)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getCountryName()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.SmsCbLocation: int getLac()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.GpsSatellite: float getSnr()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.GeocoderParams: java.util.Locale getLocale()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: int getBytesSize()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.PassiveProvider: long getStatusUpdateTime()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.sip.SipPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.PassiveProvider: java.lang.String getName()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getNetworkBasedCountry()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.location.ILocationProvider$Stub$Proxy: long getStatusUpdateTime()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: int getMaxAddressLineIndex()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Criteria: int getVerticalAccuracy()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: long getElapsedRealtimeNanos()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: double getLatitude()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: float getBearing()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationProvider: java.lang.String getName()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Mesh$AllocationBuilder: int getCurrentVertexTypeIndex()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.MockProvider: int getStatus(android.os.Bundle)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: android.os.Bundle getExtras()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.graphics.SurfaceTexture getSurfaceTexture()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Criteria: int getPowerRequirement()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.gsm.GsmCellLocation: int getPsc()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.GpsStatus: java.lang.Iterable getSatellites()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.camera.LocationManager: android.location.Location getCurrentLocation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getPremises()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.gsm.GsmCellLocation: int getLac()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.location.GpsNetInitiatedHandler: byte[] stringToByteArray(java.lang.String,boolean)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.cdma.CdmaCellLocation: int getSystemId()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationProviderProxy: java.lang.String getName()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getThoroughfare()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.camera.RecordLocationPreference: java.lang.String getValue()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMALTEPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationRequest: java.lang.String getProvider()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.LocationManagerService: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.IGpsStatusProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationRequest: int getQuality()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.MockProvider: com.android.internal.location.ProviderProperties getProperties()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: long getTime()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Element getElement()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getAddressLine(int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.PassiveProvider: com.android.internal.location.ProviderProperties getProperties()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.MockProvider: java.lang.String getName()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Country: int getSource()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GeofenceState: double getDistanceToBoundary()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationProviderProxy: int getStatus(android.os.Bundle)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.location.ILocationProvider$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getPhone()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Geofence: double getLongitude()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ICountryDetector$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.INetInitiatedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationRequest: long getInterval()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.location.ILocationProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getUrl()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationBasedCountryDetector: java.lang.String getCountryFromLocation(android.location.Location)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationBasedCountryDetector: long getQueryLocationTimeout()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getLocality()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.IGpsStatusProvider$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.INetInitiatedListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: java.lang.String getProvider()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationProvider: int getPowerRequirement()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationProviderProxy: com.android.internal.location.ProviderProperties getProperties()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.LocationManagerService: java.util.List getAllProviders()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationManager: java.util.List getAllProviders()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Criteria: int getSpeedAccuracy()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.GpsStatus: int getTimeToFirstFix()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Geofence: int getType()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Geofence: float getRadius()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GpsLocationProvider: android.location.INetInitiatedListener getNetInitiatedListener()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Geofence: double getLatitude()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: android.os.Bundle getExtras()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: double getAltitude()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: double getLongitude()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.GpsSatellite: float getElevation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Type getType()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: android.location.Location getExtraLocation(java.lang.String)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.view.Surface getSurface()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.IGeocodeProvider$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.IGpsStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GpsLocationProvider: com.android.internal.location.ProviderProperties getProperties()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Country: java.lang.String getCountryIso()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationProvider: int getAccuracy()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.GpsStatus: int getMaxSatellites()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.google.android.apps.lightcycle.util.LocationProvider: android.location.Location getCurrentLocation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getSimBasedCountry()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.location.ILocationProvider$Stub$Proxy: int getStatus(android.os.Bundle)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.GeocoderParams: java.lang.String getClientPackage()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLocaleCountry()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.gsm.GsmCellLocation: int getCid()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.sip.SipPhoneBase: void getPreferredNetworkType(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationRequest: long getExpireAt()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.LocationManagerService: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationManager: android.location.Location getLastLocation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GpsLocationProvider: java.lang.String getName()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GpsXtraDownloader: byte[] downloadXtraData()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getPostalCode()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.webkit.GeolocationPermissionsClassic: android.webkit.GeolocationPermissionsClassic getInstance()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.GpsSatellite: float getAzimuth()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GeocoderProxy: java.lang.String getConnectedPackageName()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Country: long getTimestamp()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.location.ILocationProvider$Stub$Proxy: com.android.internal.location.ProviderProperties getProperties()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GpsXtraDownloader: byte[] doDownload(java.lang.String,boolean,java.lang.String,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.location.GpsNetInitiatedHandler: java.lang.String getDialogTitle(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification,android.content.Context)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationRequest: long getFastestInterval()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getSubLocality()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getSubAdminArea()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.AllocationAdapter: int getID(android.renderscript.RenderScript)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: double getLatitude()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Criteria: int getHorizontalAccuracy()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: int getUsage()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GpsLocationProvider: android.location.IGpsStatusProvider getGpsStatusProvider()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLastKnownLocationBasedCountry()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.telephony.SmsCbLocation: int getCid()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationRequest: int getNumUpdates()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GpsLocationProvider: long getStatusUpdateTime()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.GpsLocationProvider: int getStatus(android.os.Bundle)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.ICountryListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.LocationRequest: float getSmallestDisplacement()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getCountryCode()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.phone.PhoneInterfaceManager: int getNetworkType()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: float getAccuracy()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Location: double getLongitude()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Criteria: int getAccuracy()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.PassiveProvider: int getStatus(android.os.Bundle)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Criteria: int getBearingAccuracy()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.location.LocationProviderProxy: long getStatusUpdateTime()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.location.Address: java.lang.String getSubThoroughfare()> - @DSSource({DSSourceKind.LOCATION_INFORMATION}) 
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Call$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: int getNumOfVoicemails()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.sip.SipService: android.os.Looper access$1800()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: android.net.Uri$Builder buildUpon()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getRemoteStreamMaxVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRefreshResponse: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getPointer()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.EasSyncService: com.android.exchange.EasSyncService getServiceForMailbox(android.content.Context,com.android.emailcommon.provider.Mailbox)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsUsageMonitor: int getPremiumSmsPermission(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: boolean isNetworkSupported(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getRilRadioTechnology()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.BackupManagerService: java.lang.String getDestinationString(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.MountService$ObbState: android.os.IBinder getBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthGsm: int getDbm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SMSDispatcher: int getPremiumSmsPermission(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsCbHeader: int getSerialNumber()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInputInnerLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.ContextImpl$ServiceFetcher: java.lang.Object getService(android.app.ContextImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.AdnRecordCache: java.util.ArrayList getRecordsIfLoaded(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthCdma: int getAsuLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: int getConnectionType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getAttributeNames()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClientConnection: int getRemotePort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsSummaryDev()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getServerSessionContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getMasterVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayMessageBody()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: int getPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getUserDataSeptetPadding()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Connection: int getCnapNamePresentation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.Package[] getPackages()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocketAddress: android.net.LocalSocketAddress$Namespace getNamespace()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ServiceStateTracker: boolean getDesiredPowerState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.TrustManagerFactory: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnectionAc getDataConnectionAc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.mail.transport.MailTransport: java.lang.String getHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfo: long getTimeStamp()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnection: java.lang.String getWhatToString(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.MountService: java.lang.String getMountedObbPath(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentFragmentImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiStateTracker: java.lang.String getTcpBufferSizesPropName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmMmiCode: com.android.internal.telephony.MmiCode$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.MobileDataStateTracker: android.net.LinkProperties getLinkProperties()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.HttpConnection: java.lang.String getScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocketImpl: java.lang.Object getOption(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailFrom()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Proxy: java.lang.String getHost(android.content.Context)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getNativeLibraryPath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: byte[] getPdu()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords$EfCsimEprlLoaded: java.lang.String getEfName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.sip.SipConnectionBase: long getDurationMillis()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.ims.IsimRecords getIsimRecords()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService$DataRecorder: long getPeriodEnd()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.NsdServiceInfo: int getPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.UiccCardApplication getUiccCardApplication(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Request: java.lang.String getHostPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellCheckerSubtype()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: int[] getUsersLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: android.telephony.SmsCbEtwsInfo getEtwsWarningInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailBody()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkPolicyManager: int getUidPolicy(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getLastAudibleStreamVolume(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$PathPart: android.net.Uri$PathSegments getPathSegments()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String getPeerHostName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: boolean getCallForwardingIndicator()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIdsForHost(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: java.util.List getPendingMmiCodes(com.android.internal.telephony.Phone)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnAlphaTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri: java.lang.String access$600()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnSetting: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName getDefaultDreamComponent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService: int getCliffLevel(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getFirstChild()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslCertificate$DName: java.lang.String getDName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Connection: android.net.http.SslCertificate getCertificate()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard: int[] getNearestKeys(int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: int getWrappedPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getForegroundCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getGsmLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: int getNetworkPreference()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getResourcePath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: int[] getRunningUserIds()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsResponse: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.DnsSdTxtRecord: byte[] getRawData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard$Key: int[] getCurrentDrawableState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.input.InputManagerService: android.view.InputDevice[] getInputDevices()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.ExchangeService: int getStatusType(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: long getCreateTime()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.EthernetDataTracker: android.net.LinkProperties getLinkProperties()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getCarrierName(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getConfigFile()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthCdma: int getEvdoSnr()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatReader: org.xml.sax.DTDHandler getDTDHandler()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentDataConnectionState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getLastChild()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthCdma: int getCdmaDbm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLUtils$StubKeyManager: java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthLte: int getLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorNumeric()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValueOf(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: java.util.List getBgCallConnections()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getEncryptionKey()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: java.util.List getRunningAppProcesses()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.util.List getAllPermissionGroups(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.ClassLoader access$000()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableUsbRegexs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getQuery()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.EriManager: int getEriFileVersion()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkIdentity: boolean getRoaming()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getRingingCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getLteAsuLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipSession$Stub$Proxy: int getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbCmasInfo: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HandshakeCompletedEvent: javax.security.cert.X509Certificate[] getPeerCertificateChain()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getWantClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccFileHandler: java.lang.String getCommonIccEFPath(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getStreamVolume(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: java.lang.String getProfileName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledApplications(int,java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription access$1300(android.net.sip.SipAudioCall)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: android.database.Cursor doInBackground(java.lang.Void[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int getApiLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: android.os.IBinder getFocusedWindowToken()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.wallpaper.IWallpaperService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.ComponentName getActivityClassForToken(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard: int getHeight()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getUseClientMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.RtpStream: int getSocket()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkTemplate: java.lang.String getSubscriberId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.RtpStream: java.net.InetAddress getRemoteAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri: java.lang.String access$300()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.cdma.CdmaSmsCbProgramResults: int getCategoryResult()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.RetryManager: int getRetryTimer()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getCdmaEriIconIndex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.EthernetDataTracker: int getDefaultGatewayAddr()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getGsmDbm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.String getStringParam(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.RequestHandle: java.lang.String getMethod()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.Menu getMenu()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.util.List getAllCellInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.wallpaper.IWallpaperService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.LightsService: com.android.server.LightsService$Light getLight(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getWantClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getEnableSessionCreation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getWantClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.NodeList getChildNodes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(java.security.interfaces.DSAPrivateKey)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.ProxyProperties getGlobalProxy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.AttachmentDownloadService: int getSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SpnOverride: java.lang.String getSpn(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlVersion()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: java.lang.String getFormat()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getEncodedAuthority()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.KeyboardView: android.inputmethodservice.KeyboardView$OnKeyboardActionListener getOnKeyboardActionListener()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.security.Provider$Service: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getLocalSocketAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$4: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$3: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$1: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$2: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$8: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$7: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$6: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$5: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$9: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.lang.String getFormat()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call$State getActiveFgCallState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getInetAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: com.android.server.pm.UserManagerService getUserManagerLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: boolean getCsimSpnDisplayCondition()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getPath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: com.android.internal.telephony.DctConstants$State getOverallState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService: android.net.wifi.WifiInfo getConnectionInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] getDnsForwarders()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.input.InputManagerService: android.view.InputDevice getInputDevice(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: float getWindowCompatibilityScale(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getEncodedQuery()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthCdma: int getCdmaEcio()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.WebAddress: java.lang.String getHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getInputEncoding()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder: com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: int getFrequencyBand()> android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getNeedClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: int getNetworkPreference()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLUtils$StubKeyManager: java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ServiceWatcher: android.os.IBinder getBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getContentDisposition()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getInterface()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ClipboardService: android.content.ClipData getPrimaryClip(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.wallpaper.WallpaperService: java.util.ArrayList access$300(android.service.wallpaper.WallpaperService)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getEncodedFragment()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LinkCapabilities: java.lang.String get(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getEncodedSchemeSpecificPart()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthCdma: int getLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.AccountService$1: android.os.Bundle getConfigurationData(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.content.Context)> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: boolean getDependencyMet()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HttpsURLConnection: java.security.Principal getLocalPrincipal()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslError: int getPrimaryError()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.CharacterDataImpl: int getLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getMobileRxPackets()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.WspTypeDecoder: long getValue32()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pGroupList: java.lang.String getOwnerAddr(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getPhoneType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.IAccessibilityServiceClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.RequestQueue$ActivePool: org.apache.http.HttpHost getProxyHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WallpaperManagerService: int getHeightHint()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.EthernetDataTracker: android.net.EthernetDataTracker getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: int getThreadStatsTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getUseClientMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker: int enableApnType(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: boolean getMobileDataEnabled()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getRemainingPostDialString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.WspTypeDecoder: int getDecodedDataLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.dreams.IDreamService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableWifiRegexs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Connection: java.lang.String getCnapName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.ArrayList)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig getLegacyVpnConfig()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Call getCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pGroupList: int getNetworkId(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl: org.w3c.dom.DOMStringList getParameterNames()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getNextWaitingApn()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getMasterStreamType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatReader: java.lang.Object getProperty(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkManagementEventObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SIMFileHandler: java.lang.String getEFPath(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedProtocols()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.SmsHeader)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getOOBInline()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LinkProperties: android.net.ProxyProperties getHttpProxy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord getProcessRecordLocked(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.RequestQueue: android.net.http.Request getRequest()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket createSocket()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult access$500(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataCallState)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ims.IsimFileHandler: java.lang.String getEFPath(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: int getUidForSharedUser(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLParameters: java.lang.String[] getCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.ErrorStrings: java.lang.String getString(int,android.content.Context)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getReuseAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.wallpaper.IWallpaperEngine$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsRawData: byte[] getBytes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbEtwsInfo: int getWarningType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClient: org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: byte[] getRawData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataKSC5601(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getLteOnCdmaModeStatic()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: int getPkeyContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocket: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getPrefix()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getStreamMaxVolume(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getRemoteAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.input.InputManagerService: int[] getInputDeviceIds()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: javax.net.ssl.SSLSession getSession()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.UserManagerService: android.graphics.Bitmap getUserIcon(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Tethering$TetherInterfaceSM: int getLastError()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getValueForVibrateSetting(int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: boolean getFeature(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.security.IKeyChainService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkInfo: int getSubtype()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: java.util.ArrayList getWaitingApns()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.BaseNetworkStateTracker: android.net.LinkProperties getLinkProperties()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClient$2: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodSettings: int getCurrentUserId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: boolean getSendKeepAlive()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSocket getSocket()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.BatteryService: int getBatteryLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getPeerProfile()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.cdma.CdmaSmsCbProgramData: int getOperation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsCbHeader: int getServiceCategory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.display.DisplayManagerService: android.view.DisplayInfo getDisplayInfo(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.CDATASectionImpl: short getNodeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryForNetwork(android.net.NetworkTemplate,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: int getCDMAIndex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: android.view.textservice.SuggestionsInfo getNotInDictEmptySuggestions()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.security.fortress.Services: java.security.Provider$Service getSecureRandomService()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.ContextImpl$StaticServiceFetcher: java.lang.Object getService(android.app.ContextImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.CommentImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.InputMethodService: android.app.Dialog getWindow()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.EthernetDataTracker: android.net.LinkCapabilities getLinkCapabilities()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TwilightService$TwilightState: long getTodaySunrise()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getSupportedSSLParameters()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: int getRssi()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimImpi()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String[] getIsimImpu()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.content.IContentService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.app.IMediaContainerService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkPolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.app.IMediaContainerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getLastAccessedTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: java.util.List getPendingMmiCodes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.usb.UsbService: android.hardware.usb.UsbAccessory getCurrentAccessory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.util.List getPersistentApplications(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMdnNumber()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.sip.SipConnectionBase: long getConnectTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Connection: byte[] getBuf()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CommandDetails: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getNeedClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: java.util.List getRunningExternalApplications()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ISpellCheckerService$Stub$Proxy: com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int,android.net.SSLSessionCache)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPacketBufferSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthCdma: int getEvdoDbm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.net.NetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getReceiveBufferSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getWantClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedProtocols()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: long getHoldDurationMillis()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNamespaceURI()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: java.lang.String getSSID()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getReryConfig(boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.VMClassLoader: java.net.URL getResource(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager: int getCdmaSubscriptionSource()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getVibrateSetting(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService: android.os.Messenger getWifiStateMachineMessenger()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: int getTaskForActivityLocked(android.os.IBinder,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.google.android.apps.lightcycle.panorama.StitchingService: android.net.Uri access$700(com.google.android.apps.lightcycle.panorama.StitchingService,java.lang.String,android.net.Uri)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory$1: java.security.cert.X509Certificate[] getAcceptedIssuers()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.INsdManager$Stub$Proxy: android.os.Messenger getMessenger()> android.permission.INTERNET - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getTarget()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getNextSibling()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslError: java.lang.String getUrl()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfacePairs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LinkProperties: java.util.Collection getAddresses()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getBackgroundCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.AppWidgetService: int[] getAppWidgetIdsForHost(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: int getPremiumSmsPermission(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ProxyProperties: java.net.InetSocketAddress getSocketAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.Object getValue(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.io.File access$2200(com.android.server.pm.PackageManagerService,java.io.File)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiStateMachine: int getFrequencyBand()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbCmasInfo: int getCategory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: boolean getMeteredHint()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Vpn: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedAuthority()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pGroup: android.net.wifi.p2p.WifiP2pDevice getOwner()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: boolean getNeedClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.RequestQueue: org.apache.http.HttpHost getProxyHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.UiccCardApplication getApplication(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToServiceId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.sip.SipConnectionBase: long getHoldDurationMillis()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getCacheControl()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiNative: java.lang.String getNetworkVariable(int,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: java.util.List getBackgroundCalls()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardStatus$PinState PinStateFromRILInt(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLEngine: int getPeerPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Vpn: java.lang.String getTcpBufferSizesPropName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.RefreshManager: long getLastMessageListRefreshTime(long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: int getRetryCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkPolicyManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthLte: int getAsuLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.server.search.SearchManagerService: java.util.List getSearchablesInGlobalSearch()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: int getIndex(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.DummyDataStateTracker: android.net.NetworkInfo getNetworkInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.util.AsyncService: android.os.Handler getHandler()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: java.util.List getAllCellInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WallpaperManagerService: int getWidthHint()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IThrottleManager$Stub$Proxy: long getPeriodStartTime(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmSMSDispatcher: java.lang.String getFormat()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getByte()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: short getNodeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkTemplate: int getMatchRule()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataGSM7Bit(int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$RcClientDeathHandler: android.os.IBinder getBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getSchemeSpecificPart()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SntpClient: long getNtpTimeReference()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getAsuLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityCdma: int getLatitude()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoLinger()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMErrorImpl: short getSeverity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getTextContent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList(boolean,boolean,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipManager: android.net.sip.SipProfile[] getListOfProfiles()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: android.telephony.SmsCbCmasInfo getCmasWarningInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IWapPushManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.UUSInfo getUUSInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMErrorImpl$1: java.lang.String getUri()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.AppWidgetServiceImpl: java.io.File getSettingsFile(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$PathSegmentsBuilder: android.net.Uri$PathSegments build()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService: long getPeriodStartTime(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsCbHeader: android.telephony.SmsCbEtwsInfo getEtwsInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard: int[] getShiftKeyIndices()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: java.lang.String getPassword()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccFileHandler getIccFileHandler()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri,android.database.Cursor)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getMasterVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getNetworkType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmDataConnection: int getProfileId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.DOMImplementation getDOMImplementation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfo$1: android.telephony.CellInfo createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getEvdoDbm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.RecognitionManagerService: android.content.ComponentName findAvailRecognizer(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.accessibility.AccessibilityManagerService$Service: float findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ServiceStateTracker: java.util.List getAllCellInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimDomain()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMdn()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttributeNS(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.KeyManager[] getKeyManagers()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(int,android.net.NetworkStatsHistory$Entry)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getLteDbm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityCdma: int getBasestationId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.wallpaper.IWallpaperConnection$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Connection: com.android.internal.telephony.Call$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HttpsURLConnection: java.security.Principal getPeerPrincipal()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMin()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getLteCqi()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NsdService$NsdStateMachine: java.lang.String getWhatToString(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataCallState: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionKey()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: int getProtocolIdentifier()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLEngine: java.security.PrivateKey getPrivateKeyById(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: int getCapitalizationType(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getNid()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: int getIndexOnIcc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnection: boolean isRetryNeeded()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.NsdServiceInfo: java.net.InetAddress getHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: int getWifiState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiConfigStore: android.net.DhcpInfoInternal getIpConfiguration(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: android.view.DisplayInfo getDefaultDisplayInfoLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getSCAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.MobileDataStateTracker: android.net.NetworkInfo getNetworkInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.RecognitionManagerService: android.content.ComponentName getCurRecognizer(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkPolicyManager$Stub$Proxy: int getUidPolicy(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: int getNumberPresentation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: int getWifiApState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallTracker: android.os.Message obtainNoPollCompleteMessage(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.WspTypeDecoder: java.lang.String getValueString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getEnableSessionCreation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagName(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getQName(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: int getStatus()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.EmailServiceUtils$NullEmailService: int getApiLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()> android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream: byte[] access$300(org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$Part: java.lang.String getEncoded()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: java.lang.String getProxyAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromServiceId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.DctConstants$Activity getActivity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: int getRequestedOrientation(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbEtwsInfo: byte[] getPrimaryNotificationSignature()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: java.lang.String getLanguage()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.AccountServiceProxy: android.os.Bundle getConfigurationData(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getRingerMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSendBufferSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.IccRecords getIccRecords(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ThrottleManager: long getResetTime(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LinkProperties: java.util.Collection getRoutes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.phone.EmergencyCallbackModeService: boolean getEmergencyCallbackModeCallState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ProxyProperties: java.lang.String getExclusionList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToRGB(byte[],int,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isUidForeground(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.HttpsConnection$1: java.security.cert.X509Certificate[] getAcceptedIssuers()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.WebAddress: java.lang.String getPath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: android.os.Messenger getWifiServiceMessenger()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getNetworkType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$VolumeStreamState: int getStreamType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.lang.String getAsecPackageName(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.RetryManager: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SIMRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.MobileDataStateTracker: java.lang.String getTcpBufferSizesPropName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipSession: android.net.sip.ISipSession getRealSession()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService: android.net.DhcpInfo getDhcpInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.util.List getPathSegments()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ProcessList: long getMemLevel(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.cdma.CdmaSmsCbProgramResults: int getCategory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getPrefix()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getGsmAsuLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.util.List getPathSegments()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pGroupList: java.util.Collection getGroupList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getRingingPhone()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LinkAddress: int getNetworkPrefixLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getLastChild()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.res.Configuration getConfiguration()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.ServiceState getServiceState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedProtocols()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: java.lang.String getLanguageCode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getMinRecordSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthLte: int getDbm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocketAddress: java.lang.String getName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.security.SecureRandom getSecureRandom()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.math.BigInteger getModulus()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getUseClientMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnection$CallSetupException: int getRetryOverride()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ProxyProperties: int getPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.io.FileDescriptor getFileDescriptor$()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbCmasInfo: int getCertainty()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.BerTlv: int getTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodSubtypeListLocked(android.view.inputmethod.InputMethodInfo)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: int getIndexOnSim()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String encodeBody()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getPreviousSibling()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.UserManagerService: int[] getUserIdsLPr()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityLte: android.telephony.CellIdentityLte copy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getOOBInline()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocketImpl: java.io.FileDescriptor[] getAncillaryFileDescriptors()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getLteLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService: int getWifiEnabledState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Connection: java.lang.Object getUserData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMImplementationImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService: java.lang.String getHelpUri()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DriverCall: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.List)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByName(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.support.v4.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.ArrayList)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getPeerPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getSid()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.OperatedClientConnection getWrappedConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipSessionListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map getTxtRecord()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService$4: float getInterpolation(float)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccRecords getIccRecords()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: java.lang.String getIMSI()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.AudioGroup: int getMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: java.lang.String getText()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getSystemId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getSoWriteTimeout()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.FileDescriptor getFileDescriptor$()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TwilightService: com.android.server.TwilightService$TwilightState getCurrentState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ThrottleManager: int getCliffLevel(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityLte: int getCi()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$HandlerParams: android.os.UserHandle getUser()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.google.android.gsf.Gservices: java.lang.String getString(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPeerPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.providers.telephony.SmsProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document newDocument()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getDocumentURI()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.mail.store.ServiceStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(java.lang.Object,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.ClassLoader getParent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsHeader: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getCreationTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMute()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.google.android.apps.lightcycle.panorama.StitchingServiceManager: com.google.android.apps.lightcycle.panorama.StitchingServiceManager$StitchSession popNextSession()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLineCtrlZ()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.NeighboringCellInfo: int getNetworkType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getNodeValue()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getRemoteStreamVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedSchemeSpecificPart()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.IAccountService$Stub$Proxy: int getAccountColor(long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.SSLParametersImpl getDefault()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.CallTracker getCallTracker()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getUserInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.cdma.CdmaSmsCbProgramData: int getLanguage()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCacheListener getListener()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getInstanceName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatReader: org.xml.sax.EntityResolver getEntityResolver()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeValue()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMErrorImpl$1: org.w3c.dom.Node getRelatedNode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: org.w3c.dom.Element getOwnerElement()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService: java.util.List getInputMethodList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.IEmailService getService(android.content.Context,java.lang.String,com.android.emailcommon.service.IEmailServiceCallback)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.WebAddress: java.lang.String getAuthInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getGsmBitErrorRate()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IMediaScannerService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStats: long getElapsedRealtimeAge()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getCdmaDbm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccUtils: byte[] hexStringToBytes(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getOtasp()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()> android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords$EfCsimCdmaHomeLoaded: java.lang.String getEfName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getEncodedAuthority()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getBackgroundCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: java.lang.String getPackageForToken(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.accessibility.AccessibilityManagerService: boolean getActiveWindowBounds(android.graphics.Rect)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiConfiguration: int getAuthType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Document getOwnerDocument()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.View getCustomView()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: android.view.textservice.SuggestionsInfo getInDictEmptySuggestions()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SMSDispatcher: int getNextConcatenatedRef()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService$SpeechItem: int getStreamType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: int getSerialNumber()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: boolean getAutoRegistration()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()> android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.CommentImpl: short getNodeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint64()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getLocalName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint32()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: long getTransferEncoding()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSession getSession()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.UUSInfo getUUSInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByName(android.content.ComponentName)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getLteOnCdmaMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$SetModeDeathHandler: android.os.IBinder getBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephonyRegistry$Stub: com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getWholeText()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: short getNodeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri: java.util.Set getQueryParameterNames()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CommandParams: com.android.internal.telephony.cat.AppInterface$CommandType getCommandType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthLte: int getTimingAdvance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.net.NetworkStatsService: java.lang.String[] getMobileIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Connection: org.apache.http.protocol.HttpContext getHttpContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getSummaryForNetwork(android.net.NetworkTemplate,long,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ProxyProperties: java.lang.String getHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityCdma: int getLongitude()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List getPendingMmiCodes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClientConnection: int getSocketTimeout()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: int getNumberPresentation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getLocalPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentTypeImpl: short getNodeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getCdmaEcio()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$ImeSubtypeListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodFileManager: java.util.HashMap getAllAdditionalInputMethodSubtypes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: boolean getMobileDataEnabled()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.EasSyncService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getMasterMaxVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: int getMessagePriority()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getCdmaMin()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getTcpNoDelay()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$AbstractHierarchicalUri: int getPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getFgPhone()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getPhoneType(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: int getTransactionId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: android.media.IRingtonePlayer getRingtonePlayer()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmCall: java.util.List getConnections()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeP()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeQ()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeListLocked(android.view.inputmethod.InputMethodInfo,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getPeerHost()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityCdma: android.telephony.CellIdentityCdma copy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getTrafficClass()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkIdentity: int getSubType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.cdma.CdmaSmsCbProgramData: int getMaxMessages()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.RefreshManager$Status: long getLastRefreshTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getDataActivity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.LoadedApk$WarningContextClassLoader: java.lang.Class loadClass(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.util.List getPreferredPackages(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase$SubmitPduBase: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getQuery()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaCall: java.util.List getConnections()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords$EfCsimImsimLoaded: java.lang.String getEfName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnection: int getRilRadioTechnology(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsSession$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getEvdoSnr()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getDriverCalls()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.MountService$ObbAction: android.content.res.ObbInfo getObbInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getNeedClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActiveServices: java.util.List getRunningServiceInfoLocked(int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.IdleCache: android.net.http.Connection getConnection(org.apache.http.HttpHost)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbCmasInfo: int getResponseType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.webkit.SslCertLookupTable: android.webkit.SslCertLookupTable getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getEnableSessionCreation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: java.lang.String getSupplicantQuery()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,org.apache.harmony.xnet.provider.jsse.DataStream)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.VMClassLoader: java.util.List getResources(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnection: boolean isRetryForever()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: java.lang.String getSipDomain()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pGroup: java.util.Collection getClientList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.pm.ApplicationInfo getAppInfoForUser(android.content.pm.ApplicationInfo,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: java.lang.String getXmlEncoding()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getEtag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$VolumeStreamState: int getMaxIndex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: java.lang.String getMessageBody()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.ComprehensionTlv: int getTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)> android.permission.USE_SIP - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkManagementEventObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccCardProxy: boolean getIccRecordsLoaded()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsDetail()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri: java.lang.String toSafeString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: int getInstallLocation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,android.content.Context,com.android.internal.telephony.UiccCard)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getSubtitle()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getRetrievalAllowingWindowLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getStatus()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard: java.util.List getKeys()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getTextContent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$DumpState: com.android.server.pm.SharedUserSetting getSharedUser()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.RefreshManager: com.android.email.RefreshManager$Status getMessageListStatusForTest(long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.UiTestAutomationBridge: android.view.accessibility.AccessibilityEvent getLastAccessibilityEvent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getLastAudibleMasterVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.RequestQueue$ActivePool: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.LoadedApk$ServiceDispatcher: java.lang.RuntimeException getUnbindLocation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard: int getKeyHeight()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconIndex(int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: java.lang.String getOperatorNumeric()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.BackupManagerService$PerformFullRestoreTask: com.android.server.BackupManagerService$RestorePolicy readAppManifest(com.android.server.BackupManagerService$FileMetadata,java.io.InputStream)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getInternalSubset()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: long getDurationMillis()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: int getAppOrientation(android.view.IApplicationToken)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLParameters: boolean getNeedClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: java.lang.String getUserName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getPreviousSibling()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getValue()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocketImpl: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ATResponseParser: java.lang.String nextString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoiceMessageCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiSsid: java.lang.String getHexString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.MobileDataStateTracker: android.net.LinkCapabilities getLinkCapabilities()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: javax.sip.address.Address getSipAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.dreams.IDreamManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getDbm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.AdnRecord: java.lang.String getAlphaTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TextServicesManagerService$TextServicesSettings: int getCurrentUserId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getInetAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMALTEPhone: void getAvailableNetworks(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.WebAddress: int getPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.WebAddress: java.lang.String getScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.widget.WidgetManager: com.android.email.widget.WidgetManager getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.BackupManagerService: java.lang.String getCurrentTransport()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getActivePhoneType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$ScoClient: int getCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.RtpStream: int getMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(long,long,long,android.net.NetworkStatsHistory$Entry)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.MountService: int getEncryptionState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipSession$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.InnerNodeImpl: void getTextContent(java.lang.StringBuilder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkQuotaInfo: long getEstimatedBytes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getWantClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.IconLoader: com.android.internal.telephony.cat.IconLoader getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getDnsType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.ArrayList buildValidRawData(java.util.ArrayList)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getLocalName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getRadioTechnology()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiStateTracker: android.net.NetworkInfo getNetworkInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getPointer()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLine()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getSelectedInputMethod()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$100(com.android.internal.telephony.cdma.RuimRecords)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: java.lang.String getEmailFrom()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardStatus$PinState getPin1State()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$PersoSubState PersoSubstateFromRILInt(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.google.common.collect.Lists$TransformingRandomAccessList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TwilightService$TwilightState: long getTomorrowSunrise()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.ComprehensionTlv: int getValueIndex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailTag(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext getSessionContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: com.android.internal.telephony.Phone getPhone()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest(org.apache.http.HttpHost)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getTxPackets(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.KeyManagerFactory: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getTotalRxBytes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getLocalPrincipal()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.webkit.SslClientCertLookupTable: android.webkit.SslClientCertLookupTable getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsSummaryXt()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Connection: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getPeerPrincipal()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: java.util.List getScanResults()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: int getLinkSpeed()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getRxPackets(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.cdma.CdmaConnection getConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.EntityReferenceImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IThrottleManager$Stub$Proxy: long getCliffThreshold(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pWfdInfo: int getDeviceType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.widget.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: long getHoldDurationMillis()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: int getCurrentUserIdLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getLocalCertificates()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.AdnRecord: byte[] buildAdnString(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.lang.String getFormat()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmSmsCbMessage: android.telephony.SmsCbMessage createSmsCbMessage(android.telephony.SmsCbLocation,byte[][])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.SipProfile getLocalProfile()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: int getApnProfileID(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String[] getValueNames()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiStateMachine: java.lang.String getConfigFile()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.cdma.RuimSmsInterfaceManager)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: java.lang.String getPseudoSubject()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkIdentity: int getType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.math.BigInteger getPrivateExponent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getNeedClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.MountService: java.lang.String getSecureContainerPath(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getNextSibling()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: long getDurationMillis()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: int getIndexOnIcc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.cookie.CookieOrigin: java.lang.String getHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: java.lang.String getCallingPackage(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getX()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getY()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getP()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getQ()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: java.math.BigInteger getG()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.InterfaceConfiguration: java.lang.String getHardwareAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getFirstActiveBgCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbEtwsInfo: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallForwardInfo: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.BackupManagerService$PerformFullRestoreTask$RestoreInstallObserver: int getResult()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getLatestConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfoGsm$1: android.telephony.CellInfoGsm createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.sip.SipCallBase: java.util.List getConnections()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()> android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getColumnNumber()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getSchemeSpecificPart()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService$Multicaster: int getUid()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.security.IKeyChainService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getCdmaDefaultRoamingIndicator()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.LoadedApk$WarningContextClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription access$400(android.net.sip.SipAudioCall,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getRecordSize(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMConfiguration getDomConfig()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Call: long getEarliestConnectTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getPragma()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ims.IsimUiccRecords: int getDisplayRule(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: int getWaitingApnsPermFailCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.lang.String getTempContainerId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkInfo: int getType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.String getTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.InputMethodService: java.lang.CharSequence getTextForImeAction(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.LoadedApk$ServiceDispatcher: android.content.ServiceConnection getServiceConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccSmsInterfaceManager: int getPremiumSmsPermission(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IThrottleManager$Stub$Proxy: int getCliffLevel(java.lang.String,int)> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.INsdManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getWantClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.activity.RecentMailboxManager: java.util.ArrayList getMostRecent(long,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.AdnRecord: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getTotalRxPackets()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.BaseCommands: int getLteOnCdmaMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage: int getDataCodingScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getRingerMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getDisabledSystemInputMethods()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: int getPendingAppTransition()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.IServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$000(com.android.internal.telephony.cdma.RuimRecords)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> android.permission.READ_SMS android.permission.RECEIVE_SMS - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsDetail()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccController getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$VolumeStreamState: java.util.concurrent.ConcurrentHashMap getAllIndexes(boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthGsm: int getLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence getMessage()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getAcceptRanges()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIdsForHost(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CsimFileHandler: java.lang.String getEFPath(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: int getIpAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IThrottleManager$Stub$Proxy: long getByteCount(java.lang.String,int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getUserData(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: int getMessageType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getRemoteStreamMaxVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromCodeScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DocumentType getDoctype()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SuggestionsInfo: int getCookie()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.Service: java.lang.String getClassName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfacePairs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocket: int getSendBufferSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.ExchangeService: int getStatusChangeCount(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.TextInfo: int getCookie()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodAndSubtypeHashCodeListLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionMethod()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(long,long,android.net.NetworkStatsHistory$Entry)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: org.w3c.dom.Node getNamedItem(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.sip.SipConnectionBase: java.lang.String getRemainingPostDialString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SentenceSuggestionsInfo: int getOffsetAt(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.security.Provider$Service: java.util.List getAliases()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: long[] getProcessPss(int[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.AbstractInputMethodService: android.view.KeyEvent$DispatcherState getKeyDispatcherState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getParentNode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: int getPhoneType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.BootClassLoader: java.net.URL getResource(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLEngine: java.lang.String getPeerHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: int getVoiceMessageCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$AppState AppStateFromRILInt(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getPrlVersion()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.RtpStream: int getRemotePort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.io.File getDataPathForUser(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NotificationManagerService: long[] getLongArray(android.content.res.Resources,int,int,long[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkQuotaInfo: long getSoftLimitBytes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.AccountService$1: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getImsi()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.IAccessibilityServiceClient$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String getCipherSuite()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.PhoneConstants$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccRecords getIccRecords()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.RestrictedState: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getMessage()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStats: long getElapsedRealtime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getServiceType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.ServiceState getServiceState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.DhcpInfoInternal: java.util.Collection getRoutes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.lang.String getSimOperator()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.MailService: java.util.ArrayList getPopImapAccountList(android.content.Context)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getLastAudibleMasterVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.EmailConnectivityManager: int getActiveNetworkType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Connection: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.UUSInfo getUUSInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: java.util.List getUniqueServiceNames()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiSsid: byte[] getOctets()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: com.android.internal.widget.IRemoteViewsFactory getRemoteViewsFactory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getRingingCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClient: long getMinGzipSize(android.content.ContentResolver)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getEncodedSchemeSpecificPart()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$PathPart: java.lang.String getEncoded()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.mail.store.ImapStore: java.util.Collection getConnectionPoolForTest()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IPhoneStateListener$Stub: com.android.internal.telephony.IPhoneStateListener asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiNative: int getGroupCapability(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToRGB(byte[],int,boolean,byte[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByIntent(android.content.Intent$FilterComparison,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipAudioCall: int getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.IAccountService$Stub$Proxy: android.os.Bundle getConfigurationData(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAParams: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMap(org.apache.harmony.xml.dom.NodeImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.List)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.BaseNetworkStateTracker: android.net.LinkCapabilities getLinkCapabilities()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: com.android.server.wm.MagnificationSpec getDisplayMagnificationSpecLocked(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] getActiveApnTypes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ThrottleManager: long getByteCount(java.lang.String,int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: int getPackageScreenCompatMode(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSendBufferSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: int tether(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.RefreshManager: com.android.email.RefreshManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.net.ConnectivityManager)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.DefaultSSLServerSocketFactory: java.lang.String[] getDefaultCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$PersoSubState getPersoSubState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.Service: android.app.Application getApplication()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPublicExponent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SentenceSuggestionsInfo: int getLengthAt(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.NeighboringCellInfo: int getLac()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$PathSegments: java.lang.Object get(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl$ElementAttrNamedNodeMapImpl: int getLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: int getPortCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard: java.util.List getModifierKeys()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconIndex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SntpClient: long getNtpTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard: int getVerticalGap()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStats: long getTotalBytes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getCurrentDataConnectionState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.ApnSetting fetchDunApn()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getURI(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentGprsState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: android.net.Uri$Builder buildUpon()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthGsm: int getAsuLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService: android.net.wifi.WifiConfiguration getWifiApConfiguration()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLUtils: com.android.emailcommon.utility.SSLSocketFactory getHttpSocketFactory(boolean,javax.net.ssl.KeyManager)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,java.util.HashSet)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getTransactionId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService: java.util.List getShortcutInputMethodsAndSubtypes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getCdmaLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getAuthority()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: byte[] getEncoded()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActiveServices: android.app.PendingIntent getRunningServiceControlPanelLocked(android.content.ComponentName)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getUseClientMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityGsm: int getMnc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNamespaceURI()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: byte[] read(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getBgPhone()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.EasOutboxService$SendMailParser: int getStatus()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.ComponentName getCallingActivity(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.ToneSettings getToneSettings()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStatsHistory: int getIndexBefore(long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccIoResult: com.android.internal.telephony.IccException getException()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkInfo: java.lang.String getTypeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.net.NetworkPolicyManagerService: int[] getUidsWithPolicy(int)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: int getPhoneType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: int getStatus()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLSessionBindingEvent: java.lang.String getName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityGsm: int getMcc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.BackupManagerService: android.content.Intent getConfigurationIntent(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getProxy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.NsdServiceInfo: android.net.nsd.DnsSdTxtRecord getTxtRecord()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.lang.String getApkName(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.IInputMethodSessionWrapper: android.view.inputmethod.InputMethodSession getInternalInputMethodSession()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: java.lang.String getEmailBody()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getKeepAlive()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NodeList getChildNodes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage$PduParser: byte[] getUserData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: org.apache.harmony.xml.dom.AttrImpl getAttributeNode(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.LoadedApk$WarningContextClassLoader: java.net.URL getResource(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService: int getWifiApEnabledState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getTitle()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: int getFrequencyBand()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmCall: com.android.internal.telephony.Phone getPhone()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$AppType getType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.NetworkUpdateResult: int getNetworkId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords$EfPlLoaded: java.lang.String getEfName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallerInfo: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.IAccountService$Stub$Proxy: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$ScoClient: android.os.IBinder getBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityGsm: int getLac()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.phone.BluetoothPhoneService$3: java.lang.String getNetworkOperator()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.INsdManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToBnW(byte[],int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiNative: java.lang.String getMacAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.NeighboringCellInfo: int getPsc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getCdmaAsuLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.BerTlv: java.util.List getComprehensionTlvs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: java.lang.String getBSSID()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getEarliestConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getFirstChild()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getLastSubtypeForInputMethodLocked(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getCssIndicator()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentFragmentImpl: short getNodeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: java.util.List getActiveAdmins(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsCbHeader: int getGeographicalScope()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiStateTracker: android.net.LinkProperties getLinkProperties()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: java.lang.String getUriString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Phone getPhone()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: java.lang.String getConfigFile()> android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiConfigStore: android.net.LinkProperties getLinkProperties(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnection getDataConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.google.android.gsf.Gservices: java.lang.String getString(android.content.ContentResolver,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLine(boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getBaseURI()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.server.search.SearchManagerService: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getMobileTxBytes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getActiveFgCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMessageWaitingIndicator()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.EmailServiceProxy: int getApiLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ISms$Stub$Proxy: int getPremiumSmsPermission(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocket: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager: com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager getInstance(android.content.Context,com.android.internal.telephony.CommandsInterface,android.os.Handler,int,java.lang.Object)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ServiceWatcher: java.lang.String getBestPackageName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.RefreshManager: boolean isRefreshingAnyMessageListForTest()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLEngine: org.apache.harmony.xnet.provider.jsse.OpenSSLEngine getInstance(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.InputMethodService: int getBackDisposition()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$AppState getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DeviceStorageMonitorService: long getMemoryLowThreshold()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTetheredInterfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: android.view.WindowInfo getWindowInfo(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmCallTracker: boolean getMute()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.security.Provider$Service: java.lang.String getClassName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.statusbar.IStatusBarService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.IRecognitionService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.OperatorInfo: com.android.internal.telephony.OperatorInfo$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccCardApplicationStatus: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getRemoteStreamVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TwilightService$TwilightState: long getTodaySunset()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.BackupManagerService: java.util.List allAgentPackages()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.security.fortress.Services: int getCacheVersion()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle getUser()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.DummyDataStateTracker: android.net.LinkProperties getLinkProperties()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiConfiguration: java.lang.String getPrintableSsid()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getCdmaRoamingIndicator()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbCmasInfo: int getUrgency()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String getWrappedHostName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$SetModeDeathHandler: int getMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token jjFillToken()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellChecker()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ClipboardService: android.content.ClipDescription getPrimaryClipDescription()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CommandException: com.android.internal.telephony.CommandException$Error getCommandError()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.Intent createAppErrorIntentLocked(com.android.server.am.ProcessRecord,long,android.app.ApplicationErrorReport$CrashInfo)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: java.lang.String getPackageForIntentSender(android.content.IIntentSender)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.LeafNodeImpl: org.w3c.dom.Node getNextSibling()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkPolicyManager: boolean getRestrictBackground()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStatsHistory: long getTotalBytes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.RouteInfo: java.net.InetAddress getGateway()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimFileHandler: java.lang.String getEFPath(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getPrlVersion()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.gsm.SimSmsInterfaceManager)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.mail.store.ImapStore: com.android.email.mail.store.ImapConnection getConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: int getPreferredOptionsPanelGravity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getPath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: java.lang.String getPkeyAlias()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.IRecognitionService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.TextInfo: int getSequence()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getNotations()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.IconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStatsHistory: long getStart()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.UiModeManagerService: int getCurrentModeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pGroupList: int getNetworkId(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslCertificate$DName: java.lang.String getUName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getCdmaEriIconIndex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.ServerSessionContext getServerSessionContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.DOMImplementation getImplementation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory getDefault()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SIMRecords: int getDisplayRule(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Proxy: org.apache.http.HttpHost getPreferredHttpHost(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: long getConnectTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityGsm: int getCid()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedFragment()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IThrottleManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage$PduParser: long getSCTimestampMillis()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetDefaultSSLParameters()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfoCdma$1: android.telephony.CellInfoCdma createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call getCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaMmiCode: java.lang.CharSequence getMessage()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.EthernetDataTracker: android.net.NetworkInfo getNetworkInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaShort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: long getLastCertReqTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.AudioStream: int getDtmfType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: java.util.List getSupplicantQueryList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getLocalProfile()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: int getDisplayRule(java.lang.String)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getLteSignalStrenght()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getIMSI()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LinkProperties: java.util.Collection getDnses()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.security.IKeyChainService$Stub$Proxy: byte[] getCertificate(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String[] getValueNames()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodSettings: android.util.Pair getLastInputMethodAndSubtypeLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnection: int getRetryTimer()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.TextImpl: short getNodeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetSupportedSSLParameters()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: java.util.List getRingingCalls()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getNativeLibraryPath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ThrottleManager: java.lang.String getHelpUri()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.lang.String[] getSystemSharedLibraryNames()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkPolicyListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document parse(org.xml.sax.InputSource)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate,int,int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords$EfCsimSpnLoaded: java.lang.String getEfName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: com.android.internal.telephony.DctConstants$State getState(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMImplementationImpl: org.apache.harmony.xml.dom.DOMImplementationImpl getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.MountService: java.lang.String[] getSecureContainerList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.lang.String getPkeyAlias()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DctConstants$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.textservice.SpellCheckerService$Session: java.lang.String getLocale()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService$SpeechItem: float getFloatParam(java.lang.String,float)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.CDATASectionImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: int getMessageFormat()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.activity.MessageOrderManager: int getTotalMessageCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: boolean getUseClientMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pGroup: int getNetworkId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.Throttle: long getLastEventTimeForTest()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getTrafficClass()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.activity.MessageOrderManager: int getCurrentPosition()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: boolean getRoaming()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.Certificate[] getLocalCertificates()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.Principal getLocalPrincipal()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: int getProcessLimit()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.InterfaceConfiguration: java.lang.Iterable getFlags()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$102(com.android.internal.telephony.cdma.RuimRecords,byte[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnection: int getDataConnectionId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.phone.EmergencyCallbackModeService: long getEmergencyCallbackModeTimeout()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: short getNodeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.UsageStatsService: com.android.internal.app.IUsageStats getService()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.server.search.SearchManagerService: java.util.List getGlobalSearchActivities()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getNetworkClass(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.SmsHeader getUserDataHeader()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getCurrentPhoneType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getContentEncoding()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getSummaryForAllUid(android.net.NetworkTemplate,long,long,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLEngine: int getEngineContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$2300(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription: java.lang.String[] getAttributeNames()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipManager: boolean isOpened(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthCdma: int getEvdoLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getGsmSignalStrength()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService: long getCliffThreshold(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getTcpNoDelay()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.ItemsIconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.dreams.IDreamService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getLteRssnr()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.ExchangeService: java.lang.String getEasAccountSelector()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: int getFrontActivityScreenCompatMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: int getGeographicalScope()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotalIncludingTags(android.net.NetworkStats$Entry)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: int getServiceCategory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.ExchangeService: com.android.exchange.ExchangeService$AccountList access$600(android.content.Context,com.android.exchange.ExchangeService$AccountList)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocketImpl: android.net.LocalSocketAddress getSockAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int getApplicationBufferSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLSessionBindingEvent: javax.net.ssl.SSLSession getSession()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ServiceWatcher: int getBestVersion()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionKey()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getDefaultSSLParameters()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.KeyboardView$SwipeTracker: float getYVelocity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipAudioCall: android.net.rtp.AudioStream getAudioStream()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getNeedClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IPhoneStateListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getLastPathSegment()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$10: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl: java.lang.Object getParameter(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$11: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$12: java.lang.Object get(org.apache.harmony.xml.dom.DOMConfigurationImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HandshakeCompletedEvent: java.lang.String getCipherSuite()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getPeerPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.NeighboringCellInfo: int getRssi()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService$ActiveAdmin: int getUid()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LinkProperties$1: android.net.LinkProperties createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataActivity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.HttpHost: java.lang.String getHostName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UUSInfo: int getDcs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getOperatorNumeric()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.ims.IsimRecords getIsimRecords()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509TrustManager getDefaultTrustManager()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: android.telephony.SmsCbLocation getLocation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccServiceTable: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictionaryPool getDictionaryPool(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.InnerNodeImpl: java.lang.String getTextContent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String getPeerHostName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconIndex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: int getServiceState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getRemainingPostDialString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: java.util.List getFgCallConnections()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage: int getProtocolIdentifier()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.google.android.apps.lightcycle.panorama.StitchingServiceManager: com.google.android.apps.lightcycle.panorama.StitchingServiceManager getStitchingServiceManager(android.content.Context)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: int getLidState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.app.IMediaContainerService$Stub$Proxy: android.content.res.ObbInfo getObbInfo(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: android.net.ProxyProperties getProxy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.RouteInfo: android.net.LinkAddress getDestination()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: java.lang.String getAuthUserName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkInfo: java.lang.String getSubtypeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: byte[] getNpnSelectedProtocol(java.net.Socket)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMErrorImpl: org.w3c.dom.DOMLocator getLocation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getViewAt(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Connection: boolean getCanPersist()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.lang.String getNameForUid(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.RtpStream: int getLocalPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.server.search.SearchManagerService: android.content.ComponentName getWebSearchActivity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.server.search.SearchManagerService: android.content.ComponentName getGlobalSearchActivity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getMdnNumber()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.sip.SipConnectionBase: long getCreateTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiConfigStore: java.util.List getConfiguredNetworks()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.net.NetworkStatsService$1: android.net.NetworkStats getSummaryForNetwork(android.net.NetworkTemplate,long,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService: java.util.Set onGetFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: long getTimestampMillis()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getLastAudibleStreamVolume(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.IServiceConnection$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.RefreshManager$RefreshStatusMap: com.android.email.RefreshManager$Status get(long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: int getVersion()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.providers.media.IMtpService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SntpClient: long getRoundTripTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker$TxRxSum: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeValue()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.InputMethodService: boolean getCurrentInputStarted()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbCmasInfo: int getSeverity()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.UserManagerService: int getUserSerialNumber(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.IEmailService getExchangeService(android.content.Context,com.android.emailcommon.service.IEmailServiceCallback)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.ProxyProperties getProxy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.net.NetworkStatsService$1: android.net.NetworkStatsHistory getHistoryForNetwork(android.net.NetworkTemplate,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmMmiCode: int getCLIRMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocketImpl: java.io.FileDescriptor getFileDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: float[] getAnimationScales()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: android.os.Messenger getWifiStateMachineMessenger()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long getCreationTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getPeerCertificates()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getValue(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.TrustManagerFactory: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: int getPeerPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: java.lang.String getApnType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.AccountServiceProxy: java.lang.String getDeviceId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getEncodedPath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSenderLocked(int,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.UserManagerService: int[] getUserIds()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard: int getShiftKeyIndex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: int getPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.UiModeManagerService: int getNightMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService$DataRecorder: long getPeriodTx(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getEncoded()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService$DataRecorder: long getPeriodRx(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityGsm: int getPsc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getLocalName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService: long getResetTime(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getVoiceMessageCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getCdmaMin()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.KeyManagerFactory: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: boolean getIsManualSelection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.CallTracker getCallTracker()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: boolean getVoiceMessageWaiting()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.RequestHandle: int getRedirectCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getSupportedProtocols()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityCdma: int getSystemId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: int getProtocolIdentifier()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getEvdoAsuLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.SoftInputWindow: int getSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.google.android.picasastore.HttpUtils$MetricsTrackingConnectionManager$1: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLKey: org.apache.harmony.xnet.provider.jsse.OpenSSLEngine getEngine()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.CallManager getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean getEnableSessionCreation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getMasterStreamType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$VolumeStreamState: int getIndex(int,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ITextServicesSessionListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.activity.MessageOrderManager: com.android.email.MessageListContext getListContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: boolean getMute()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.EthernetDataTracker: java.lang.String getTcpBufferSizesPropName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.BootClassLoader: java.util.Enumeration getResources(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.DefaultSSLSocketFactory: java.lang.String[] getDefaultCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoUnfiltered()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClient: org.apache.http.params.HttpParams getParams()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: android.net.wifi.WifiSsid getWifiSsid()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getXPermittedCrossDomainPolicies()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.DummyDataStateTracker: java.lang.String getTcpBufferSizesPropName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.Address get(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getTxBytes(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.ClientSessionContext getClientSessionContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: android.media.IRingtonePlayer getRingtonePlayer()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiStateMachineMessenger()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.app.IMediaContainerService$Stub$Proxy: android.content.pm.PackageInfoLite getMinimalPackageInfo(java.lang.String,int,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.lang.String[] getIsimImpu()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage$SubmitPdu: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength getSignalStrength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: int getPkeyContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.pm.UserInfo getCurrentUser()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.Object getValue(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: java.lang.String getMessageBody()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.security.interfaces.DSAParams getParams()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean getUseClientMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.util.ArrayList getSetCookie()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccCardStatus: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getSimState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.input.InputManagerService: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage: int getStatus()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagNameNS(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.security.Provider$Service: java.lang.String getType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthCdma: int getEvdoEcio()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.BatteryService: int getPlugType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getForegroundCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: java.util.List getProcessesInErrorState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getStreamVolume(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToBnW(byte[],int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getTextContent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaCallTracker: boolean getMute()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media[] getMedia()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.Throttle: int getTimeoutForTest()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkPolicyManager: long computeNextCycleBoundary(long,android.net.NetworkPolicy)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getRemoteSocketAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getMobileRxBytes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NetworkManagementService: int getInterfaceRxThrottle(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.display.DisplayManagerService: int[] getDisplayIds()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.IccCardStatus$CardState getCardState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.IEmailService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.google.android.gsf.Gservices: java.util.Map getStringsByPrefix(android.content.ContentResolver,java.lang.String[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getAuthority()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getEncodedQuery()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: boolean getSpecified()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WallpaperManagerService: java.lang.String getName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.security.SecureRandom getSecureRandomMember()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: int getRotation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getMobileTxPackets()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.dreams.IDreamManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.appwidget.IAppWidgetService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard: int getHorizontalGap()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslCertificate$DName: java.lang.String getCName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: int getNetworkId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: java.lang.String getLocale()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiNative: int getBand()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataUCS2(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityCdma: int getNetworkId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()> android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkIdentity: java.lang.String getSubscriberId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: java.util.ArrayList getSmsCbProgramData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: java.lang.String getServiceCenterAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$002(com.android.internal.telephony.cdma.RuimRecords,byte[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Request: android.net.http.EventHandler getEventHandler()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceRxThrottle(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmServiceStateTracker: com.android.internal.telephony.Phone getPhone()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: java.lang.String getProviderMimeType(android.net.Uri,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService: java.lang.String getConfigFile()> android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getRxBytes(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] getDreamComponents()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.IccCardStatus$PinState getUniversalPinState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getDefaultPhone()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: int getNextMessageId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.AbstractSyncService: void <init>(android.content.Context,com.android.emailcommon.provider.Mailbox)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.WspTypeDecoder: java.util.HashMap getContentParameters()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.IInputMethodWrapper: android.view.inputmethod.InputMethod getInternalInputMethod()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UUSInfo: byte[] getUserData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCallState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: byte[] getIncomingSmsFingerprint()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SimTlv: int getTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DctConstants$State getOverallState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.service.AttachmentDownloadService: int getQueueSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionMethod()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords$EfCsimLiLoaded: java.lang.String getEfName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfo: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: int getTeleService()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: boolean getStrictErrorChecking()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipProfile: int getPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getLastPathSegment()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getCdmaEriIconMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoLinger()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: byte[] getUserData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: int getStatusOnSim()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStats: int[] getUniqueUids()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ISpellCheckerService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String[] getAttributeNames()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getEnableSessionCreation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: void getTextContent(java.lang.StringBuilder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,int,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccCardConstants$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getFragment()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String getLanguage()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiConfigStore: android.net.ProxyProperties getProxyProperties(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLKey: int getPkeyContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActiveServices$ServiceMap: java.util.Collection getAllServices(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsCbHeader: int getNumberOfPages()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.EasSyncService: java.lang.String getTargetCollectionClassFromCursor(android.database.Cursor)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey getInstance(org.apache.harmony.xnet.provider.jsse.OpenSSLKey)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbCmasInfo: int getMessageClass()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbMessage: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.IccFileHandler getIccFileHandler(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$AppType AppTypeFromRILInt(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.String getType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsUidDetail(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: java.util.List getAllPhones()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SuggestionsInfo: int getSequence()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.UiccCard getUiccCard()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.activity.MessageOrderManager: android.os.Handler getHandlerForContentObserver()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<dalvik.system.BaseDexClassLoader: java.lang.Package getPackage(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: void getVisibleWindowsForDisplay(int,java.util.List)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.server.search.SearchManagerService: android.content.ComponentName getAssistIntent(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.DnsPinger: java.util.List getDnsList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.CertificateChainValidator: android.net.http.CertificateChainValidator getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ISpellCheckerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean doRename(int,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsCbHeader: int getDataCodingScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiStateMachine: android.os.Messenger getMessenger()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: int getUidForIntentSender(android.content.IIntentSender)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getPath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getType(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaEriText()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[],int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthCdma: int getDbm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.BaseNetworkStateTracker: android.os.Handler getTargetHandler()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: boolean getReuseAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccIoResult: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.cdma.CdmaSmsCbProgramResults: int getLanguage()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: boolean isStreamMute(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiServiceMessenger()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ISpellCheckerSession$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.LoadedApk$ServiceDispatcher: android.app.ServiceConnectionLeaked getLocation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsCbHeader: android.telephony.SmsCbCmasInfo getCmasInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getLanguage()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SentenceSuggestionsInfo: android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.EmailServiceProxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkPolicyManager: int[] getUidsWithPolicy(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getTotalTxPackets()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.activity.RecentMailboxManager: com.android.email.activity.RecentMailboxManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaLong()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: long getDisconnectTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.RequestQueue: android.net.http.Request getRequest(org.apache.http.HttpHost)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslCertificate$DName: java.lang.String getOName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.EntityReferenceImpl: short getNodeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: java.lang.String getInstallerPackageName(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfo: int hashCode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: int getPropertyInt(java.lang.String[],int,int,int,android.util.DisplayMetrics)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: long getDisconnectTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStatsHistory: long getEnd()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.activity.RecentMailboxManager: com.android.emailcommon.utility.EmailAsyncTask touch(long,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.UiTestAutomationBridge: android.view.accessibility.AccessibilityNodeInfo getRootAccessibilityNodeInfoInActiveWindow()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.AdnRecord: java.lang.String[] getEmails()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMapForRead(org.apache.harmony.xml.dom.NodeImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatParser$CurrentAttributes: int getParserPointer()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByIntent(android.content.Intent$FilterComparison)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: android.os.Bundle getBundle()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceHolder getSurfaceHolder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: byte[] getData(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnection$FailCause: int getErrorCode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.SerialService: java.lang.String[] getSerialPorts()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService$SpeechItem: float getPan()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.AudioGroup: android.net.rtp.AudioStream[] getStreams()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.wallpaper.WallpaperService$Engine: int getDesiredMinimumHeight()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getEntities()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStats: java.lang.String[] getUniqueIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: javax.net.ssl.X509TrustManager getTrustManager()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: int[] getPackageGids(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getNetworkId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStatsHistory: int getIndexAfter(long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getLocalPrincipal()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getVibrateSetting(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getEvdoEcio()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$VolumeStreamState: java.lang.String getSettingNameForDevice(boolean,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getOrigDialString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.GsmAlphabet$TextEncodingDetails: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getPacketBufferSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ThrottleManager: long getCliffThreshold(java.lang.String,int)> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.LoadedApk$WarningContextClassLoader: java.util.Enumeration getResources(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMConfigurationImpl$13: int getLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,com.android.internal.telephony.cdma.sms.UserData,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.google.android.gsf.Gservices: java.lang.Object getVersionToken(android.content.ContentResolver)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getSoTimeout()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: java.lang.String getReason()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: int getLaunchedFromUid(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UUSInfo: int getType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: java.util.List getServices(int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: java.net.SocketAddress getRemoteSocketAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getEncodedUserInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.security.fortress.Services: java.security.Provider$Service getService(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTtys()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: java.lang.String getEfName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService: int getThrottle(java.lang.String)> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.CountryDetectorService$Receiver: android.location.ICountryListener getListener()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiConfigStore: android.net.wifi.NetworkUpdateResult saveNetwork(android.net.wifi.WifiConfiguration)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName[] getDreamComponents()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getSoTimeout()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getSchemeSpecificPart()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.widget.RemoteViewsService: java.lang.Object access$000()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.RequestQueue$ActivePool: android.net.http.ConnectionThread getThread(org.apache.http.HttpHost)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LinkProperties: java.lang.String getInterfaceName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedQuery()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.IEmailServiceCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.DefaultSSLContextImpl: javax.net.ssl.TrustManager[] getTrustManagers()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkStatsHistory: long getBucketDuration()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getPeerPrincipal()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection getFgCallLatestConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsEmergency(android.content.Context)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ThrottleManager: long getPeriodStartTime(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocketImpl: android.net.Credentials getPeerCredentials()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: int getStatusOnIcc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceTxThrottle(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.ExchangeService: com.android.emailcommon.utility.EmailClientConnectionManager getClientConnectionManager(boolean,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.widget.RemoteViewsService: java.util.HashMap access$100()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.display.DisplayManagerService: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getClccLines()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatParser$ClonedAttributes: int getParserPointer()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ContentHandler getContentHandler()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm8BitPacked(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Proxy: java.net.Proxy getProxy(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.MountService: java.lang.String getSecureContainerFilesystemPath(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: java.util.List getForegroundCalls()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedPath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLKey: java.lang.String getAlias()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getIMSI()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.content.pm.RegisteredServicesCache: java.util.Collection getAllServices(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getDocumentElement()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getDataState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatReader: org.xml.sax.ErrorHandler getErrorHandler()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker: java.lang.String[] getActiveApnTypes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkInfo: java.lang.String getExtraInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Connection: org.apache.http.HttpHost getHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailAlphaTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaMmiCode: com.android.internal.telephony.MmiCode$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: android.net.wifi.p2p.WifiP2pDevice getSrcDevice()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getLteRsrq()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getLteRsrp()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.NeighboringCellInfo: java.lang.String toString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: byte[] getNpnSelectedProtocol()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IThrottleManager$Stub$Proxy: long getResetTime(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconMode(int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: java.lang.Object getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.cdma.CdmaSmsCbProgramData: int getAlertOption()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodListLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getLastModified()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService$DataRecorder: int getPeriodCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnAlphaTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.Connection$PostDialState getPostDialState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pDeviceList: java.util.Collection getDeviceList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsCbEtwsInfo: long getPrimaryNotificationTimestamp()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IMediaScannerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService: int getStreamMaxVolume(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiConfiguration getWifiApConfiguration()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LinkAddress: java.net.InetAddress getAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.DnsSdTxtRecord: byte[] access$000(android.net.nsd.DnsSdTxtRecord)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccFileHandler getIccFileHandler()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.Menu getMenu()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SignalStrength: int getEvdoLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getEncodedUserInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.Keyboard: int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker: int disableApnType(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.BootClassLoader: java.lang.Package getPackage(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService: java.util.List getConfiguredNetworks()> android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: android.net.RouteInfo[] getRoutes(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.activity.MessageOrderManager: android.database.Cursor access$500(com.android.email.activity.MessageOrderManager)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.content.IContentService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Call: long getEarliestCreateTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LinkProperties: java.util.Collection getLinkAddresses()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipAudioCall: android.net.sip.SipSession getSipSession()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pWfdInfo: int getMaxThroughput()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: int getGSMIndex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: boolean getKeepAlive()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocket: int getReceiveBufferSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfo: int getTimeStampType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.MountService: int[] getStorageUsers(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.CatCmdMessage$CallSettings getCallSettings()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiInfo: boolean getHiddenSSID()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.EriManager: java.lang.String getCdmaEriText(int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.app.IMediaContainerService$Stub$Proxy: long[] getFileSystemStats(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: boolean getRecordsLoaded()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getLocation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToCodeScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: java.math.BigInteger getX()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.sip.SipConnectionBase: long getDisconnectTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateKey)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription: java.lang.String getAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: int getOrientationFromAppTokensLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getApnSetting()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(android.view.Display)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getCipherSuite()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl$1: java.lang.String getTypeNamespace()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService$SpeechItem: int getIntParam(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: byte[] toNpnProtocolsList(byte[][])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.os.IDropBoxManagerService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.Certificate[] getPeerCertificates()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CatResponseMessage: com.android.internal.telephony.cat.CommandDetails getCmdDetails()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.AndroidHttpClientConnection: int getLocalPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DctConstants$State getState(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnectionTracker: int getRecoveryAction()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getPeerHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.utility.SSLUtils: android.net.SSLCertificateSocketFactory getSSLSocketFactory(boolean,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: org.apache.harmony.xml.dom.AttrImpl getAttributeNodeNS(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.AppInterface$CommandType getCmdType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.Principal getPeerPrincipal()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UsimFileHandler: java.lang.String getEFPath(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub$Proxy: int getMasterMaxVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.CatCmdMessage$BrowserSettings getBrowserSettings()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.IAudioService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.phone.EmergencyCallbackModeService$LocalBinder: com.android.phone.EmergencyCallbackModeService getService()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Request: java.lang.String getUri()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getProxyAuthenticate()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.TextImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getReceiveBufferSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord getRecordForAppLocked(android.app.IApplicationThread)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.DeviceIdentities: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node insertChildAt(org.w3c.dom.Node,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Tethering: java.lang.String[] getErroredIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.UserManagerService: int getUserHandle(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.auth.AuthScope: java.lang.String getHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.UiccCardApplication getApplicationIndex(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$3000(com.android.server.pm.PackageManagerService,android.net.Uri,int,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[],int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: java.lang.String getEfName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.graphics.Bitmap getTaskTopThumbnail(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pDeviceList: android.net.wifi.p2p.WifiP2pDevice get(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: int getPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkQuotaInfo: long getHardLimitBytes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: long getConnectTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellInfoLte$1: android.telephony.CellInfoLte createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getNetworkType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: com.android.internal.telephony.IWapPushManager getWapPushManager()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.CharacterDataImpl: java.lang.String getData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DOMErrorImpl: java.lang.Object getRelatedException()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.rtp.RtpStream: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.cdma.CdmaSmsCbProgramData: int getCategory()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri: android.net.Uri normalizeScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NsdService: android.os.Messenger getMessenger()> android.permission.INTERNET - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodSettings: int getSelectedInputMethodSubtypeHashCode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: int getSoTimeout()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatAttributes: java.lang.String getLocalName(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.AttrImpl: java.lang.String getNodeValue()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pWfdInfo: int getControlPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: boolean getMute()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.UsageStatsService: byte[] readFully(java.io.FileInputStream)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.email.RefreshManager: java.util.Collection getListenersForTest()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.service.textservice.SpellCheckerService$Session: android.os.Bundle getBundle()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService: int getFrequencyBand()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.TextServicesManager: android.view.textservice.TextServicesManager getInstance()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords$EfCsimMdnLoaded: java.lang.String getEfName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.TextInfo: java.lang.String getText()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.EriManager: int getEriNumberOfEntries()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocketImpl: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.input.InputManagerService: int getScanCodeState(int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token getToken(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int getApplicationBufferSize()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.accessibility.AccessibilityManagerService: int getActiveWindowId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeListImpl: int getLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService$DataRecorder: long getPeriodStart()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getDataSize(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WallpaperManagerService: android.app.WallpaperInfo getWallpaperInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getSupportedProtocols()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getLocalIp()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<libcore.net.http.ResponseHeaders: java.lang.String getConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.util.List getPathSegments()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService$SpeechItem: float getVolume()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.ComprehensionTlv: byte[] getRawValue()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getHelpUri()> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.DocumentImpl: boolean getXmlStandalone()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities getLinkCapabilities()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getTagName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getEncodedPath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.AdnRecordCache getAdnCache()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SentenceSuggestionsInfo: int getSuggestionsCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher: int getNumberCategory(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$SuggestionsGatherer: com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$SuggestionsGatherer$Result getResults(int,java.util.Locale)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.WifiP2pWfdInfo: java.lang.String getDeviceInfoHex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.HttpsConnection: java.lang.String getScheme()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getCallState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.BackupManagerService: long getAvailableRestoreToken(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SmsCbHeader: int getPageIndex()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getGlobalProxy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.ExchangeService$AccountObserver: java.lang.String getAccountKeyWhere()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: java.lang.String getEfName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.textservice.ITextServicesManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: int getLocalPort()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.accessibility.AccessibilityManagerService: boolean getAccessibilityFocusBoundsInActiveWindow(android.graphics.Rect)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.TrafficStats: long getTotalTxBytes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLParameters: boolean getWantClientAuth()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.nsd.DnsSdTxtRecord: java.lang.String get(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkPolicyListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getEncryptionMethod()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: int untether(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityLte: int getMcc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccRecords: boolean getVoiceCallForwardingFlag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsService$Stub$Proxy: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$AbstractPart: java.lang.String getDecoded()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: boolean getEnableSessionCreation()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkIdentity: java.lang.String getNetworkId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfacePairs()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityLte: int getMnc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getParentNode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getRefresh()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IThrottleManager$Stub$Proxy: int getThrottle(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: com.android.server.InputMethodManagerService$ImeSubtypeListItem getNextInputMethod(boolean,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getDnsQueryName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<libcore.net.http.RequestHeaders: java.lang.String getConnection()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: int getCdmaEriIconMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.Connection: java.lang.String getOrigDialString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLSession getSession()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getLanguage()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.NeighboringCellInfo: int getCid()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.BaseNetworkStateTracker: android.net.NetworkInfo getNetworkInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: javax.net.ssl.SSLSession getSession()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: android.net.ProxyProperties getGlobalProxy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.BaseCommands: com.android.internal.telephony.CommandsInterface$RadioState getRadioState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ITelephonyRegistry$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long getLastAccessedTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SimTlv: byte[] getData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.content.pm.ActivityInfo getActivityInfoForUser(android.content.pm.ActivityInfo,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.Runnable getDelegatedTask()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getVersion()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.WifiConfigStore: java.lang.String getConfigFile()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: short getNodeType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.RetryManager: int getRetryCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.ExchangeService: android.content.Context getContext()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getQuery()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.Object[] getValues()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.SmsMessage: byte[] getUserData()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey: org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateCrtKey)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.EriManager: int getEriFileType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getContentType()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$StringUri: java.lang.String getFragment()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getFragment()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityLte: int getPci()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getFormats()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getEncodedFragment()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsMessageBase: int getStatusOnIcc()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.app.LoadedApk$ServiceDispatcher: int getFlags()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.GsmConnection: long getCreateTime()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: int getStorageEncryptionStatus(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.speech.tts.ITextToSpeechService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getFirstActiveRingingCall()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.emailcommon.service.AccountServiceProxy: int getAccountColor(long)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IccSmsInterfaceManager: byte[] makeSmsRecordData(int,byte[])> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: long getContentLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.gsm.SIMRecords: boolean getVoiceCallForwardingFlag()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.wifi.ScanResult$1: android.net.wifi.ScanResult createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.CommandParamsFactory getInstance(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.IccFileHandler)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalSocket: int getSoTimeout()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.ThrottleService: long getByteCount(java.lang.String,int,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] getId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.ExpatParser$ExpatLocator: int getLineNumber()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.am.ActivityManagerService: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellSignalStrengthCdma: int getCdmaLevel()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLDSAPrivateKey: byte[] getEncoded()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cat.ComprehensionTlv: int getLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: float getAnimationScale(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.MenuInflater getMenuInflater()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.SocketAddress getLocalSocketAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkInfo: java.lang.String getReason()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String[] getMobileIfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.media.AudioService$AudioFocusDeathHandler: android.os.IBinder getBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String encodeBody()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IntRangeManager: boolean isEmpty()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$HierarchicalUri: java.lang.String getAuthority()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.TwilightService$TwilightState: long getYesterdaySunset()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getRUIMOperatorNumeric()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Proxy: java.lang.String getDefaultHost()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Call$State getState()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNamespaceURI()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor getInputMonitor()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.dreams.DreamManagerService: android.content.ComponentName getDefaultDreamComponent()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.MountService: android.os.storage.StorageVolume[] getVolumeList()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.connectivity.Tethering: int[] getUpstreamIfaceTypes()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.WifiService: java.util.List getScanResults()> android.permission.ACCESS_WIFI_STATE - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listInterfaces()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getPrefix()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.DummyDataStateTracker: android.net.LinkCapabilities getLinkCapabilities()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityGsm: android.telephony.CellIdentityGsm copy()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.os.ServiceManagerNative: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.EasSyncService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.cdma.CdmaSmsCbProgramData: java.lang.String getCategoryName()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.CellIdentityLte: int getTac()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getExpires()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.EasOutboxService$SendMailEntity: long getContentLength()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.INetworkPolicyManager$Stub$Proxy: int[] getUidsWithPolicy(int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.telephony.TelephonyManager: int getLteOnCdmaMode()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.IWapPushManager$Stub: com.android.internal.telephony.IWapPushManager asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientOptions()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.DataConnection: int getRetryCount()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.NetworkTemplate: java.lang.String getNetworkId()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: int getOrientationFromWindowsLocked()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePath()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getLoadingView()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.SmsAddress: java.lang.String getAddressString()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.Uri$OpaqueUri: java.lang.String getUserInfo()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getTokenWindowsOnDisplay(com.android.server.wm.WindowToken,com.android.server.wm.DisplayContent)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.internal.telephony.ISms$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] getChangeCipherSpecMesage(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.net.http.Headers: java.lang.String getWwwAuthenticate()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NetworkManagementService: android.net.RouteInfo[] getRoutes(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<com.android.server.NetworkManagementService: int getInterfaceTxThrottle(java.lang.String)> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()> - @DSSource({DSSourceKind.NETWORK_INFORMATION}) 
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAllAccounts()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts()> android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<com.google.android.picasasync.Authorizer: java.lang.String getAuthToken(java.lang.String)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> android.permission.AUTHENTICATE_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(android.accounts.AccountManagerService$UserAccounts,java.lang.String)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: java.util.HashMap access$1300(android.accounts.AccountManager)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<com.google.android.picasasync.Authorizer: java.lang.String getFreshAuthToken(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService: android.accounts.AccountManagerService getSingleton()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService$Session: android.accounts.IAccountManagerResponse getResponseAndClose()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)> android.permission.AUTHENTICATE_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getRunningAccounts()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService: android.accounts.AccountManagerService$UserAccounts getUserAccounts(int)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.os.Handler access$600(android.accounts.AccountManager)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: java.lang.Exception access$400(android.accounts.AccountManager,int,java.lang.String)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.IAccountManager access$000(android.accounts.AccountManager)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.USE_CREDENTIALS android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.MANAGE_ACCOUNTS android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<android.accounts.AccountManagerService$Session: java.lang.String toDebugString()> - @DSSource({DSSourceKind.ACCOUNT_INFORMATION}) 
<com.android.server.sip.SipSessionGroup: java.lang.String getLocalProfileUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Audio$Albums: android.net.Uri getContentUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.ex.chips.Queries$Query: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.emailcommon.provider.EmailContent: android.net.Uri getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<libcore.net.http.ResponseHeaders: java.net.URI getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.content.CursorLoader: android.net.Uri getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumsUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String,long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.ccil.cowan.tagsoup.Schema: java.lang.String getURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostPhotosUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String,long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadRecordsUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getAlbumCoverUri(long,java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<gov.nist.javax.sip.header.ProxyAuthenticate: javax.sip.address.URI getURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.xml.sax.helpers.AttributesImpl: java.lang.String getURI(int)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getSecurityMode()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.net.sip.SipProfile: javax.sip.address.SipURI getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<gov.nist.javax.sip.header.RequestLine: gov.nist.javax.sip.address.GenericURI getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.content.ClipData$Item: android.net.Uri getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPhotosUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.server.am.ActivityRecord: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.javax.sip.address.GenericURI getParameterAsURI(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.hardware.usb.UsbAccessory: java.lang.String getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Audio$Artists$Albums: android.net.Uri getContentUri(java.lang.String,long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<gov.nist.javax.sip.address.AddressImpl: javax.sip.address.URI getURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.videoeditor.service.VideoEditorProject: android.net.Uri getExportedMovieUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUsersUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: com.android.internal.policy.impl.keyguard.KeyguardSecurityView getSecurityView()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.camera.PhotoModule$ImageNamer: android.net.Uri getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.providers.media.MediaProvider: android.net.Uri getAlbumArtOutputUri(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,long,android.net.Uri)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.phone.PhoneUtils: com.android.internal.telephony.Phone getSipPhoneFromUri(com.android.internal.telephony.CallManager,java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.server.pm.PackageManagerService$InstallParams: android.net.Uri getPackageUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadsUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.server.am.ServiceRecord$StartItem: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.content.pm.VerificationParams: android.net.Uri getOriginatingURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<libcore.net.http.RequestHeaders: java.net.URI getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getBackupSecurityMode(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSettingsUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostAlbumsUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.UploadTaskEntry: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Files: android.net.Uri getMtpReferencesUri(java.lang.String,long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.emailcommon.utility.AttachmentUtilities: android.net.Uri getAttachmentUri(long,long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String getURI(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<gov.nist.javax.sip.header.WWWAuthenticate: javax.sip.address.URI getURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.ex.chips.RecipientEntry: android.net.Uri getPhotoThumbnailUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.content.ContentProviderOperation: android.net.Uri getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadUri(long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<java.lang.SecurityManager: java.lang.Object getSecurityContext()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.webkit.HTML5VideoView: boolean getPauseDuringPreparing()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.ex.chips.Queries$Query: android.net.Uri getContentFilterUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Video$Thumbnails: android.net.Uri getContentUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getURI(int)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<gov.nist.javax.sip.header.ims.PAssociatedURI: javax.sip.address.URI getAssociatedURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<java.lang.System: java.lang.SecurityManager getSecurityManager()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.apache.http.impl.client.DefaultRedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Audio$Genres$Members: android.net.Uri getContentUri(java.lang.String,long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.camera.VideoModule$VideoNamer: android.net.Uri getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getSecurityMechanism()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.launcher2.LauncherSettings$Favorites: android.net.Uri getContentUri(long,boolean)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.email.AttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.phone.PhoneUtils: android.net.Uri getProviderGatewayUri(android.content.Intent)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<libcore.net.http.HttpEngine: java.net.URI getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.apache.http.message.BasicRequestLine: java.lang.String getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.kxml2.io.KXmlParser: java.lang.String getNamespaceUri(int)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<gov.nist.javax.sip.header.AuthenticationHeader: javax.sip.address.URI getURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getURI(int)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.media.Ringtone: android.net.Uri getUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespaceURI(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Audio$Artists: android.net.Uri getContentUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumUri(long)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()> android.permission.WRITE_EXTERNAL_STORAGE android.permission.INTERNET android.permission.VIBRATE - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getPhotoUri(long,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.content.pm.VerificationParams: android.net.Uri getVerificationURI()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.net.Uri: android.net.Uri getCanonicalUri()> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.content.res.XmlBlock$Parser: java.lang.String getNamespaceUri(int)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<com.google.android.picasastore.FIFEUtil: java.lang.String getImageUriOptions(android.net.Uri)> - @DSSource({DSSourceKind.FILE_INFORMATION}) 
<android.bluetooth.IBluetoothPbap$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothInputDevice$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getUuids()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteClass(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkCapabilities getLinkCapabilities()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.RemoteDevices: com.android.bluetooth.btservice.RemoteDevices$DeviceProperties getDeviceProperties(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothServerSocket: int getChannel()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapAuthenticator: byte[] onAuthenticationResponse(byte[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> android.permission.BLUETOOTH - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hid.HidService: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pan.PanService: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: byte[] getAddress()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: int getBondState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneNum()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: int getAdapterConnectionState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterProperties: int getConnectionState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getAddress()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothTetheringDataTracker: java.lang.String getTcpBufferSizesPropName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)> android.permission.BLUETOOTH - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetService: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetService: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadsetPhone$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHealth$Stub$Proxy: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.AtPhonebook: boolean getCheckingAccessPermission()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpService: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumActiveCall()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: int getProfileConnectionState(int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: int getState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: int getDiscoverableTimeout()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.Config: java.lang.Class[] getSupportedProfiles()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetService: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetPhoneState: int getBatteryCharge()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.Utils: byte[] getByteAddress(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hid.HidService: com.android.bluetooth.hid.HidService getHidService()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppPreference: java.lang.String getName(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppManager: int getBatchSize()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothTetheringDataTracker: int getDefaultGatewayAddr()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothDevice getClient()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcard(boolean,byte[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetPhoneState: int getSignal()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetService: int getPriority(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: android.os.ParcelUuid[] getUuids()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String createOneEntry(boolean)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getConnectedHealthDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo getNetworkInfo()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getAlias()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hdp.HealthService: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetPhoneState: int getSpeakerVolume()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothA2dp$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hdp.HealthService: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppUtility: com.android.bluetooth.opp.BluetoothOppSendFileInfo getSendFileInfo(android.net.Uri)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppSendFileInfo: com.android.bluetooth.opp.BluetoothOppSendFileInfo generateFileInfo(android.content.Context,android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.Utils: byte[] getBytesFromAddress(java.lang.String)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hid.HidService: int getPriority(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpService: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppRfcommTransport: java.lang.String getRemoteAddress()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppBatch: com.android.bluetooth.opp.BluetoothOppShareInfo getPendingShare()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> android.permission.BLUETOOTH - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothDevice: int getBondState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetooth getBluetoothService(android.bluetooth.IBluetoothManagerCallback)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker getInstance()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetStateMachine: int getAudioState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getScanMode()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getNetworkOperator()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hdp.HealthService: java.util.List getHealthDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetService: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothDevice: android.bluetooth.IBluetooth getService()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> android.permission.BLUETOOTH - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppManager: java.lang.String getDeviceName(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hid.HidService: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: com.android.bluetooth.btservice.AdapterService getService()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetPhoneState: int getCallState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getUuids()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: int getState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.AtPhonebook: java.lang.String getLastDialledNumber()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothPbap$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties getLinkProperties()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.media.AudioManager: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: int getBondState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.server.BluetoothManagerService: java.lang.String getAddress()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String createProfileVCard(android.content.Context,int,byte[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hid.HidService: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.ProfileService: android.os.IBinder onBind(android.content.Intent)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterProperties: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hid.HidService: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothPan$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hdp.HealthService: java.util.List lookupHealthDevicesMatchingStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getRemoteDeviceName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothUuid: int getServiceIdentifierFromParcelUuid(android.os.ParcelUuid)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.ProfileService: android.bluetooth.BluetoothDevice getDevice(byte[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String getErrorReason()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothPbap: int getState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppManager: com.android.bluetooth.opp.BluetoothOppManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterProperties: byte[] getAddress()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.Utils: java.lang.String getAddressStringFromByte(byte[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadset$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: int getConnectionState()> android.permission.BLUETOOTH - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: int getScanMode()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetService: com.android.bluetooth.hfp.HeadsetService getHeadsetService()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetPhoneState: int getRoam()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppUtility: java.lang.String getStatusDescription(android.content.Context,int,java.lang.String)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: int getScanMode()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getDeviceType()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothDevice: java.lang.String getName()> android.permission.BLUETOOTH - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hdp.HealthService: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getAudioState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getDiscoverableTimeout()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppTransfer: int getBatchId()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHealthCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpService: int getPriority(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getConnectedHealthDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hdp.HealthService: java.util.List getConnectedHealthDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterProperties: int getBluetoothClass()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.server.BluetoothManagerService: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothPan: boolean isTetheringOn()> android.permission.BLUETOOTH - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBondState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: int getCount()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: int getRemoteClass(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterProperties: android.bluetooth.BluetoothDevice[] getBondedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getAdapterConnectionState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothSocket: int getPort()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket accept(int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.a2dp.A2dpService getA2dpService()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: com.android.bluetooth.btservice.AdapterService getAdapterService()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppPreference: com.android.bluetooth.opp.BluetoothOppPreference getInstance(android.content.Context)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: short getRssi()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pan.PanService: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpService: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getSubscriberNumber()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])> android.permission.BLUETOOTH - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pan.PanService: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothClass: int getDeviceClass()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetoothManager getBluetoothManager()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.RemoteDevices: android.bluetooth.BluetoothDevice getDevice(byte[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.BluetoothDevice[] getBondedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hid.HidService: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterProperties: android.os.ParcelUuid[] getUuids()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: android.bluetooth.BluetoothDevice[] getBondedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService: java.lang.String getAddress()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterProperties: int getScanMode()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()> android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumHeldCall()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.ProfileService: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetPhoneState: int getMicVolume()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetPhoneState: int getService()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getHealthDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterProperties: int getDiscoverableTimeout()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterProperties: int getState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetService: int getAudioState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothDevice: boolean getTrustState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHealth$Stub$Proxy: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppReceiveFileInfo: com.android.bluetooth.opp.BluetoothOppReceiveFileInfo generateFileInfo(android.content.Context,int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: int getState()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothManagerCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothHealthAppConfiguration: int getChannelType()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()> android.permission.BLUETOOTH - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothPan$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothHealth$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.pan.PanService: java.util.List getDevicesMatchingConnectionStates(int[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBluetoothClass()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getConnectedDevices()> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.opp.BluetoothOppPreference: int getChannel(android.bluetooth.BluetoothDevice,int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothDevice: int getServiceChannel(android.os.ParcelUuid)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<com.android.bluetooth.btservice.AdapterProperties: int getProfileConnectionState(int)> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])> - @DSSource({DSSourceKind.BLUETOOTH_INFORMATION}) 
<android.database.CursorWrapper: int getCount()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorToBulkCursorAdaptor: android.os.Bundle getExtras()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: float getFloat(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MergeCursor: short getShort(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractWindowedCursor: short getShort(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: int getColumnCount()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDebug: android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteConnection: int getConnectionId()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: int getColumnIndexOrThrow(java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MergeCursor: int getCount()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractWindowedCursor: java.lang.String getString(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractWindowedCursor: double getDouble(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: android.net.Uri getNotificationUri()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: int getVersion()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MatrixCursor: byte[] getBlob(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: double getDouble(int,int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteGlobal: int getJournalSizeLimit()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MatrixCursor: int getType(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteProgram: java.lang.Object[] getBindArgs()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MergeCursor: byte[] getBlob(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractWindowedCursor: int getInt(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MergeCursor: int getType(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteGlobal: int getWALConnectionPoolSize()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: int getType(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MatrixCursor: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MergeCursor: long getLong(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: long getLong(int,int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteCursor: int getColumnIndex(java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<com.android.providers.telephony.MmsSmsDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractWindowedCursor: byte[] getBlob(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.ContentObserver: android.database.IContentObserver releaseContentObserver()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: java.lang.String getColumnName(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase$1: android.database.sqlite.SQLiteSession initialValue()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.common.content.SyncStateContentProviderHelper getSyncState()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MergeCursor: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MatrixCursor: int getInt(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.BulkCursorToCursorAdaptor: int getCount()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MatrixCursor: long getLong(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MatrixCursor: short getShort(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MergeCursor: int getInt(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: int getColumnCount()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: byte[] getBlob(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: long getLong(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: short getShort(int,int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteProgram: java.lang.String getSql()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MergeCursor: java.lang.String getString(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: android.os.Bundle getExtras()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MergeCursor: float getFloat(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: int getPosition()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.BulkCursorProxy: android.os.Bundle getExtras()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: int getColumnIndex(java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: byte[] getBlob(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteProgram: int getConnectionFlags()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: int getStartPosition()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: int getInt(int,int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteGlobal: int getDefaultPageSize()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: java.util.ArrayList getDbStats()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteGlobal: int getWALAutoCheckpoint()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: long getPageSize()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: double getDouble(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase getDatabase()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteSession getSession()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: android.os.Bundle getExtras()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MatrixCursor: int getCount()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: int getInt(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.ContentObserver: android.database.IContentObserver getContentObserver()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MergeCursor: double getDouble(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: int getColumnIndex(java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.IContentObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.IContentObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteConnection: byte[] access$500()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: byte[] getBlob(int,int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MatrixCursor: float getFloat(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: android.database.CursorWindow getWindow()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractWindowedCursor: float getFloat(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.BulkCursorNative: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: java.lang.String getString(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: short getShort(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: java.lang.String getName()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MatrixCursor: double getDouble(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: int getType(int,int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: java.lang.String getColumnName(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteCursor: int getCount()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteProgram: int getUniqueId()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractWindowedCursor: int getType(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractWindowedCursor: long getLong(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession createSession()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWrapper: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: int getNumRows()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteProgram: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: java.lang.String getString(int,int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorToBulkCursorAdaptor: android.database.BulkCursorDescriptor getBulkCursorDescriptor()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: int getPosition()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorWindow: float getFloat(int,int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: java.lang.Object getUpdatedField(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.CursorToBulkCursorAdaptor: android.database.CursorWindow getWindow(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.AbstractCursor: int getType(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.common.content.SyncStateContentProviderHelper getSyncState()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteConnection: java.lang.String describeCurrentOperationUnsafe()> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.MatrixCursor: java.lang.String getString(int)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)> - @DSSource({DSSourceKind.DATABASE_INFORMATION}) 
<com.android.email.activity.MessagesAdapter$SearchResultsCursor: com.android.emailcommon.provider.Mailbox getSearchedMailbox()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.FolderProperties: int getMessageCountForCombinedMailbox(android.content.Context,long)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.EmailActivity: android.content.Intent createOpenAccountIntent(android.app.Activity,long)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.Welcome: android.content.Intent createOpenAccountInboxIntent(android.content.Context,long)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.Controller: long findOrCreateMailboxOfType(long,int)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.RefreshManager: boolean isRefreshingAnyMailboxListForTest()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxOfType(android.content.Context,long,int)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.UIControllerBase: long getMailboxListMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: java.lang.String getMailboxDisplayName()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.UIControllerBase: long getMessageListMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMailboxIntent(android.app.Activity,long,long)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.MailboxListFragment: long getInitialCurrentMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getSearchedMailbox()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.RefreshManager: com.android.email.RefreshManager$Status getMailboxListStatusForTest(long)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMessageIntent(android.app.Activity,long,long,long)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: java.lang.String getMailboxName()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.widget.WidgetManager: long loadMailboxIdPref(android.content.Context,int)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: long getMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.Welcome: android.content.Intent createOpenMessageIntent(android.content.Context,long,long,long)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getMailboxMessageCount()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.MessageListContext: long getSearchedMailbox()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getAttachmentMailbox()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxWithId(android.content.Context,long)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.FolderProperties: java.lang.String getCombinedMailboxName(long)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getRecentMailboxCount()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.UIControllerTwoPane: long getMailboxSettingsMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.RefreshManager: long getLastMailboxListRefreshTime(long)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.UIControllerSearchTwoPane: long getMailboxSettingsMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.MailboxListFragment: long getSelectedMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.Controller: java.lang.String getMailboxServerName(android.content.Context,int)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: long getMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getSearchMailbox(long)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.MessageListFragment: long getMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.UIControllerOnePane: long getMailboxSettingsMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.UIControllerBase: com.android.email.activity.MailboxListFragment getMailboxListFragment()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getMailbox()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.emailcommon.provider.Mailbox: long findMailboxOfType(android.content.Context,long,int)> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.MessageListContext: long getMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: long getMailboxId()> - @DSSource({DSSourceKind.EMAIL}) 
<android.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.emailcommon.TrafficFlags: int getSyncFlags(android.content.Context,com.android.emailcommon.provider.Account)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncStorageEngine: int getIsSyncable(android.accounts.Account,int,java.lang.String)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.internal.telephony.DataConnectionAc: int getRefCountSync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.exchange.ExchangeService$AccountObserver: java.lang.String getSyncableEasMailboxWhere()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.internal.telephony.DataConnectionAc: java.util.Collection getApnListSync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.app.ContextImpl$ApplicationContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: long[] getSyncSamples()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentResolver: java.util.List getCurrentSyncs()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncStorageEngine: int getSyncRandomOffset()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SyncSampleBox getSyncSampleBox()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.providers.contacts.TransactionContext: java.util.Set getUpdatedSyncStates()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncStorageEngine: java.util.ArrayList getSyncHistory()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncStorageEngine: java.util.ArrayList getSyncStatus()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatus(android.content.SyncStorageEngine$AuthorityInfo)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: java.lang.String getEndSync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncStatusInfo: long getPeriodicSyncTime(int)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.READ_SYNC_STATS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.ApnSetting getApnSettingSync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.internal.telephony.DataConnectionAc: android.net.LinkCapabilities getLinkCapabilitiesSync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.os.CommonTimeConfig: int getClientSyncInterval()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSyncRequestUri()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.contacts.list.CustomContactListFilterActivity: int getSyncMode(com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: long[] getSyncSamples()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.providers.calendar.CalendarInstancesHelper: java.lang.String getSyncIdKey(java.lang.String,long)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.exchange.adapter.ProvisionParser: java.lang.String getSecuritySyncKey()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncStorageEngine: java.util.List getPeriodicSyncs(android.accounts.Account,int,java.lang.String)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncManager: android.content.SyncAdapterType[] getSyncAdapterTypes(int)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypes()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.exchange.AbstractSyncService: java.lang.Object getSynchronizer()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncManager: android.content.SyncStorageEngine getSyncStorageEngine()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.providers.calendar.SQLiteContentProvider: boolean getIsCallerSyncAdapter(android.net.Uri)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.app.ContextImpl$ApplicationContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncContext: android.os.IBinder getSyncContextBinder()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.gallery3d.picasasource.PicasaAlbumSet$PicasaSyncTaskFuture: int getSyncResult()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.contacts.util.AsyncTaskExecutors: com.android.contacts.util.AsyncTaskExecutor createAsyncTaskExecutor()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.internal.telephony.DataConnectionAc: android.app.PendingIntent getReconnectIntentSync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.exchange.adapter.PingParser: int getSyncStatus()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.READ_SYNC_STATS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.email.Preferences: boolean getHasShownRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.internal.telephony.DataConnectionAc: int getCidSync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.server.display.DisplayAdapter: com.android.server.display.DisplayManagerService$SyncRoot getSyncRoot()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.SyncStorageEngine: java.util.List getCurrentSyncs(int)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.exchange.adapter.PingParser: java.util.ArrayList getSyncList()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.AbstractThreadedSyncAdapter: android.os.IBinder getSyncAdapterBinder()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.webkit.WebStorageClassic: java.util.Collection getOriginsSync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.READ_SYNC_STATS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.email.activity.MessageViewFragmentBase: com.android.emailcommon.provider.EmailContent$Message reloadMessageSync(android.app.Activity)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentService: java.util.List getCurrentSyncs()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getSyncKey()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.net.wifi.WifiStateMachine: java.util.List syncGetScanResultsList()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.internal.telephony.DataConnectionAc: android.net.LinkProperties getLinkPropertiesSync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: boolean getShouldSync()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.AsyncDialog getAsyncDialog()> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS - @DSSource({DSSourceKind.SYNCHRONIZATION_DATA}) 
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByFileName(java.lang.String)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.util.AbstractCache: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotificationInd: long getExpiry()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduHeaders: byte[] getTextString(int)> - @DSSource({DSSourceKind.SMS_MMS}) 
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.DeliveryInd: long getDate()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduBody: int getPartIndex(com.google.android.mms.pdu.PduPart)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.EncodedStringValue getFrom()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPart: byte[] getData()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.ReadOrigInd: int getReadStatus()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.RetrieveConf: byte[] getTransactionId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getRetrieveText()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendReq: byte[] getTransactionId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPart: byte[] getContentDisposition()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.ReadRecInd: long getDate()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduParser: byte[] getWapString(java.io.ByteArrayInputStream,int)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getFrom()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduParser: com.google.android.mms.pdu.PduHeaders parseHeaders(java.io.ByteArrayInputStream)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getCc()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.MultimediaMessagePdu: long getDate()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendConf: byte[] getTransactionId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendConf: int getResponseStatus()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentId(java.lang.String)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.GenericPdu: int getMessageType()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.ReadOrigInd: byte[] getMessageId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotificationInd: int getDeliveryReport()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.AcknowledgeInd: int getReportAllowed()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotificationInd: byte[] getMessageClass()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.MultimediaMessagePdu: int getPriority()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendReq: int getDeliveryReport()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.ReadRecInd: byte[] getMessageId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.EncodedStringValue: byte[] getTextString()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.ReadOrigInd: long getDate()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentLocation(java.lang.String)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendReq: byte[] getContentType()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getFrom()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageClass()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduHeaders: long getLongInteger(int)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotifyRespInd: byte[] getTransactionId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendReq: long getExpiry()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.util.PduCacheEntry: long getThreadId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getBcc()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.EncodedStringValue: int getCharacterSet()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.ContentType: java.util.ArrayList getImageTypes()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.ContentType: java.util.ArrayList getAudioTypes()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue[] getCc()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotificationInd: byte[] getContentLocation()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.util.PduCacheEntry: int getMessageBox()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPart: byte[] getName()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendConf: byte[] getMessageId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPart: int getCharset()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.DeliveryInd: byte[] getMessageId()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.ReadRecInd: int getReadStatus()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotificationInd: int getContentClass()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.RetrieveConf: byte[] getContentType()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduHeaders: int getOctet(int)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendReq: byte[] getMessageClass()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.AcknowledgeInd: byte[] getTransactionId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.PduBody getBody()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getSubject()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPart: byte[] getContentId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.util.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.util.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPart: byte[] getContentType()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotificationInd: byte[] getTransactionId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotifyRespInd: int getReportAllowed()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.util.PduCache: com.google.android.mms.util.PduCache getInstance()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduBody: int getPartsNum()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendReq: int getReadReport()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue getFrom()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.android.providers.telephony.MmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.RetrieveConf: int getDeliveryReport()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue getEncodedStringValue(int)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.SendReq: long getMessageSize()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.util.DrmConvertSession: byte[] convert(byte[],int)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue getSubject()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPart: byte[] getContentLocation()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.DeliveryInd: int getStatus()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.ReadRecInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotificationInd: long getMessageSize()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByName(java.lang.String)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.DeliveryInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPart: android.net.Uri getDataUri()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.util.PduCacheEntry: com.google.android.mms.pdu.GenericPdu getPdu()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPart: byte[] getContentTransferEncoding()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageId()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.ContentType: java.util.ArrayList getSupportedTypes()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue[] getTo()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.NotifyRespInd: int getStatus()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.GenericPdu: int getMmsVersion()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPersister: byte[] getBytes(java.lang.String)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.RetrieveConf: int getRetrieveStatus()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.RetrieveConf: int getReadReport()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduComposer$PositionMarker: int getLength()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.PduHeaders getPduHeaders()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPart(int)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduComposer: byte[] make()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue[] getEncodedStringValues(int)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.PduPersister getPduPersister(android.content.Context)> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.Base64: byte[] discardNonBase64(byte[])> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.ContentType: java.util.ArrayList getVideoTypes()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.google.android.mms.pdu.PduPart: byte[] getFilename()> - @DSSource({DSSourceKind.SMS_MMS}) 
<com.android.contacts.util.StreamItemEntry: long getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.String getViewGroupActivity()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.IndexerListAdapter: int getPinnedHeaderCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.IndexerListAdapter: int getPositionForSection(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$NicknameKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.dataitem.DataKind getKindOrFallback(java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactPresenceIconUtil: android.graphics.drawable.Drawable getPresenceIcon(android.content.Context,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardUtils: java.lang.String getPropertyNameForIm(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.ActionBarAdapter: int getCurrentTab()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$NameKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getResourceText(android.content.Context,java.lang.String,int,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getEditContactActivityClassName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.ExpirableCache: com.android.contacts.util.ExpirableCache$CachedValue getCachedValue(java.lang.Object)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.EventFieldEditorView: android.app.Dialog createDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticGivenName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.StreamItemAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDeltaList fromQuery(android.net.Uri,android.content.ContentResolver,java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.util.ArrayList getContentValues()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.preference.ContactsPreferences: int getDefaultDisplayOrder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getByRawContactId(java.lang.Long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String toString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.ContactDeletionInteraction: android.app.LoaderManager getLoaderManager()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.dataitem.DataKind getKind()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeId(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.StructuredPostalDataItem: java.lang.String getFormattedAddress()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getCallDetailIntentProvider(com.android.contacts.calllog.CallLogAdapter,int,long,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactLocaleUtils$ContactLocaleUtilsBase: java.util.Iterator getNameLookupKeys(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.model.account.AccountWithDataSet getCreatedAccount(int,android.content.Intent)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactsRequest: java.lang.CharSequence getActivityTitle()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeAndDataSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountTypeWithDataSet: com.android.contacts.model.account.AccountTypeWithDataSet get(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getPlayVoicemailIntentProvider(long,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticMiddleName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContact: com.android.contacts.model.account.AccountType getAccountType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getStreamItems()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.GroupMembershipView$GroupSelectionItem: long getGroupId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsUtils: android.content.Intent getInvitableIntent(com.android.contacts.model.account.AccountType,android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListFilterController: com.android.contacts.list.ContactListFilterController getInstance(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileListFragment$2: int getApproximateTileWidth()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getAsString(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.PhotoActionPopup$ChoiceListItem: int getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.CharSequence getTypeLabel(android.content.res.Resources,java.lang.Integer,java.lang.CharSequence)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.GoogleAccountType: java.lang.String getViewContactNotifyServicePackageName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsApplication: java.lang.Object getSystemService(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ProfileDatabaseHelper: com.android.providers.contacts.ProfileDatabaseHelper getInstance(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.SpecialCharSequenceMgr$SimContactQueryCookie: android.widget.EditText getTextField()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$RelationActionInflater: int getTypeLabelResource(java.lang.Integer)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: int getContactNameDisplayOrder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.account.AccountType getRawContactAccountType(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailDisplayUtils: android.view.View addStreamItemText(android.content.Context,com.android.contacts.util.StreamItemEntry,android.view.View)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.list.ContactListFilter getFilter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindWebsite(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.PhotoDataItem: byte[] getPhoto()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ProfileDatabaseHelper: com.android.providers.contacts.ProfileDatabaseHelper getNewInstanceForTest(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$PhoneKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.PhotoProcessor: byte[] getThumbnailPhotoBytes()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ReorderingCursorWrapper: int getInt(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getSectionForPosition(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardUtils: java.lang.String getPhoneTypeString(java.lang.Integer)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemEntry: java.lang.String getDataSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentProvider$UriData: com.android.providers.contacts.VoicemailUriType getUriType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.PhotoProcessor: byte[] getDisplayPhotoBytes()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: android.widget.ListView getListView()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.dialog.ClearFrequentsDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.aggregation.util.ContactMatcher$MatchScore: int getScore()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: java.lang.String getAccountName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.AbstractContactsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getMimetype()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.ImportExportDialogFragment$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailLayoutController: com.android.contacts.activities.ContactDetailActivity$FragmentKeyListener getCurrentPage()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListItemView: android.widget.TextView getNameTextView()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.aggregation.util.ContactMatcher$MatchScore: long getContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getCompany(android.content.Context,com.android.contacts.model.Contact)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListItemView: android.widget.TextView getDataView()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.phone.ContactsAsyncHelper$ImageTracker: int getPhotoState()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getAccounts(boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.ResolveCache: java.lang.CharSequence getDescription(com.android.contacts.quickcontact.Action)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String getLabelColumn()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupListItem: java.lang.String getAccountName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getEqualityClause(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactDirectoryManager: com.android.providers.contacts.ContactsDatabaseHelper getDbHelper()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.DirectoryPartition: java.lang.String getDirectoryType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallTypeIconsView: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.account.AccountType$EditType getType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StructuredPostalUtils: android.net.Uri getPostalAddressUri(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContact: java.util.List getDataItems()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: int getMaxDisplayPhotoDim()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsApplication: android.content.ContentResolver getContentResolver()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.PhoneNumberInteraction: android.content.CursorLoader getLoader()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.GroupDeletionDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: boolean getUseStrictPhoneNumberComparisonForTest()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<gov.nist.javax.sip.header.Contact: gov.nist.javax.sip.header.ContactList getContactList()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListAdapter: int getSelectedContactPosition()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneNumber()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StopWatch: com.android.contacts.util.StopWatch getNullStopWatch()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$PostalActionInflater: int getTypeLabelResource(java.lang.Integer)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: byte[] access$1700(com.android.mms.data.Contact)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: java.lang.ThreadLocal getTransactionHolder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.RawContactDelta$ValuesDelta getValues()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getPhoneticName(android.content.Context,com.android.contacts.model.Contact)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager createAccountTypeManager(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemEntry: java.lang.CharSequence getDecodedText()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.GoogleAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.AccountsListAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.QuickContactListFragment$1: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNote(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: int getLimit()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: com.android.contacts.model.account.AccountType getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.PhoneProxy: boolean getIccRecordsLoaded()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListItemView: android.widget.TextView getPhoneticNameTextView()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailStatusHelperImpl: int getNumberActivityVoicemailSources(android.database.Cursor)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteMergedAdapter: java.lang.Object[] getSections()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: int getDirectoryExportSupport()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: int getDisplayNameSource()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: android.view.View getView()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: com.android.mms.data.Contact get(java.lang.String,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: java.lang.Long getRawContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment: android.content.Context getContext()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallLogFragment: com.android.contacts.calllog.CallLogAdapter getAdapter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDeltaList: java.lang.Long getRawContactId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: long getFirstWritableRawContactId(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindWebsite(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.EmailAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: com.android.contacts.model.dataitem.DataKind getKindForMimetype(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getDisplayLabel(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactBrowseListFragment: android.net.Uri getSelectedContactUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactStatusUtil: java.lang.String getStatusString(android.content.Context,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getSuperPrimaryEntry(java.lang.String,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getSelectedGroup()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$NetworkTitleViewEntry: java.lang.CharSequence getLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.DefaultCallLogInsertionHelper: java.lang.String getGeocodedLocationFor(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListView: float getTopFadingEdgeStrength()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: java.util.ArrayList getContentValues()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.String getDirectoryAccountName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindIm(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.ActionBarAdapter: java.lang.String getQueryString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getGroupWritableAccounts()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: int getPhoneType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact get(java.lang.String,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListAdapter: long getSelectedContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.PhoneNumberHelper: java.lang.CharSequence getDisplayNumber(java.lang.CharSequence,java.lang.CharSequence)> android.permission.READ_PHONE_STATE - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: android.view.View createPinnedSectionHeaderView(android.content.Context,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForSip()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardComposer: java.lang.String createOneEntry(java.lang.reflect.Method)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListAdapter: android.net.Uri getFirstContactUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.ContactDirectoryManager getContactDirectoryManagerForTest()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.Exception getException()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: com.android.contacts.detail.ContactDetailFragment$ViewEntry getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$EmailActionInflater: int getTypeLabelResource(java.lang.Integer)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoto(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallTypeHelper: java.lang.CharSequence getCallTypeText(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getInvitableAccountTypes()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getUseStrictPhoneNumberComparisonParameter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: com.android.contacts.widget.ContextMenuAdapter getContextMenuAdapter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: android.app.Fragment getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$WebsiteKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManagerImpl$InvitableAccountTypeCache: java.util.Map getCachedValue()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ViewIdGenerator: int getId(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemEntry: java.lang.String getLabelRes()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$WebsiteData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailPlaybackFragment$ActivityReference: android.app.Activity get()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListFilterControllerImpl: com.android.contacts.list.ContactListFilter getFilter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupEditorFragment$Member: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsUtils: android.net.Uri getCallUri(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.BitmapUtil: int getSmallerExtentFromBytes(byte[])> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.Contacts$Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailDisplayUtils: android.text.Html$ImageGetter getImageGetter(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContact: com.android.contacts.model.RawContact$NamedDataItem addNamedDataItemValues(android.net.Uri,android.content.ContentValues)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.util.Clock: com.android.providers.contacts.util.Clock getInstance()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.GroupMetaData: long getGroupId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactLocaleUtils$ChineseContactUtils: java.util.Iterator getNameLookupKeys(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsActivity: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListItemView: android.widget.TextView getLabelView()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.QuickContactListFragment$1: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactLocaleUtils: java.util.Iterator getNameLookupKeys(java.lang.String,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V21: java.lang.String getVersionString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V30: java.lang.String getVersionString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewStreamItemActivity()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallLogListItemViews: com.android.contacts.calllog.CallLogListItemViews createForTest(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V40: java.lang.String getVersionString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.String getLookupKey()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.ContactPhotoManager getPhotoLoader()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: byte[] getPhotoByteArray()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.ImDataItem: java.lang.Integer getProtocol()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.aggregation.ContactAggregator$NameLookupSelectionBuilder: java.lang.String getSelection()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.PhotoStore: long getTotalSize()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getProperty(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListAdapter: java.lang.String[] getProjection(boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ReorderingCursorWrapper: double getDouble(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.AccountsListAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.account.AccountType getAccountType(com.android.contacts.model.AccountTypeManager)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteFragment$ContactTileAdapterListener: int getApproximateTileWidth()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: com.android.mms.data.Contact getMe(boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContact: android.content.ContentValues getValues()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.AccountTypeManager getAccountTypeManager()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsApplication: com.android.contacts.test.InjectedServices getInjectedServices()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: java.lang.String getDataSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.IndexerListAdapter: com.android.contacts.widget.IndexerListAdapter$Placement getItemPlacementInSection(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsUtils: java.lang.String getCurrentCountryIso(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.AbstractContactsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardProperty: byte[] getByteValue()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V30: java.lang.String getBase64(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ProfileProvider: java.lang.ThreadLocal getTransactionHolder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V21: java.lang.String getBase64(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemEntry: java.lang.CharSequence getDecodedComments()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDeltaList fromIterator(java.util.Iterator)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailStatusTable: java.lang.String getType(com.android.providers.contacts.VoicemailContentProvider$UriData)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.GoogleAccountType: java.util.List getExtensionPackageNames()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardSourceDetector: java.lang.String getEstimatedCharset()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor buildSingleRowResult(java.lang.String[],java.lang.String[],java.lang.Object[])> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: boolean getStarred()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.StreamItemAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: com.android.contacts.list.ContactEntryListAdapter getAdapter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$KindTitleViewEntry: java.lang.String getTitle()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.editor.ContactEditorUtils getInstance(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupBrowseListAdapter$GroupListItemViewCache: android.net.Uri getUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.aggregation.ContactAggregator: android.database.Cursor queryAggregationSuggestions(android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],long,int,java.lang.String,java.util.ArrayList)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<gov.nist.javax.sip.header.Contact: gov.nist.core.NameValueList getContactParms()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailViewPagerAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListView: int getPinnedHeaderHeight(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.String getDirectoryType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoPriorityResolver createPhotoPriorityResolver(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListView: int getTotalTopPinnedHeaderHeight()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<gov.nist.javax.sip.header.Contact: java.lang.String getTempGruuParam()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.SuggestedMemberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.aggregation.util.CommonNicknameCache: java.lang.String[] getCommonNicknameClusters(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: int getTypeLabelResource(java.lang.Integer)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: long getChildId(int,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.DataAction: java.lang.CharSequence getBody()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemEntry: java.util.List getPhotos()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$PhotoKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorUtils: java.lang.String[] getWritableAccountTypeStrings()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$StructuredPostalKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getWidePaddingLeft()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.OrganizationDataItem: java.lang.String getTitle()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V21: java.lang.String getNonEmptyLine()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: java.lang.Object getGroup(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEvent(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: long getGroupId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailViewPagerAdapter: int getItemPosition(java.lang.Object)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V30: java.lang.String getNonEmptyLine()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: int getContactNameDisplayOrder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.providers.contacts.ContactsDatabaseHelper getNewInstanceForTest(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForEmail()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.datepicker.DatePicker$SavedState: int getMonth()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.dataitem.DataKind getKindOrFallback(java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ExportProcessor: com.android.contacts.vcard.ExportRequest getRequest()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: com.android.contacts.list.CustomContactListFilterActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader getLoader(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.account.AccountType getAccountType(com.android.contacts.model.account.AccountTypeWithDataSet)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getAsLong(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.GroupCreationDialogFragment: int getTitleResourceId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getAccountType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.String getEditContactActivityClassName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.ExpirableCache$GenerationalCachedValue: java.lang.Object getValue()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: com.android.exchange.adapter.ContactsSyncAdapter$RowBuilder createBuilder(android.content.Entity,java.lang.String,int,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupListItem: long getGroupId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.QuickContactActivity$ViewPagerAdapter: android.app.Fragment getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.DataRowHandler: android.content.ContentValues getAugmentedValues(android.database.sqlite.SQLiteDatabase,long,android.content.ContentValues)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.PhotoPriorityResolver: int getPhotoPriority(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$PostalData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getEmailLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: int getTypeRank(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getSourcePackage()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.DefaultContactBrowseListFragment: com.android.contacts.list.ContactEntryListAdapter createListAdapter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.DataAction: android.content.Intent getIntent()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.AbstractContactsProvider: com.android.providers.contacts.ContactsTransaction getCurrentTransaction()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getRawContacts()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsApplication: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardConfig: int getNameOrderType(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByIds(java.lang.String,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: byte[] getAsByteArray(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.GET_ACCOUNTS android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.QuickContactListFragment$1: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.QuickContactListFragment$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.NameSplitter: int getAdjustedFullNameStyle(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindSipAddress(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment: android.net.Uri getUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getOrCreateAccountIdInTransaction(com.android.providers.contacts.AccountWithDataSet)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupEditorFragment$Member: long getContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: android.net.Uri getLookupUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallDetailHistoryAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentProvider$UriData: android.net.Uri getUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.CallLogProvider: com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getGroupRowId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNickname(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailTabCarousel: float getStoredYCoordinateForTab(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.ui.QuickContactDivot: float getCloseOffset()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.DataRowHandlerForOrganization: int getTypeRank(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.MemoryCursor: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListFilter: com.android.contacts.list.ContactListFilter restoreDefaultPreferences(android.content.SharedPreferences)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getViewGroupLabel(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: byte[] getPhotoBinaryData()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.util.MemoryUtils: long getTotalMemorySize()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailStatusTable: android.database.Cursor query(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: byte[] access$1702(com.android.mms.data.Contact,byte[])> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.DialtactsActivity$PageChangeListener: int getCurrentPosition()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupDetailDisplayUtils: android.view.View getNewGroupSourceView(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$PostalData: java.lang.String getFormattedAddress(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.ShowOrCreateActivity: android.app.Dialog onCreateDialog(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileAdapter: int getColumnCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ReorderingCursorWrapper: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.socialwidget.SocialWidgetSettings: android.net.Uri getContactUri(android.content.Context,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.RawContactReadOnlyEditorView: long getRawContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.ExtendedCursor: long getLong(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExternalAccountType: int getInviteContactActionResId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactsRequest: android.content.Intent getRedirectIntent()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.FastScrollingIndexCache: android.os.Bundle get(android.net.Uri,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactsRequest: android.net.Uri getContactUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment: long getContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: java.lang.String getName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: byte[] getPhoto()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: int getDirectorySearchMode()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.email.activity.setup.SetupData: android.accounts.AccountAuthenticatorResponse getAccountAuthenticatorResponse()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.ExtendedCursor: float getFloat(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallTypeIconsView: int getCallType(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.LocalizedNameResolver: java.lang.String getAllContactsName(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContact: android.content.Context getContext()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getNumber()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: long getPhotoId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getInequalityClause(java.lang.String,long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: java.lang.String getCanonicalPath()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupDetailFragment$1: int getApproximateTileWidth()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.AccountSelectionUtil$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.DialtactsActivity: android.content.Intent getCallSettingsIntent()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListItemView: android.widget.QuickContactBadge getQuickContact()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallTypeHelper: java.lang.Integer getHighlightedColor(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsUtils: android.content.Intent getVoicemailIntent()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.SearchIndexManager: java.lang.String getFtsMatchQuery(java.lang.String,com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: char[] getUpperCaseQueryString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: android.net.Uri getRequestedUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.TransactionContext: java.util.Set getDirtyRawContactIds()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.DataAction: java.lang.String getAlternateIconDescription()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingBottom()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment: android.database.Cursor access$1202(com.android.contacts.editor.ContactEditorFragment,android.database.Cursor)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<gov.nist.javax.sip.header.Contact: java.lang.String getPubGruuParam()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragmentCarousel: int getCurrentPage()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.test.InjectedServices: android.content.SharedPreferences getSharedPreferences()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.DataItem: java.lang.String getMimeType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.IndexerListAdapter: int getSectionForPosition(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewGroupActivity()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V30: java.util.Set getKnownPropertyNameSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownPropertyNameSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: long getNameRawContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.String getPhotoUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.ConfirmAddDetailActivity: com.android.contacts.util.DialogManager getDialogManager()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V40: java.util.Set getKnownPropertyNameSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.list.DirectoryPartition createDefaultDirectoryPartition()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ProfileProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindOrganization(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action getAction()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$ImData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.ClearCallLogDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountWithDataSet: com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeWithDataSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long getWritableEntityId()> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListItemView: android.widget.TextView getCountView()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.JoinContactLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.preference.ContactsPreferences: int getSortOrder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: java.lang.CharSequence getTitle(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.dialpad.DialpadFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$EmailData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.DataRowHandler: int getTypeRank(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticFamilyName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListItemView: android.widget.TextView getStatusView()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: java.lang.Object getChild(int,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$KindParser: java.util.List parseDataKindTag(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.ImDataItem: java.lang.String getData()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ProfileProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsActivity: android.content.ContentResolver getContentResolver()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: int getInviteContactActionResId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.account.AccountType getAccountType(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.account.AccountType getAccountTypeForAccount(com.android.contacts.model.account.AccountWithDataSet)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.EditorAnimator: com.android.contacts.editor.EditorAnimator getInstance()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactPhotoManager: int getDefaultAvatarResId(boolean,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: java.lang.String getTypeColumn()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$EmailKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListAdapter: int getPinnedHeaderCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.GroupMetaData: java.lang.String getTitle()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.HtmlUtils$StreamItemQuoteSpan: int getLeadingMargin(boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.ImageViewDrawableSetter: byte[] getCompressedImage()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.KindSectionView: java.lang.String getTitle()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$OrganizationData: java.lang.String getFormattedString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.TransactionContext: java.lang.Long getAccountIdOrNullForRawContact(long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.CallLogProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteMergedAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.GroupEditorActivity: com.android.contacts.util.DialogManager getDialogManager()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action: int getMessageId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallDetailHistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: int getItemPosition(java.lang.Object)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsUtils: android.graphics.Rect getTargetRectFromView(android.content.Context,android.view.View)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: int getDirectoryResultLimit()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.GroupNameDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.DataAction: java.lang.String getMimeType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.ContactBadgeUtil: java.lang.CharSequence getSocialDate(com.android.contacts.util.StreamItemEntry,android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getValues()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindOrganization(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.TransactionContext: java.util.Set getStaleSearchIndexRawContactIds()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactModifier: java.util.ArrayList getValidTypes(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.account.AccountType$EditType)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.PhotoStore: com.android.providers.contacts.PhotoStore$Entry get(long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.LegacyContactListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ExportProcessor: int getType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: java.lang.String getCurrentPhotoFile()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.Long getAccountIdOrNull(com.android.providers.contacts.AccountWithDataSet)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListAdapter: int getScrollPositionForHeader(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.StreamItemAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.datepicker.DatePicker: int getDayOfMonth()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticFamilyName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ProviderStatusWatcher: com.android.contacts.list.ProviderStatusWatcher$Status getProviderStatus()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.ExtendedCursor: java.lang.String getString(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsActivity: android.view.View getView(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: int getContactMethodType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$NicknameData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.ResolveCache: com.android.contacts.quickcontact.ResolveCache$Entry getEntry(com.android.contacts.quickcontact.Action)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.DataRowHandler getDataRowHandlerForProfile(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactLocaleUtils$ContactLocaleUtilsBase: java.lang.String getSortKey(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ReorderingCursorWrapper: short getShort(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ProviderStatusWatcher: com.android.contacts.list.ProviderStatusWatcher getInstance(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: long getDirectoryId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: java.lang.String getAccountType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.preference.SortOrderPreference: java.lang.CharSequence getSummary()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactPhotoManagerImpl$Request: long getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: boolean getVisible()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewStreamItemPhotoActivity()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.ContactList: java.lang.String[] getNumbers()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.datepicker.DatePicker: int getMonth()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactsSectionIndexer: java.lang.Object[] getSections()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupEditorFragment$Member: android.net.Uri getLookupUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.NameLookupBuilder: java.lang.String normalizeName(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindIm(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: android.net.Uri[] getSourceUris()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.String getViewContactNotifyServicePackageName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactPhotoManager: com.android.contacts.ContactPhotoManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsUtils: int getThumbnailSize(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardSourceDetector: int getEstimatedType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteFragment: com.android.contacts.list.ContactListFilter getFilter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: android.app.LoaderManager getLoaderManager()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.BaseRawContactEditorView: com.android.contacts.editor.PhotoEditorView getPhotoEditor()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.KindSectionView: com.android.contacts.model.dataitem.DataKind getKind()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getType(com.android.contacts.model.dataitem.DataKind,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactsSectionIndexer: int getSectionForPosition(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<gov.nist.javax.sip.header.Contact: boolean getWildCardFlag()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: long getLastModified()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getString(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ReorderingCursorWrapper: java.lang.String getString(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getNormalizedNumber()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getCallDetailsMessageId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneNumberPickerFragment: com.android.contacts.list.ContactListFilter getFilter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: java.lang.Long getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.PhotoSelectionActivity: android.content.Intent buildIntent(android.content.Context,android.net.Uri,android.graphics.Bitmap,byte[],android.graphics.Rect,com.android.contacts.model.RawContactDeltaList,boolean,boolean,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.MemoryUtils: long getTotalMemorySize()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$OrganizationKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getEntry(java.lang.Long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.vcard.ImportRequest doInBackground(com.android.contacts.vcard.VCardService[])> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.VIBRATE android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactBrowseListFragment: com.android.contacts.list.ContactListFilter getFilter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForStructuredName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.NonPhoneActivity$NonPhoneDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailTabCarousel: int getAllowedVerticalScrollLength()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.PeopleActivity: com.android.contacts.util.DialogManager getDialogManager()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$OrganizationData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailStatusHelperImpl: java.util.List getStatusMessages(android.database.Cursor)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getQueryString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$PhoneActionAltInflater: int getTypeLabelResource(java.lang.Integer)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListItemView: android.widget.ImageView getPhotoView()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileView: android.widget.QuickContactBadge getQuickContact()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.RawContactEditorView: long getRawContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.String getDirectoryAccountType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.util.ArrayList getSortedDataKinds()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.DataAction: int getPresence()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.JoinContactListAdapter: int getItemViewType(int,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.GoogleAccountType: java.lang.String getViewContactNotifyServiceClassName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.ExpirableCache: com.android.contacts.util.ExpirableCache create(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardProperty: java.util.Map getParameterMap()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: int getItemViewType(int,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: int getEntryCount(boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.AbstractContactsProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemEntry: java.lang.String getText()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingLeft()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailDisplayUtils$DefaultImageGetter: android.graphics.drawable.Drawable getDrawable(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.TransactionContext: java.util.Set getUpdatedRawContactIds()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.OrganizationDataItem: java.lang.String getCompany()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.test.InjectedServices: java.lang.Object getSystemService(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getEqualityClause(java.lang.String,long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExternalAccountType: int getViewGroupLabelResId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.IndexerListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment$SuggestionEditConfirmationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.WebsiteDataItem: java.lang.String getUrl()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ProcessorBase: java.lang.Object get()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.ResolveCache: android.content.pm.ResolveInfo getBestResolve(android.content.Intent,java.util.List)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$AndroidCustomData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupDetailFragment: long getGroupId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListFilter: java.lang.String getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoto(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.TransactionContext: java.util.Set getStaleSearchIndexContactIds()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ActionsViewContainer: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.ContactList: java.lang.String[] getNumbers(boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewEntry: int getViewType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getCallLogMessageId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticGivenName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getDataMimeType(long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: android.content.CursorLoader createCursorLoader()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ReorderingCursorWrapper: long getLong(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getCurrentCountryIso()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: com.android.contacts.group.GroupEditorFragment$Member getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupListItem: java.lang.String getTitle()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemEntry: long getTimestamp()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.String getAltDisplayName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: int getAggregationMode(long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.String getPhoneticName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PostalAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.CharSequence getDisplayName(android.content.Context,com.android.contacts.model.Contact)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.CountryMonitor: java.lang.String getCountryIso()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupBrowseListAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: android.net.Uri getUri()> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment$CancelEditDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getPriority()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.EventFieldEditorView: com.android.contacts.model.account.AccountType$EditType getType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.AccountsListAdapter: com.android.contacts.model.account.AccountWithDataSet getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.IndexerListAdapter: int getIndexedPartition()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.String getDirectoryDisplayName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.ContactInfoHelper: com.android.contacts.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.JoinContactListFragment: com.android.contacts.list.ContactEntryListAdapter createListAdapter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getAccountTypes(boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactsRequest: int getActionCode()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileView: android.view.View$OnClickListener createClickListener()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: java.util.ArrayList getMimeEntries(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.SearchIndexManager: java.util.List splitIntoFtsTokens(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ReorderingCursorWrapper: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2$StructuredNameLookupBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: android.graphics.drawable.Drawable getDisplayIcon(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: android.database.sqlite.SQLiteDatabase getDatabase(boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemEntry: java.lang.String getResPackage()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: java.lang.String getTitle()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix: java.lang.String getTitle()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactDirectoryManager: int scanAllPackages()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.String getCustomRingtone()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.PhotoProcessor: int getMaxThumbnailPhotoDim()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardProperty: java.lang.String getRawValue()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileAdapter: android.view.View getDivider()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.DataItem: java.lang.String getKindString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment: int getFirstListItemOffset()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactPhotoManagerImpl$Request: int getRequestedExtent()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getAccountName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupDetailFragment: android.net.Uri getGroupUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.NameNormalizer: java.text.RuleBasedCollator getCompressingCollator()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailPhotoSetter: android.view.View$OnClickListener setupContactPhotoForClick(android.content.Context,com.android.contacts.model.Contact,android.widget.ImageView,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$SipAddressKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.KindSectionView: int getEditorCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.ExtendedCursor: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: android.content.Context getDataSourceContext()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsTransaction: android.database.sqlite.SQLiteDatabase getDbForTag(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: int getMimeEntriesCount(java.lang.String,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.ExtendedCursor: short getShort(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: java.lang.String getExtraInfo()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$NameData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ReorderingCursorWrapper: int getType(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getCountryIso()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V21: java.util.Set getAvailableEncodingSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getGroupMetaData()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ReorderingCursorWrapper: float getFloat(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.RawContact getRawContact()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExternalAccountType: java.util.List getExtensionPackageNames()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: java.lang.Object[] getRow()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupBrowseListAdapter: com.android.contacts.group.GroupListItem getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: android.content.ContentValues getCompleteValues()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorUtils: java.util.List getSavedAccounts()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.GoogleAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingTop()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: long getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$NoteData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getGivenNames()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.String getViewContactNotifyServiceClassName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.LabeledEditorView$EditTypeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.AccountTypeManagerImpl: java.util.Map getUsableInvitableAccountTypes()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForOrganization()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListItemView: android.widget.TextView getSnippetView()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getSuffix()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNote(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getWhereClause()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.EventFieldEditorView: int getDefaultHourForBirthday()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.aggregation.util.NameDistance: float getDistance(byte[],byte[])> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemEntry: java.lang.String getAccountType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$AddConnectionViewEntry: android.graphics.drawable.Drawable getIcon()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.HanziToPinyin: com.android.providers.contacts.HanziToPinyin getInstance()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: int getDesiredClipPosition()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.PhotoSelectionHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.AggregationSuggestionEngine: int getSuggestedContactCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.ExtendedCursor: double getDouble(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListAdapter: java.lang.String getSelectedContactLookupKey()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getInviteContactActivityClassName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactLocaleUtils: java.lang.String getSortKey(java.lang.String,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.DataAction: android.content.Intent getAlternateIntent()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupEditorFragment$Member: long getRawContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<gov.nist.javax.sip.header.Contact: int getExpires()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.QuickContactActivity$ViewPagerAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: long getWritableEntityId()> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.AccountFilterActivity: java.util.List access$100(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.HanziToPinyin: java.util.ArrayList get(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.String getViewStreamItemPhotoActivity()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: int getGroupCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getMiddleName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$GroupMembershipKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.DataRowHandlerForEmail: int getTypeRank(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.providers.contacts.ContactsDatabaseHelper getInstance(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactDirectoryManager: java.util.Set getDirectoryProviderPackages(android.content.pm.PackageManager)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$AnniversaryData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.ImDataItem: int getChatCapability()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactLocaleUtils$ChineseContactUtils: java.lang.String getSortKey(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.StreamItemAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.RawContactEditorView: com.android.contacts.editor.TextFieldsEditorView getPhoneticNameEditor()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getQuantityText(int,int,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.IntentProvider$1: android.content.Intent getIntent(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.IntentProvider$2: android.content.Intent getIntent(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.IntentProvider$3: android.content.Intent getIntent(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$EventKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: int getViewGroupLabelResId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.aggregation.ContactAggregator$NameLookupSelectionBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.AsyncTaskExecutors: com.android.contacts.util.AsyncTaskExecutor createThreadPoolExecutor()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.IIccPhoneBook$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getContent()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: android.content.ContentValues getAfter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> android.permission.READ_CONTACTS android.permission.WAKE_LOCK - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: boolean getDisplayPhotos()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.RawContactDelta$ValuesDelta getEntry()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.SipAddressDataItem: java.lang.String getSipAddress()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.TransactionContext: java.util.Set getInsertedRawContactIds()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.ExtendedCursor: int getInt(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.CharSequence inflateUsing(android.content.Context,android.content.ContentValues)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.String getInviteContactActivityClassName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallDetailHistoryAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.LabeledEditorView: android.app.Dialog createDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getPositionForSection(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$AddConnectionViewEntry: java.lang.CharSequence getLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: int getChildrenCount(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.DataRowHandler: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupListItem: java.lang.String getAccountType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupListItem: java.lang.String getDataSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTilePhoneFrequentView: int getApproximateImageSize()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> com.android.voicemail.permission.ADD_VOICEMAIL android.permission.READ_CALL_LOG - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getContactId(long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getReturnCallIntentProvider(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getFirstWritableRawContact(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$PhoneActionInflater: int getTypeLabelResource(java.lang.Integer)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindGroupMembership(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ProcessorBase: java.lang.Object get(long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemPhotoEntry: java.lang.String getPhotoUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getAttribution(android.content.Context,com.android.contacts.model.Contact)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardProperty: java.util.List getValueList()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewContactNotifyServiceClassName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$PhotoData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.AggregationSuggestionEngine: android.os.Handler getHandler()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Integer getAsInteger(java.lang.String,java.lang.Integer)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.test.InjectedServices: android.content.ContentResolver getContentResolver()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: long getContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.preference.ContactsPreferences: int getDefaultSortOrder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: long getRawContactId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: android.content.Context getContext()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.ResolveCache: com.android.contacts.quickcontact.ResolveCache getInstance(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: int getPinnedHeaderCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactModifier: java.util.ArrayList getValidTypes(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.datepicker.DatePicker$SavedState: int getYear()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.DataAction: android.graphics.drawable.Drawable getAlternateIcon()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactPhotoManager: int getDefaultAvatarResId(android.content.Context,int,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.CancelActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.Contacts$ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactLocaleUtils: com.android.providers.contacts.ContactLocaleUtils getIntance()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.SuggestedMemberListAdapter: android.widget.Filter getFilter()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ImportProcessor: int getType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsActivity: java.lang.Object getSystemService(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: java.lang.String getAsString(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListItemView: int getDefaultPhotoViewSize()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.IndexerListAdapter: java.lang.Object[] getSections()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForStructuredPostal()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupBrowseListAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<gov.nist.javax.sip.header.Contact: java.lang.String getSipInstanceParam()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.IndexerListAdapter: android.widget.SectionIndexer getIndexer()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactPhotoManagerImpl$Request: java.lang.Object getKey()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListView: int getPositionAt(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: com.android.contacts.list.ContactListFilter getItem(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: int getEmailType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.DirectoryPartition: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactPhotoManager: com.android.contacts.ContactPhotoManager createContactPhotoManager(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewEntry: long getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupEditorFragment$Member: android.net.Uri getPhotoUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String getTypeColumn()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: java.lang.String getName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactPhotoManagerImpl$Request: android.net.Uri getUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentProvider$UriData: com.android.providers.contacts.VoicemailContentProvider$UriData createUriData(android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask$2: int getMaximumScrollableHeaderOffset()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V40: int getVersion()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: java.lang.String[] getDefaultProjection(android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V30: int getVersion()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileAdapter: int getNumFrequents()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardProperty: java.util.Collection getParameters(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V21: int getVersion()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.ExtendedCursor: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V21: java.lang.String getLine()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.preference.ContactsPreferences: int getDisplayOrder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V30: java.lang.String getLine()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: int getInt(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.GroupMembershipDataItem: long getGroupRowId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneNormalizedNumber()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactsRequest: java.lang.String getQueryString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.AggregationSuggestionEngine: java.util.List getSuggestions()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: java.lang.String getQueryString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupEditorFragment$CancelEditDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.LabeledEditorView$EditTypeAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.VCardService$MyBinder: com.android.contacts.vcard.VCardService getService()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getCollectionName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.socialwidget.SocialWidgetSettings: com.android.contacts.socialwidget.SocialWidgetSettings getInstance()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.DirectoryPartition: int getStatus()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.ExpirableCache: java.lang.Object getPossiblyExpired(java.lang.Object)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getBestValidType(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,boolean,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.model.account.AccountWithDataSet getDefaultAccount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.NameSplitter: int getAdjustedNameStyleBasedOnPhoneticNameStyle(int,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getDataSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Integer getAsInteger(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getFormattedPhoneNumber()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContact: java.lang.String getAccountTypeString()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.SplitContactConfirmationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactsActivity: android.app.Fragment getFragment(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.String,boolean,boolean)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: java.lang.String getNameAndNumber()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.NameNormalizer: java.text.RuleBasedCollator getComplexityCollator()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> android.permission.READ_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$ImKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getCallingPackage()> com.android.voicemail.permission.ADD_VOICEMAIL - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.RawContactEditorView: com.android.contacts.editor.TextFieldsEditorView getNameEditor()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingRight()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.DirectoryPartition: long getDirectoryId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupListItem: int getMemberCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: android.graphics.drawable.Drawable getAvatar(android.content.Context,android.graphics.drawable.Drawable)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.interactions.ImportExportDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardComposer: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContact: com.android.contacts.model.AccountTypeManager getAccountTypeManager()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$BirthdayData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getPrimaryEntry(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper$StructuredNameLookupBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: long getRecipientId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardProperty: java.lang.String getName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: java.lang.String getNumber()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StreamItemPhotoEntry: long getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.JoinContactListAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$EventActionInflater: int getTypeLabelResource(java.lang.Integer)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticMiddleName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.DataStatus: int getPresence()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContact: java.lang.String getDataSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.voicemail.VoicemailPlaybackPresenter$FetchResultHandler: java.lang.Runnable getTimeoutRunnable()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ProfileAndContactsLoader$1: android.os.Bundle getExtras()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.util.List getExtensionPackageNames()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.DialtactsActivity: java.lang.String getCallOrigin()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$SipData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.DataRowHandler: long getMimeTypeId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactsSectionIndexer: int getPositionForSection(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.ImDataItem: java.lang.String getCustomProtocol()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileView: android.net.Uri getLookupUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntryCommitter: java.util.ArrayList getCreatedUris()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$SimpleInflater: java.lang.String getColumnNameForTest()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownValueSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailUpdatesFragment: int getFirstListItemOffset()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.DataItem: int getKindTypeColumn()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.AccountWithDataSet: com.android.providers.contacts.AccountWithDataSet get(java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: java.lang.String getLabelColumn()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment: com.android.contacts.editor.BaseRawContactEditorView getRawContactEditorView(long)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.DataItem: long getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getCreateContactActivityClassName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentTable: java.lang.String getType(com.android.providers.contacts.VoicemailContentProvider$UriData)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.ThemeUtils: int getAttribute(android.content.res.Resources$Theme,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getMe(boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNickname(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: java.util.Locale getLocale()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.BaseAccountType$NoteKindBuilder: java.lang.String getTagName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.ImageViewDrawableSetter: android.widget.ImageView getTarget()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.TypePrecedence: int getTypePrecedence(java.lang.String,int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownTypeSet()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.ContactsDatabaseHelper getThreadActiveDatabaseHelperForTest()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.StreamItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.PhotoProcessor: android.graphics.Bitmap getDisplayPhoto()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.DefaultCallLogInsertionHelper: com.android.providers.contacts.DefaultCallLogInsertionHelper getInstance(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.dataitem.DataKind getDataKind()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteMergedAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getTokens()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: int getMaxThumbnailDim()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForPhone()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.ActionBarAdapter$CustomArrayAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoStore getProfilePhotoStore()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.DirectoryListLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.vcard.ExportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getCurrentType(com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.dataitem.DataKind)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.group.GroupBrowseListFragment: android.database.Cursor access$302(com.android.contacts.group.GroupBrowseListFragment,android.database.Cursor)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForIm()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.calllog.DefaultVoicemailNotifier: com.android.contacts.calllog.DefaultVoicemailNotifier getInstance(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableMap getStatuses()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.DataAction: java.lang.CharSequence getSubtitle()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntryCounter: int getCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactTileAdapter: int getFrequentHeaderPosition()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getEmailData()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> android.permission.READ_PROFILE - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.PhotoSelectionHandler: long getWritableEntityId()> android.permission.READ_SYNC_SETTINGS android.permission.GET_ACCOUNTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.AccountsListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getInviteContactActionLabel(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.String getViewStreamItemActivity()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> android.permission.READ_CONTACTS android.permission.WAKE_LOCK - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.ActionBarAdapter$CustomArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailTabCarousel: int getAllowedHorizontalScrollLength()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: int getSortOrder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: java.util.Set getAllAccountsWithDataSets()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.DataItem: android.content.ContentValues getContentValues()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoStore getPhotoStore()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.IIccPhoneBook$Stub: com.android.internal.telephony.IIccPhoneBook asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.Contact: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder: com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder getDigitsQueryBuilder(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.ContactDetailFragment$NetworkTitleViewEntry: android.graphics.drawable.Drawable getIcon()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardEntry$PhoneData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactListAdapter: long getSelectedContactDirectoryId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContact: java.lang.Long getId()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: int getDisplayNameSourceForMimeTypeId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.account.AccountType getAccountType()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.Iterable,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentProvider: com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(android.content.Context)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.MemoryCursor: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.DataRowHandler getDataRowHandler(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.vcard.VCardComposer: java.lang.String createOneEntry()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactsDatabaseHelper: long getPackageId(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListFragment: int getSortOrder()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: java.lang.String getCurrentPhotoFile()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getPrefix()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getContactsCount()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.datepicker.DatePicker: int getYear()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.mms.data.Contact: boolean getSendToVoicemail()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> android.permission.READ_CONTACTS android.permission.WAKE_LOCK - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.activities.ContactEditorActivity: com.android.contacts.util.DialogManager getDialogManager()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.preference.DisplayOrderPreference: java.lang.CharSequence getSummary()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.PhotoProcessor: android.graphics.Bitmap getNormalizedBitmap(android.graphics.Bitmap,int,boolean)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.ContactDirectoryManager: java.lang.String providerDescription(android.content.pm.ProviderInfo)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.datepicker.DatePicker$SavedState: int getDay()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.DialogManager: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.RawContact: java.lang.String getAccountName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.VoicemailContentTable: android.database.Cursor query(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.util.StructuredPostalUtils: android.content.Intent getViewPostalAddressIntent(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.NfcHandler: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.detail.StreamItemAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.ContactSaveService: java.lang.Object getSystemService(java.lang.String)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.account.AccountType: java.lang.String getCreateContactActivityClassName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.dataitem.EmailDataItem: java.lang.String getData()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.quickcontact.ResolveCache: android.graphics.drawable.Drawable getIcon(com.android.contacts.quickcontact.Action)> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.contacts.model.ContactLoader: android.net.Uri getLookupUri()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getFamilyName()> - @DSSource({DSSourceKind.CONTACT_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)> android.permission.READ_CALENDAR - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventRecurrenceFormatter: java.lang.String getRepeatString(android.content.res.Resources,com.android.calendarcommon2.EventRecurrence)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getViewAt(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.SimpleWeekView: int getFirstJulianDay()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: long getTardis()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: int getActualMinimum(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.SimpleWeeksAdapter: android.text.format.Time getSelectedDay()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2002(com.android.calendar.EventInfoFragment,android.database.Cursor)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(android.content.Context,java.util.ArrayList,java.lang.String,boolean)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: int getDateTextAppearance()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> android.permission.READ_CALENDAR - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.TimezoneAdapter: int getRowById(java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String[] getSharedPreference(android.content.Context,java.lang.String,java.lang.String[])> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Event: java.lang.String getTitleAndLocation()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.alerts.AlertUtils: android.content.SharedPreferences getFiredAlertsTable(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: long getStartMillis()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: int getDeclinedColorFromColor(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.alerts.AlertUtils: java.lang.String formatTimeLocation(android.content.Context,long,boolean,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.event.EditEventView$TitleAdapter: int getCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView$WeekView: java.util.Calendar getFirstDay()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.alerts.AlertReceiver: android.content.Intent createEmailIntent(android.content.Context,long,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.util.Calendar getInstance()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String[] getQuickResponses(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.CalendarProvider2: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderPositionFromItemPosition(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: android.database.Cursor access$900(com.android.calendar.EventInfoFragment)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.GregorianCalendar: int getLeastMaximum(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getViewTypeCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.providers.calendar.CalendarDatabaseHelper getInstance(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: int getWeekDayTextAppearance()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.event.EditEventHelper: long constructDefaultStartTime(long)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.MonthByWeekAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView$WeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.AsyncQueryService: int getNextToken()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView$WeeksAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.DayView$ScrollInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.String access$500(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo getAdapterInfoByPosition(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendarcommon2.Duration: long getMillis()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: int getWeeksSinceEpochFromJulianDay(int,int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: int getSharedPreference(android.content.Context,java.lang.String,int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.DayFragment: long getSelectedTimeInMillis()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.MetaData: com.android.providers.calendar.MetaData$Fields getFieldsLocked()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: com.android.exchange.utility.CalendarUtilities$TimeZoneDate getTimeZoneDateFromSystemTime(byte[],int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaListView: long getFirstVisibleTime(com.android.calendar.agenda.AgendaWindowAdapter$EventInfo)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.DayFragment: long getSupportedEventTypes()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.DayOfMonthDrawable: int getOpacity()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: int getWeekNumberFromTime(long,android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.MonthByWeekFragment: long getSupportedEventTypes()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: boolean getSharedPreference(android.content.Context,java.lang.String,boolean)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: android.database.Cursor access$600(com.android.calendar.EventInfoFragment)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: int getSelectedWeekBackgroundColor()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.SimpleWeeksAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.QueryParameterUtils: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.util.HashMap getChanges()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.SearchActivity: long getSupportedEventTypes()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getLoadingView()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: long getSelectedInstanceId()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: int getCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarViewAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: android.content.DialogInterface$OnDismissListener access$3400(com.android.calendar.EventInfoFragment)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.AbstractCalendarActivity: com.android.calendar.AsyncQueryService getAsyncQueryService()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String getDisplayedTimezone(long,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarController: long getEventId()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> android.permission.READ_CALENDAR - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionHour(java.util.GregorianCalendar)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)> android.permission.READ_CALENDAR - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: int getActualMaximum(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: int getCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.CalendarProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])> android.permission.READ_CALENDAR - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: java.lang.String getString(byte[],int,int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEntity(android.content.Context,android.content.Entity,int,java.lang.String,com.android.emailcommon.provider.Account)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: int getUnfocusedMonthDateColor()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: int getWord(byte[],int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.lang.String toString()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: long getItemId(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.TimezoneAdapter: java.lang.CharSequence[][] getAllTimezones()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.event.EditEventFragment: long getSupportedEventTypes()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarController: long getDateFlags()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: int getMinimalDaysInFirstWeek()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: int getDaysPerWeek(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: int getFocusedMonthDateColor()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.DayView: long getSelectedTimeInMillis()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: long getNextMidnight(android.text.format.Time,long,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Event: long getEndMillis()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: long getMaxDate()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarController: int getPreviousViewType()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getLaunchPendingIntentTemplate(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.SimpleWeeksAdapter: int getCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarViewAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.DayView: int getFirstVisibleHour()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.MonthWeekEventsView: int getDayIndexFromLocation(float)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: android.graphics.drawable.Drawable getSelectedDateVerticalBar()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Event: int getColumn()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getCollectionName()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Event: int getMaxColumns()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: int getFirstDayOfWeek()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarController: long getTime()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: int getDisplayColorFromColor(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: long getUtcAllDayCalendarTime(long,java.util.TimeZone)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String getSharedPreference(android.content.Context,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: int getCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.GregorianCalendar: int getGreatestMinimum(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: long getEventId()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.SimpleWeekView: int getFirstMonth()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: long getDate()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView$WeeksAdapter: int getCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: long getSupportedEventTypes()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> android.permission.READ_CALENDAR - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: long getEndMillis()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.event.EditEventHelper: android.content.ContentValues getContentValuesFromModel(com.android.calendar.CalendarEventModel)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarAlarmManager getOrCreateCalendarAlarmManager()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.AsyncQueryServiceHelper$OperationInfo: long getDelay(java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarEventModel: java.lang.String getAttendeesString()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getFirstVisibleEvent()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String getSearchAuthority(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarController: com.android.calendar.CalendarController getInstance(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.GregorianCalendar: java.util.Date getGregorianChange()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.GeneralPreferences: java.lang.String getRingtoneTitleFromUri(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: int getWeekNumberColor()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionMinute(java.util.GregorianCalendar)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.SQLiteContentProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderItemsNumber(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMinutes()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: int getStickyHeaderHeight()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.util.Locale[] getAvailableLocales()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.MonthWeekEventsView: android.text.format.Time getDayFromLocation(float)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getVisible(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> android.permission.READ_CALENDAR - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.event.EditEventHelper: java.util.LinkedHashSet getAddressesFromList(java.lang.String,com.android.common.Rfc822Validator)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String getWidgetScheduledUpdateAction(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: long getTimeInMillis()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.DayView: android.text.format.Time getSelectedTime()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.util.Date getTime()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: long getLocalAllDayCalendarTime(long,java.util.TimeZone)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMethod()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.extensions.AllInOneMenuExtensions: java.lang.Integer getExtensionMenuResource(android.view.Menu)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.CalendarProvider2: java.lang.String getTimezoneDatabaseVersion()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.CalendarCache: java.lang.String readDataLocked(android.database.sqlite.SQLiteDatabase,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: long getInstanceId(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: java.lang.String getUidFromGlobalObjId(java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: boolean getDSTCalendars(java.util.TimeZone,java.util.GregorianCalendar[],java.util.GregorianCalendar[])> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.GeneralPreferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.SimpleWeeksAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView$WeekView: int getMonthOfLastWeekDay()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.GregorianCalendar: int getMaximum(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView$WeeksAdapter: java.util.Calendar getSelectedDay()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int,boolean)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderPosition(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: long getStartTime(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: long getSupportedEventTypes()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.util.TimeZone getTimeZone()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.GregorianCalendar: int getActualMinimum(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarProvider2 getInstance()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.CalendarAlarmManager: android.os.PowerManager$WakeLock getScheduleNextAlarmWakeLock()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarController$EventInfo: int getResponse()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: java.lang.CharSequence getLabelForType(java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Event: long getStartMillis()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.Intent getLaunchFillInIntent(android.content.Context,long,long,long,boolean)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2000(com.android.calendar.EventInfoFragment)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarViewAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.DayView: int getEventsAlpha()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.alerts.AlertActivity: android.database.Cursor access$002(com.android.calendar.alerts.AlertActivity,android.database.Cursor)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.CalendarDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.lang.Object clone()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarController: int getViewType()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: int getCursorPosition(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.AllInOneActivity: long getSupportedEventTypes()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView$WeekView: int getMonthOfFirstWeekDay()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.SimpleWeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: int getFirstDayOfWeek()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: android.database.Cursor access$1802(com.android.calendar.EventInfoFragment,android.database.Cursor)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EditResponseHelper: int getWhichEvents()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter$TabletCalendarItemBackgrounds: int[] getBackgrounds()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaListView: long getSelectedInstanceId()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.Runnable access$800(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory,java.lang.String,android.content.BroadcastReceiver$PendingResult,int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaFragment: long getSupportedEventTypes()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: int getWeekSeparatorLineColor()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaListView: android.view.View getFirstVisibleView()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: android.database.Cursor access$102(com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment,android.database.Cursor)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: long getMinDate()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String getWidgetUpdateAction(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.GregorianCalendar: int getActualMaximum(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarViewAdapter: int getCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarViewAdapter: long getItemId(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: android.database.Cursor access$602(com.android.calendar.EventInfoFragment,android.database.Cursor)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaWindowAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: java.lang.String getVersionCode(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.SimpleWeekView: android.text.format.Time getDayFromLocation(float)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.EventInfoFragment: android.database.Cursor access$902(com.android.calendar.EventInfoFragment,android.database.Cursor)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.DayView: android.text.format.Time getSelectedTimeForAccessibility()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaFragment: long getLastShowEventId()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.alerts.AlertActivity: android.database.Cursor getItemForView(android.view.View)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getUpdateIntent(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.graphics.drawable.Drawable getBackground(int,boolean)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: int get(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: int getJulianMondayFromWeeksSinceEpoch(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: int getLong(byte[],int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarUtils: android.content.SharedPreferences getSharedPreferences(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.ExpandableTextView: java.lang.CharSequence getText()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderItemsCount(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.exchange.utility.CalendarUtilities: long getMillisAtTimeZoneDateTransition(java.util.TimeZone,com.android.exchange.utility.CalendarUtilities$TimeZoneDate)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: int getShownWeekCount()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.Utils: int getFirstDayOfWeek(android.content.Context)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.GregorianCalendar: int getMinimum(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.month.SimpleWeekView: int getLastMonth()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<android.widget.CalendarView: boolean getShowWeekNumber()> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.calendar.CalendarViewAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.CALENDAR_INFORMATION}) 
<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserPassword()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesReceived(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiMulticastTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.address.UserInfo: java.lang.String getPassword()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getTimeAtCpuSpeedStep(int,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: void getNeighboringCids(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtime(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettingsClassic: boolean getDomStorageEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()> android.permission.BLUETOOTH - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getPackageStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean getMute()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getDevPersistBytes(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsCollection: long getTotalBytes()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: boolean getIccRecordsLoaded()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: java.util.List getAllCellInfo()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: android.content.Context getContext()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getWifiOnTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: android.telephony.SignalStrength getSignalStrength()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: int getUid()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getInputEventCount(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(int,java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconMode()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getLowDischargeAmountSinceCharge()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettings: boolean getSavePassword()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledProtocols()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccCard getIccCard()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCGI3GPP()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOnSinceCharge()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: boolean getCallForwardingIndicator()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.DataConnectionTracker: boolean getDataOnRoamingEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.ims.IsimRecords getIsimRecords()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.IccCardProxy: boolean getIccFdnEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: int getLteOnCdmaMode()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String[] getIsimImpu()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsCollection: long getFirstAtomicBucketMillis()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Timer: long getTotalTimeLocked(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getRequestedMinimumPasswordLength()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsCollection: long getStartMillis()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTimeToNowLocked(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: int getLteOnCdmaMode()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimeBattery()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: void getCallWaiting(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidPersistBytes(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledCipherSuites()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean getBoolean(java.lang.String,boolean,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsCollection: long getEndMillis()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: java.util.List getPendingMmiCodes()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: android.telephony.ServiceState getServiceState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(int,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getLaunches(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getGlobalWifiRunningTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: java.util.List getPendingMmiCodes()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiScanTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtimeLocked(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: int getHandle()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.UiccCardApplication: boolean getIccLockEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl getBatteryStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getStarts(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledProtocols()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLetters()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccFileHandler getIccFileHandler()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettings: boolean getDatabaseEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.SparseArray getPidStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.am.BatteryStatsService: com.android.internal.os.BatteryStatsImpl getActiveStatistics()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getPollInterval()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: boolean getMute()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalStrengthTime(int,long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: android.os.Handler getHandler()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getXtConfig()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledProtocols()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.pm.Settings: int getComponentEnabledSettingLPr(android.content.ComponentName,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCardApplicationStatus$AppType getCurrentUiccAppType()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: boolean getMessageWaitingIndicator()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getWakeTimerLocked(java.lang.String,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: int getPhoneType()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getString(java.lang.String,java.lang.String,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesSent(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: java.lang.String[] getEnabledCipherSuites()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconMode()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNumeric()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettingsClassic: boolean getJavaScriptEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettingsClassic: boolean getPluginsEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockSettingsService: long getLong(java.lang.String,long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledProtocols()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: boolean getMessageWaitingIndicator()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getScreenOnTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getBluetoothOnTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getSensorStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$State getState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: android.net.LinkProperties getLinkProperties(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call getCall()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOffSinceCharge()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: boolean getDataRoamingEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: int getUserActivityCount(int,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getPhoneOnTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumSymbols()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getPhoneDataConnectionCount(int,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int,long,long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: java.util.Map getKernelWakelockStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.pm.Settings: int getApplicationEnabledSettingLPr(java.lang.String,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettingsClassic: boolean getSavePassword()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettingsClassic: boolean getDatabaseEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getBackgroundCall()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int getStarts(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: long getAudioTurnedOnTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledCipherSuites()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getHistoryBaseTime()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getXtPersistBytes(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: byte[] readFully(java.io.FileInputStream)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCard getIccCard()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettings: boolean getLightTouchEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneConstants$State getState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getPassword()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.Object getExtensionAccessInfo()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: android.net.LinkProperties getLinkProperties(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: void getCellBroadcastSmsConfig(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: int getUpdateVersion()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: boolean getCallForwardingIndicator()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: int getPhoneType()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getStartCount()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumUpperCase()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledCipherSuites()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevel()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getForegroundCall()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getPhoneDataConnectionTime(int,long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccCard getIccCard()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: boolean getDataRoamingEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getAccessType()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getCurrentDataConnectionList()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getPendingMmiCodes()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLowerCase()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.UiccCardApplication: boolean getIccFdnEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getWakelockStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: java.util.Map getServiceStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.core.net.SslNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] getEnabledCipherSuites()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getDevConfig()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getScreenBrightnessTime(int,long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledProtocols()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettingsClassic: boolean getAutoFillEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: int getWakeups(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: int getVoiceMessageCount()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: android.util.SparseArray getUidStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMAPhone: boolean getDataRoamingEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: android.os.BatteryStats$Timer getSensorTime()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: void getCallForwardingOption(int,android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getPhoneSignalStrengthCount(int,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getRingingCall()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$State getState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidConfig()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Counter: int getCountLocked(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordQuality()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CallTracker getCallTracker()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipConnectionBase: int getNumberPresentation()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptime(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getTimeCacheMaxAge()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptime()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getGlobalAlertBytes(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getForegroundTime(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimePlugged()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesSent(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: com.android.internal.os.BatteryStatsImpl getBatteryStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevelLocked()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOff()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataRoamingEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettings: boolean getJavaScriptEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone getActivePhone()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMALTEPhone: void getEnhancedVoicePrivacy(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: java.util.List getAllCellInfo()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.DataConnectionTracker: boolean getAnyDataEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getLaunchTimeToNowLocked(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: java.lang.String[] getActiveApnTypes()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(int,java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: android.telephony.SignalStrength getSignalStrength()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconIndex()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettings: boolean getPluginsEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State getState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: void getAvailableNetworks(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getUserTime(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesReceived(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidTagPersistBytes(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getHighDischargeAmountSinceCharge()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: android.telephony.SignalStrength getSignalStrength()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.rtp.AudioGroup getAudioGroup()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptimeMs()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: boolean getDataRoamingEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettingsClassic: boolean getHardwareAccelSkiaEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State getState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLServerSocket createSSLServerSocket(int,int,java.net.InetAddress)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: long getVideoTurnedOnTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalScanningTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getDefaultPhone()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOn()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: long getFullWifiLockTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNonLetter()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ims.IsimRecords getIsimRecords()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettings: boolean getDomStorageEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.address.Authority: java.lang.String getPassword()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.RILRequest: com.android.internal.telephony.RILRequest obtain(int,android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<android.webkit.WebSettingsClassic: boolean getLightTouchEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite[] getEnabledCipherSuitesMember()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevel()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: java.lang.String[] getEnabledProtocols()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: int getVoiceMessageCount()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesReceived(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: java.lang.String[] getEnabledProtocols()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getProcessStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: boolean getUnitTestMode()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: com.android.internal.os.BatteryStatsImpl getBatteryStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.am.BatteryStatsService: byte[] getStatistics()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: void getDataCallList(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getDSLLocation()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: boolean getMute()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getAllCellInfo()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: android.os.BatteryStats$Timer getWakeTime(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiRunningTime(long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesSent(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: android.content.Context getContext()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: com.android.internal.os.BatteryStatsImpl getBatteryStats()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: boolean getIccRecordsLoaded()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: void getSmscAddress(android.os.Message)> android.permission.WAKE_LOCK - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$State getState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidTagConfig()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getCpuSpeedSteps()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: void getOutgoingCallerIdDisplay(android.os.Message)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: android.os.BatteryStats$Uid$Proc$ExcessivePower getExcessivePower(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.IccCardProxy: boolean getIccLockEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getCI3GPP2()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean getAnyDataEnabled()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getSensorTimerLocked(int,boolean)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: boolean getIsOnBattery()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconIndex()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Timer: int getCountLocked(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.PhoneProxy: java.util.List getAllCellInfo()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhone: java.util.List getCurrentDataConnectionList()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked(long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.ILockSettings$Stub$Proxy: long getLong(java.lang.String,long,int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevelLocked()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getSystemTime(int)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.os.BatteryStatsImpl: long getProcessWakeTime(int,int,long)> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.internal.widget.ILockSettings$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.SYSTEM_SETTINGS}) 
<com.android.gallery3d.data.UriImage: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLView: int getVisibility()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BytesBufferPool getBytesBufferPool()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: long getUnsignedLong(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageCrop: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: int getViewTypeCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: com.google.android.picasastore.PicasaStoreFacade getPicasaStoreFacade()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterEmptyPromptSet: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifData: int getStripCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getExpectedUsedBytes()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifData: byte[] getCompressedThumbnail()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterDeleteSet: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum: android.database.Cursor internalQuery(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.BitmapPool: android.graphics.Bitmap getBitmap(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: com.android.gallery3d.data.Face[] getFaces()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TileImageView$Tile: int getTextureWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getFlipMatrix(float,float,com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getGeometryOnlyImage()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TiledScreenNail: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.LongSparseArray: java.lang.Object get(long)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbum: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: int getCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.app.GalleryApp getApplication()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.presets.ImagePreset: com.android.gallery3d.filtershow.cache.ImageLoader getImageLoader()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Face: android.graphics.Rect getPosition()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpClient: android.mtp.MtpObjectInfo getObjectInfo(java.lang.String,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CropView: int getImageWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.provider.GalleryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbumSet: int getSubMediaSetCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.ThreadPool$Worker: java.lang.Object get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbumSet: int getSubMediaSetCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.ActivityState: float[] getBackgroundColor()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: int getOffset()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView$IntegerAnimation: int get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.LightCycleHelper: com.android.gallery3d.util.LightCycleHelper$PanoramaMetadata getPanoramaMetadata(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.Rational: long getNominator()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilter: int getMaxParameter()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getOriginalToScreen(boolean,float,float,float,float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.IfdData: com.android.gallery3d.exif.ExifTag getTag(short)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF unrotatedCropBounds()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: int getCacheFlag()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ZoomCache: android.graphics.Bitmap getImage(com.android.gallery3d.filtershow.presets.ImagePreset,android.graphics.Rect)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getLoadingState(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.PanelController getPanelController()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ResourceTexture: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PhotoView: boolean getFilmMode()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: long getDateTaken(com.android.gallery3d.data.MediaObject)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.Paper: float[] getTransform(android.graphics.Rect,float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapLoader: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: long getTotalTargetCacheSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PreparePageFadeoutTexture: com.android.gallery3d.ui.RawTexture get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.TimeBar: int getPreferredHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.HistoryAdapter: com.android.gallery3d.filtershow.presets.ImagePreset getLast()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageRotate: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PositionController: android.graphics.Rect getPosition(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTileProvider: com.android.gallery3d.ui.ScreenNail getScreenNail()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AlbumSetDataLoader: com.android.gallery3d.data.MediaSet getMediaSet(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: android.net.Uri getUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AlbumSetPage: int getBackgroundColorId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalImage: int getRotation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.data.DataManager getDataManager()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalVideo: int getMediaType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.PanelController$Panel: int getPosition()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getCropBounds(android.graphics.Bitmap)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbum: android.database.Cursor getItemCursor(android.content.ContentResolver,android.net.Uri,java.lang.String[],int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpImage: int getMediaType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SecureAlbum: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BasicTexture: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalImage$LocalLargeImageRequest: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: long getItemId(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: int getTypeFromString(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMediaItem: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLView: int getMeasuredHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getOriginalBitmapLarge()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoDataAdapter: int getImageRotation(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AlbumSetDataLoader: com.android.gallery3d.data.MediaItem getCoverItem(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalVideo: java.lang.String getFilePath()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.UriImage: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.TransitionStore: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.BytesBufferPool: com.android.gallery3d.data.BytesBufferPool$BytesBuffer get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.ManageCachePage: int getBackgroundColorId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getScaleFactor()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpImage: long getSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaDetails: java.lang.Object getDetail(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifParser: com.android.gallery3d.exif.ExifTag getTag()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getPhotoBounds()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.OverScroller: float getCurrVelocity()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLView: int getMeasuredWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PositionController: int getImageAtEdges()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: int getDataSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSource: long getTotalUsedCacheSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem[] getMediaItemById(com.android.gallery3d.app.GalleryApp,boolean,java.util.ArrayList)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: int getDefaultBackgroundColor()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoPage: android.content.Intent access$2600(android.net.Uri)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getImageForPreset(com.android.gallery3d.filtershow.imageshow.ImageShow,com.android.gallery3d.filtershow.presets.ImagePreset,boolean)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.EntrySchema: com.android.gallery3d.common.EntrySchema$ColumnInfo getColumn(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ComboAlbumSet: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.RawTexture: int getTextureWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.EdgeEffect$Drawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLRootView: android.graphics.Matrix getCompensationMatrix()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItems()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTexture: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: long getTotalUsedCacheSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilter: int getParameter()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CropView: int getImageHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView: int getVisibleStart()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.TagClustering: java.lang.String getClusterName(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoDataAdapter: int getLevelCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbum: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String getMimeType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: int getCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getUsedBytes()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ActionImage: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: android.net.Uri getPlayUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.AnimationTime: long get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Face: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TileImageView$Tile: int getTextureHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ExtTexture: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.imageshow.ImageShow getMaster()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: int getElementSize(short)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoPage: android.content.Intent access$2700(com.android.gallery3d.data.MediaObject)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getUntranslatedStraightenCropBounds(android.graphics.RectF,float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbumSet: long getTotalUsedCacheSize(android.content.Context)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapScreenNail: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbum: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoPage: int getBackgroundColorId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CropView: android.graphics.RectF getCropRectangle()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: com.google.android.picasasync.PicasaFacade getPicasaFacade()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getContentType(com.android.gallery3d.data.MediaObject)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar: int getClusterTypeAction()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpImage: byte[] getImageData()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.anim.FloatAnimation: float get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalImage: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.provider.GalleryProvider: java.lang.String getAuthority(android.content.Context)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ResourceTexture: int getTextureHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpImage: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ExtTexture: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.TimeBar: int getBarHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.CountedDataInputStream: int getReadByteCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum: long getCacheSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLView: int getComponentCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbumSet: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.FlingScroller: int getFinalY()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.FlingScroller: int getFinalX()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.Matrix getLocalGeoFlipMatrix(float,float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: short getTagId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.HelpUtils: android.content.Intent getHelpIntent(android.content.Context,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.IfdData: int getOffsetToNextIfd()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: java.lang.String getFilePath()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.NinePatchTexture: com.android.gallery3d.ui.NinePatchChunk getNinePatchChunk()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.FadeTexture: float getRatio()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PhotoView$FullPicture: com.android.gallery3d.ui.PhotoView$Size getSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Rect getOriginalBounds()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ExtTexture: int getId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SnailItem: java.lang.String getMimeType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: com.adobe.xmp.XMPMeta getXmpObject()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifParser: int getStripSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.OverScroller: int getCurrX()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ScrollerHelper: int getPosition()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMergeAlbum: int getTotalMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLView: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ComboAlbum: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BitmapPool getThumbPool()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: double getLatitude(com.android.gallery3d.data.MediaObject)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbum: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: long getDateInMs()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpClient: java.util.List getDeviceList()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getFiltersOnlyImage()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getFilteredImage()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.EntrySchema: com.android.gallery3d.common.Entry valuesToObject(android.content.ContentValues,com.android.gallery3d.common.Entry)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PositionController: float getFilmRatio()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getParent()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: int getLocalValue()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.FaceImage: java.lang.String getMimeType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: int getCacheStatus()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BasicTexture: int getTextureWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.EntrySchema: int getColumnIndex(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getCurrentIndex()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: long getCacheSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLView: float[] getBackgroundColor()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: int getUnsignedShort(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.CountedDataInputStream: java.nio.ByteOrder getByteOrder()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView: int getVisibleEnd()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.GalleryActionBar getGalleryActionBar()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.TagClustering: java.util.ArrayList getCluster(int)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: long getItemId(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getFlipType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpImage: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterDeleteSet: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.Matrix getGeoMatrix(android.graphics.RectF,boolean)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.Config$ManageCachePage: com.android.gallery3d.app.Config$ManageCachePage get(android.content.Context)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PositionController: int getImageHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap rotateToPortrait(android.graphics.Bitmap,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.PathMatcher$Node: com.android.gallery3d.data.PathMatcher$Node getChild(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet: int getSubMediaSetCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.RawTexture: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getItem()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.IdentityCache: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: int getCount()> - @DSSource({DSSourceKind.IMAGE}) 
<android.widget.Gallery: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilterRS: android.renderscript.RenderScript getRenderScriptContext()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.ui.ScreenNail getScreenNail()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalVideo: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TiledTexture: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.BasePicasaAlbum: android.database.Cursor internalQuery(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilter: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SingleItemAlbum: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbumSet: long getTotalTargetCacheSize(com.android.gallery3d.picasasource.PicasaSource)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.IfdData: int getTagCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalCropBounds()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getFreeBytes()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.SinglePhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.EntrySchema: java.lang.String[] getProjection()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: java.lang.String getString()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FaceClustering: java.lang.String getClusterName(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilterRS: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: int getComponentCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilterCurves: com.android.gallery3d.filtershow.ui.Spline getSpline(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView$Layout: int getVisibleStart()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.AlbumLabelMaker: int getBorderSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.ui.Spline: float[] getAppliedCurve()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.EntrySchema: java.lang.String getTableName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.ui.Spline: com.android.gallery3d.filtershow.ui.ControlPoint getPoint(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.PanelController getPanelController()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AbstractGalleryActivity: android.content.Context getAndroidContext()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.common.BlobCache getFaceCache(android.content.Context)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Path: java.lang.String getPrefix()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ActionImage: java.lang.String getMimeType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoDataAdapter: int getImageWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TileImageViewAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpDevice: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.CacheManager: com.android.gallery3d.common.BlobCache getCache(android.content.Context,java.lang.String,int,int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SingleItemAlbum: java.lang.String getName()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CropView$AnimationController: int getCenterY()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CropView$AnimationController: int getCenterX()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalVideo: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.BasePicasaAlbum: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.widget.ArrayAdapter getImageStateAdapter()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapScreenNail: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlideshowView$SlideshowAnimation: int getCanvasSaveFlags()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalImage: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: long getDataVersion()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalStraighten()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.WakeLockHoldingProgressListener: com.android.gallery3d.app.AbstractGalleryActivity getActivity()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.UriImage: int getMediaType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilterGeometry: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.util.LightCycleHelper$PanoramaViewHelper getPanoramaViewHelper()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PhotoView$ScreenNailPicture: com.android.gallery3d.ui.PhotoView$Size getSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.DetailsHelper: java.lang.String getDetailsName(android.content.Context,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.UploadedTexture: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum: com.google.android.picasasync.PhotoEntry getPhotoEntry(com.android.gallery3d.picasasource.PicasaSource,long)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Rect getDisplayedImageBounds()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTexture: int getId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.RawTexture: int getId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ActionImage: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.provider.GalleryProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpImage: long getDateInMs()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SnailItem: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TiledScreenNail: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: int getLong(int)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifData: byte[] getStrip(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: long getItemId(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ComboAlbum: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocationClustering: int getNumberOfClusters()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SurfaceTextureScreenNail: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaPostAlbum: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageSlave: android.graphics.Bitmap getFilteredImage()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalImage: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PositionController: float getImageScale()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.EdgeEffect$Drawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SnailItem: com.android.gallery3d.ui.ScreenNail getScreenNail()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLView: com.android.gallery3d.ui.GLRoot getGLRoot()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaPostAlbum: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Cluster: java.util.ArrayList getItems()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.BasePicasaAlbum: long reload()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLCanvasImpl: javax.microedition.khronos.opengles.GL11 getGLInstance()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.Fingerprint: byte[] getBytes()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbumSet: int getSubMediaSetCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PositionController: int getImageWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: long getTotalUsedCacheSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum: int getCacheStatus()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.provider.SharedImageProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.ActivityState: android.view.MenuInflater getSupportMenuInflater()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.UriImage: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.FlingScroller: int getCurrY()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.FlingScroller: int getCurrX()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbum: java.lang.String getLocalizedName(android.content.res.Resources,int,java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet: int getTotalMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpClient: java.util.List getObjectList(java.lang.String,int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getTotalBytes()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.BitmapPool: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PackagesMonitor: int getPackagesVersion(android.content.Context)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.IfdData: com.android.gallery3d.exif.ExifTag[] getAllTags()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.ui.AlbumSetSlidingWindow$AlbumSetEntry get(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: int getLocalValue()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.IfdData: int getId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoDataAdapter: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: boolean getDirtyGeometryFlag()> - @DSSource({DSSourceKind.IMAGE}) 
<android.widget.Gallery: int getChildDrawingOrder(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.Utils: byte[] getBytes(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpDevice: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ComboAlbumSet: int getSubMediaSetCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TileImageViewAdapter: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CanvasTexture: android.graphics.Bitmap onGetBitmap()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ExtTexture: int getTextureHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.NinePatchTexture$SmallCache: java.lang.Object get(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.tools.SaveCopyTask: java.io.File getNewFile(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Path: java.lang.String getSuffix()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifParser: int getCompressedImageSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: int getIfd()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.HistoryAdapter getHistory()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaPostAlbum: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.util.Future requestSyncOnMultipleSets(com.android.gallery3d.data.MediaSet[],com.android.gallery3d.data.MediaSet$SyncListener)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTexture: int getTextureHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.data.MediaItem getMediaItem(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.IntArray: int[] getInternalArray()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMergeAlbum: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLView: com.android.gallery3d.ui.GLView getComponent(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BasicTexture: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.StateManager getStateManager()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.provider.SharedImageProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getImageTitle(com.android.gallery3d.data.MediaObject)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Clustering: com.android.gallery3d.data.MediaItem getClusterCover(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.LocalPhotoSource: android.net.Uri getContentUri(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.UriImage: int getRotation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SizeClustering: long getMinSize(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.RectF getCropBoundsDisplayed()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ActionImage: int getMediaType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.UploadedTexture: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.BucketHelper: java.lang.String getBucketName(android.content.ContentResolver,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpClient: java.util.List getStorageList(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalImage: java.lang.String getFilePath()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalVideo: android.net.Uri getPlayUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: java.lang.String getTopSetPath(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.provider.GalleryProvider: android.net.Uri getUriFor(android.content.Context,com.android.gallery3d.data.Path)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilterTinyPlanet: float getAngle()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.PanelController: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.Config$AlbumSetPage: com.android.gallery3d.app.Config$AlbumSetPage get(android.content.Context)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalImage: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: long getPicasaId(com.android.gallery3d.data.MediaObject)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: long getDateInMs()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.PathMatcher$Node: int getKind()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TiledTexture: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilter: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: long getTotalTargetCacheSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.StitchingProgressManager: java.lang.Integer getProgress(android.net.Uri)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.TimeClustering: java.lang.String getClusterName(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.presets.ImagePreset: float getScaleFactor()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoDataAdapter: int getLoadingState(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet$1: java.lang.Integer get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbumSet$PicasaSyncTaskFuture: java.lang.Integer get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: android.net.Uri getPlayUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> android.permission.NFC android.permission.SET_WALLPAPER android.permission.INTERNET android.permission.ACCESS_FINE_LOCATION android.permission.VIBRATE android.permission.ACCESS_COARSE_LOCATION android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaDetails: int getUnit(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.Matrix getCropRotationMatrix(float,android.graphics.RectF)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.FaceImage: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.NinePatchTexture: android.graphics.Rect getPaddings()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.HistoryAdapter getHistory()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTileProvider: int getImageWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ScrollerHelper: float getCurrVelocity()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMergeAlbum: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SizeClustering: java.lang.String getClusterName(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLPaint: float getLineWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.tools.SaveCopyTask: java.io.File getFinalSaveDirectory(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalRotation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMath: float[] getUnitVectorFromPoints(float[],float[])> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.ui.GLRoot getGLRoot()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpDevice: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getPrefixPath()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.ui.ImageButtonTitle: java.lang.String getText()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: int getRotation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ColorTexture: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<android.widget.Gallery: int getLimitedMotionScrollAmount(boolean,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.AlbumLabelMaker$LazyLoadedBitmap: android.graphics.Bitmap get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterDeleteSet: int getNumberOfDeletions()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.imageshow.GeometryMetadata getGeometry()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet: int getIndexOf(com.android.gallery3d.data.Path,java.util.ArrayList)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.TransitionStore getTransitionStore()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilter: byte getFilterType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpDeviceSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.GalleryUtils: byte[] getBytes(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMediaItem: long getDateInMs()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: java.lang.String[] getTags()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TiledScreenNail: com.android.gallery3d.ui.TiledTexture getTexture()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbum: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMergeAlbum: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.DirectPresetCache: android.graphics.Bitmap get(com.android.gallery3d.filtershow.presets.ImagePreset)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterDeleteSet: long reload()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FaceClustering: java.util.ArrayList getCluster(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.CropView$AnimationController: float getScale()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FaceClustering: com.android.gallery3d.data.MediaItem getClusterCover(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpDeviceSet: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SelectionManager: int getSelectedCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifData: java.nio.ByteOrder getByteOrder()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpImage: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.StateManager: int getStateCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifParser: int getCurrentIfd()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.ActivityState: int getBackgroundColorId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.RangeIntArray: int get(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSource: java.lang.String getPrefix()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.FilterShowActivity: float getPixelsFromDip(float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: com.google.android.picasasync.PhotoEntry getPhotoEntry()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.EmptyAlbumImage: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.TimeClustering: int getNumberOfClusters()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: long getSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.SlideshowPage: int getBackgroundColorId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.CommonControllerOverlay: android.view.View getView()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: android.app.Dialog getVersionCheckDialog(android.app.Activity)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.ui.Spline: int getNbPoints()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalScale()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getSetPath(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.PathMatcher: java.lang.String getVar(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView$IntegerAnimation: int getTarget()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifReader: com.android.gallery3d.exif.ExifData read(java.io.InputStream)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.PathMatcher: int getIntVar(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ActionImage: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.UriImage: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.UnlockImage: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: long getAlbumId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path findPathByUri(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BitmapPool getMicroThumbPool()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getStraightenRotation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTexture: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: short getDataType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.ActivityState: android.os.Bundle getData()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.OverScroller: int getFinalX()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: long getSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.UriImage: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: int getCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SurfaceTextureScreenNail: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Path: com.android.gallery3d.data.MediaObject getObject()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaPostAlbum$PostSyncFuture: java.lang.Integer get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ColorSpaceMatrix: float[] getMatrix()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilterTinyPlanet: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)> - @DSSource({DSSourceKind.IMAGE}) 
<android.widget.Gallery: int getChildHeight(android.view.View)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoPage$MyDetailsSource: int setIndex()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SingleItemAlbum: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TileImageView$Tile: com.android.gallery3d.ui.TileImageView$Tile getParentTile()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.RawTexture: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.ImageStateAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getScaleOneImageForPreset(com.android.gallery3d.filtershow.imageshow.ImageShow,com.android.gallery3d.filtershow.presets.ImagePreset,android.graphics.Rect,boolean)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTileProvider: int getLevelCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ExtTexture: int getTextureWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getHorizontalMatrix(float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentResolver getContentResolver()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: java.lang.String getMimeType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.LongSparseArray: java.lang.Object get(long,java.lang.Object)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpImage: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageRotate: int getLocalValue()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbum: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.UploadedTexture: int getTarget()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.TransitionStore: java.lang.Object get(java.lang.Object,java.lang.Object)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: int getOrientation(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SecureAlbum: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalVideo: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLRootView: int getCompensation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalImage: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AlbumPage: int getBackgroundColorId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getVerticalMatrix(float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterTypeSet: int getSubMediaSetCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getMatrixOriginalOrientation(int,float,float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMediaItem: void getLatLong(double[])> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMediaItem: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoDataAdapter: int getCurrentIndex()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FaceClustering: int getNumberOfClusters()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilter: int getMinParameter()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpContext: com.android.gallery3d.data.MtpClient getMtpClient()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: int getIfdIdFromTagId(short)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.Bookmarker: java.lang.Integer getBookmark(android.net.Uri)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.Matrix getCropBoundDisplayMatrix()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.Rational: long getDenominator()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbum: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: com.android.gallery3d.filtershow.FilterShowActivity getActivity()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BasicTexture: int getId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocationClustering: java.util.ArrayList getCluster(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.Config$AlbumPage: com.android.gallery3d.app.Config$AlbumPage get(android.content.Context)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterTypeSet: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.OrientationManager: int getDisplayRotation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String[] getTags()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocationClustering: java.lang.String getClusterName(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: int getMediaType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.RawTexture: int getTextureHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.HistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalVideo$LocalVideoRequest: android.graphics.Bitmap onDecodeOriginal(com.android.gallery3d.util.ThreadPool$JobContext,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageSmallFilter: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbum: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMergeAlbum: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.WidgetService$EmptySource: android.graphics.Bitmap getImage(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.PhotoView$ZInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BasicTexture: int getTextureHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifData: com.android.gallery3d.exif.ExifTag addTag(short)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpClient: android.mtp.MtpDevice getDevice(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTileProvider: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifParser: java.nio.ByteOrder getByteOrder()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLCanvasImpl: float getAlpha()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SizeClustering: int getNumberOfClusters()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: int getOrientationFromPath(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView: android.graphics.Rect getSlotRect(int,com.android.gallery3d.ui.GLView)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AlbumSetDataLoader: int getTotalCount(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar: android.view.Menu getMenu()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getLoadingView()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(com.android.gallery3d.data.MtpContext,int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: int getFullImageRotation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FaceClustering$FaceCluster: com.android.gallery3d.data.MediaItem getCover()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalVideo: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ResourceTexture: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: long getItemId(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpDeviceSet: int getSubMediaSetCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpImage: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageSlave: android.graphics.Rect getDisplayedImageBounds()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTexture: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.StringTexture: android.text.TextPaint getDefaultPaint(float,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbum: int getCacheFlag()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.cache.ImageLoader: int getZoomOrientation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.MediaItem getFaceItem(android.content.Context,com.android.gallery3d.data.MediaItem,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageTinyPlanet: float getCurrentTouchAngle()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpDevice: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.FadeTexture: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ColorTexture: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getUserAccount(android.content.Context,com.android.gallery3d.data.MediaObject)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.UriImage: java.lang.String getMimeType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilter: int getPreviewParameter()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.filters.ImageFilter: int getDefaultParameter()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageFlip: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.FaceImage: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMediaItem: long getSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpClient: byte[] getThumbnail(java.lang.String,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SurfaceTextureScreenNail: android.graphics.SurfaceTexture getSurfaceTexture()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.TagClustering: int getNumberOfClusters()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.FadeTexture: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: android.app.Dialog getVersionCheckDialog(android.app.Activity,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifTag: com.android.gallery3d.exif.Rational getRational(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.OrientationManager: int getCompensation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentProviderClient getContentProvider()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLPaint: int getColor()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: int getMediaType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoDataAdapter: int getImageHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView$Layout: int getSlotIndexByPosition(float,float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getFlipMatrix(float,float)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterTypeSet: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.SinglePhotoDataAdapter: com.android.gallery3d.data.MediaItem getMediaItem(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.OrientationManager getOrientationManager()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalDisplayBounds()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifParser: int getStripIndex()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TileImageViewAdapter: int getImageHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.FlingScroller: int getDuration()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: int getTargetSize(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.RangeArray: java.lang.Object get(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SizeClustering: java.util.ArrayList getCluster(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalImage: int getMediaType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getPreviewCropBounds()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaImage: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getCurrentTouchAngle()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF straightenBounds()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLView: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getRotation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTexture: int getTextureWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getItemPath(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ResourceTexture: int getTextureWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getImageRotation(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TileImageViewAdapter: int getLevelCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.PathMatcher: long getLongVar(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DownloadCache$TaskProxy: com.android.gallery3d.data.DownloadCache$Entry get(com.android.gallery3d.util.ThreadPool$JobContext)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(long)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.Face[] getFaces()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMediaItem: int getBucketId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.StitchingProgressManager: java.util.ArrayList access$100(com.android.gallery3d.app.StitchingProgressManager)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView$Layout: int getVisibleEnd()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.AlbumSlidingWindow: com.android.gallery3d.ui.AlbumSlidingWindow$AlbumEntry get(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpDeviceSet: java.lang.String getDeviceName(com.android.gallery3d.data.MtpContext,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSet$MultiSetSyncFuture: java.lang.Integer get()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView$Layout: android.graphics.Rect getSlotRect(int,android.graphics.Rect)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.BlobCache: byte[] lookup(long)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.GLRootView: int getDisplayRotation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: int getFullImageRotation()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbum: int getTotalMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.exif.ExifData: com.android.gallery3d.exif.IfdData getIfdData(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.LruCache: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.MenuExecutor: java.lang.String getMimeType(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ClusterAlbumSet: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: void getLatLong(double[])> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.SnailItem: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaItem: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: java.lang.String getTypeString(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.EdgeAnimation: float getValue()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.CameraShortcutImage: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar: java.lang.String getClusterByTypeString(android.content.Context,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView: int getScrollY()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView: int getScrollX()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.MediaSetSource: android.net.Uri getContentUri(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ResourceTexture: int getId()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.WidgetService$EmptySource: android.net.Uri getContentUri(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: long getItemId(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.PhotoPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterTypeSet: int getSupportedOperations()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaSource: long getTotalTargetCacheSize()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalPhotoBounds()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.TileImageViewAdapter: int getImageWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMediaItem: java.lang.String getMimeType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(android.graphics.Bitmap,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.StateManager: com.android.gallery3d.app.ActivityState getTopState()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: double getLongitude(com.android.gallery3d.data.MediaObject)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MediaObject: com.android.gallery3d.data.Path getPath()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getLocalFlip()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaPostAlbum: android.database.Cursor internalQuery(int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalAlbumSet: java.lang.String getName()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.BitmapTileProvider: int getImageHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.util.GalleryUtils: int getBucketId(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpClient: android.mtp.MtpDevice getDevice(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView$Layout: int getScrollLimit()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.ActionImage: int getHeight()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpImage: java.lang.String getMimeType()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.MtpClient: byte[] getObject(java.lang.String,int,int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.SlotView: android.graphics.Rect getSlotRect(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.FilterShowActivity$LoadBitmapTask: java.lang.Boolean doInBackground(android.net.Uri[])> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.TimeClustering: java.util.ArrayList getCluster(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalVideo: int getWidth()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentProviderClient getStoreProvider()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.ExtTexture: int getTarget()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.common.Utils: java.lang.String getUserAgent(android.content.Context)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.FlingScroller: int getCurrVelocityY()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.FlingScroller: int getCurrVelocityX()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.filtershow.presets.ImagePreset: com.android.gallery3d.filtershow.filters.ImageFilter getFilter(java.lang.String)> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.RawTexture: int getTarget()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.FilterEmptyPromptSet: int getMediaItemCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.data.Cluster: com.android.gallery3d.data.SmallItem getLastItem()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.util.ThreadPool getThreadPool()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: int getCount()> - @DSSource({DSSourceKind.IMAGE}) 
<com.android.browser.BrowserSettings: int getPageCacheCapacity()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: com.android.browser.Tab getTab(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: int getTabCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserBookmarksAdapter: com.android.browser.BrowserBookmarksAdapterItem getRowObject(android.database.Cursor,com.android.browser.BrowserBookmarksAdapterItem)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.homepages.RequestHandler: byte[] htmlEncode(java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: java.lang.Object getGroup(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSnapshotPage$SnapshotAdapter: android.database.Cursor getItem(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: float getFloat(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserBookmarksAdapter: long getItemId(android.database.Cursor)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: java.lang.String getTitle()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.WebStorageSizeManager$StatFsDiskInfo: long getTotalSizeBytes()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getJsEngineFlags()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine: java.lang.String getName()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PreloadedTabControl: com.android.browser.Tab getTab()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getHomePage()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: android.graphics.Bitmap getFavicon()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getDefaultTextEncoding()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: long getItemId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.WebStorageSizeManager$WebKitAppCacheInfo: long getAppCacheSizeBytes()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TitleBar: com.android.browser.BaseUi getUi()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.util.ThreadedCursorAdapter: long getItemId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Preloader$PreloaderSession: android.webkit.WebView getWebView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: float getFloat(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.util.ThreadedCursorAdapter: android.database.Cursor getItem(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.SnapshotProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2: java.lang.Object[] getSelectionWithAccounts(android.net.Uri,java.lang.String,java.lang.String[])> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.AutofillHandler: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.AutofillHandler$AutoFillProfileDbTask: java.lang.Object doInBackground(java.lang.Object[])> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserBookmarksPage: android.content.Intent createShortcutIntent(android.content.Context,android.database.Cursor)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: float getAlpha()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: com.android.browser.WebStorageSizeManager getWebStorageSizeManager()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: android.graphics.Bitmap getDefaultVideoPoster()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: float getFloat(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SnapshotTab: android.content.ContentValues createSnapshotValues()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TitleBar: com.android.browser.UiController getUiController()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: com.android.browser.Tab getCurrentTab()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> com.android.browser.permission.READ_HISTORY_BOOKMARKS - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabScrollView: int getChildIndex(android.view.View)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getDefaultLinkPrefetchSetting()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: android.view.View getVideoLoadingProgressView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getDefaultPreloadSetting()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.homepages.HomeProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchEnabled()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: java.lang.Object getChild(int,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.SearchEngineInfo: java.lang.String getSearchUriForQuery(java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter: java.lang.String getSuggestionTitle(com.android.browser.SuggestionsAdapter$SuggestItem)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.WebViewTimersControl: com.android.browser.WebViewTimersControl getInstance()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<org.apache.http.impl.cookie.BrowserCompatSpec: org.apache.http.Header getVersionHeader()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: short getShort(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: int getInt(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BaseUi: com.android.browser.TitleBar getTitleBar()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter: java.lang.String getSuggestionUrl(com.android.browser.SuggestionsAdapter$SuggestItem)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.homepages.Template$CursorListEntityWrapper: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: int getInt(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SnapshotTab: com.android.browser.Tab getParent()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine: java.lang.CharSequence getLabel()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PieControl$TabAdapter: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: com.android.browser.Tab getLeastUsedTab(com.android.browser.Tab)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView: com.android.browser.BreadCrumbView getBreadCrumbs(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabScrollView: android.view.View getSelectedTab()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DeviceAccountLogin: java.lang.String[] getAccountNames()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: com.android.browser.Tab$SecurityState getSecurityState()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Bookmarks: android.database.Cursor queryCombinedForUrl(android.content.ContentResolver,java.lang.String,java.lang.String)> com.android.browser.permission.READ_HISTORY_BOOKMARKS - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSnapshotPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getPreloadAlwaysPreferenceString(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.addbookmark.FolderSpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngine getDefaultSearchEngine(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: android.webkit.WebSettings$PluginState getPluginState()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: float getAnimationAngle()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DataUri: java.lang.String getMimeType()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.SearchEngineInfo: java.lang.String getName()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: int getChildrenCount(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.ErrorConsoleView: int getShowState()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: android.webkit.WebView getCurrentSubWindow()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Preloader: com.android.browser.Preloader getInstance()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.UrlInputView: int getState()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: float getSweep()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> com.android.browser.permission.WRITE_HISTORY_BOOKMARKS android.permission.GET_ACCOUNTS com.android.browser.permission.READ_HISTORY_BOOKMARKS - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.SearchEngineInfo: java.lang.String getLabel()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.AutoFillProfileDatabase: com.android.browser.AutoFillProfileDatabase getInstance(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage: android.view.View getTargetView(android.view.ContextMenu$ContextMenuInfo)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: double getDouble(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: int getViewTypeCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.NavScreen: com.android.browser.NavTabView getTabView(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: int getCurrentPosition()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.XLargeUi: android.graphics.drawable.Drawable getFaviconDrawable(android.graphics.Bitmap)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BaseUi: com.android.browser.Tab getActiveTab()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: java.lang.String getString(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.widget.BookmarkThumbnailWidgetService: android.content.SharedPreferences getWidgetState(android.content.Context,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserBookmarksPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: long getGroupId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: android.widget.RemoteViews getViewAt(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PieControl$TabAdapter: com.android.browser.Tab getItem(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.SnapshotProvider: android.database.sqlite.SQLiteDatabase getWritableDatabase()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: short getShort(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.homepages.RequestHandler: java.lang.String getUriResourcePath()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.homepages.RequestHandler$4: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.IntentHandler: com.android.browser.IntentHandler$UrlData getUrlDataFromIntent(android.content.Intent)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.XLargeUi: int getContentWidth()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: long getCombinedGroupId(long)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.NavScreen$TabAdapter: long getItemId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: long getCombinedChildId(long,long)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: int getOuterRadius()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: android.webkit.WebView getWebView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.NavScreen$TabAdapter: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BookmarkItem: java.lang.String getName()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: long getGroupId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SnapshotTab: byte[] compressBitmap(android.graphics.Bitmap)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter: com.android.browser.SuggestionsAdapter$SuggestionResults buildSuggestionResults()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: long getChildId(int,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.preferences.WebsiteSettingsFragment$Site: int getFeatureCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.SnapshotProvider: java.io.File getOldDatabasePath(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: int getRawTextZoom(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2: int getUrlCount(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: com.android.browser.Tab getTabFromView(android.webkit.WebView)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserBookmarksAdapter: java.lang.CharSequence getTitle(android.database.Cursor)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BookmarkUtils: android.content.Intent createAddToHomeIntent(android.content.Context,java.lang.String,java.lang.String,android.graphics.Bitmap,android.graphics.Bitmap)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: java.lang.Object getChild(int,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DataUri: byte[] getData()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: long getItemId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.preferences.WebsiteSettingsFragment$Site: int getFeatureByIndex(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BaseUi: boolean isTitleBarShowing()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: int getAdjustedTextZoom(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter: com.android.browser.SuggestionsAdapter$SuggestItem getItem(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: android.app.Activity getActivity()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: com.android.browser.BrowserSettings getInstance()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.homepages.Template: com.android.browser.homepages.Template getCachedTemplate(android.content.Context,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: com.android.browser.BrowserSettings getSettings()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: java.lang.Object getGroup(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: com.android.browser.WebViewFactory getWebViewFactory()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: int getDesiredThumbnailHeight(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getFactoryResetHomeUrl(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getPrettyOrigin()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.NavScreen$TabAdapter: com.android.browser.Tab getItem(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PieControl: com.android.browser.view.PieItem makeItem(int,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: long getNextId()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: android.content.Context getContext()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: float getStartAngle()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: int getGroupCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab$3: android.view.View getVideoLoadingProgressView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BreadCrumbView: com.android.browser.BreadCrumbView$Crumb getTopCrumb()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: com.android.browser.ErrorConsoleView getErrorConsole(boolean)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.widget.BookmarkThumbnailWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserBookmarksAdapter: com.android.browser.BrowserBookmarksAdapterItem getLoadingObject()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TitleBar: int getEmbeddedHeight()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.IntentHandler$UrlData: com.android.browser.PreloadedTabControl getPreloadedTab()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.IntentHandler$UrlData: java.lang.String getSearchBoxQueryToSubmit()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: com.android.browser.DeviceAccountLogin getDeviceAccountLogin()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PreloadController: com.android.browser.TabControl getTabControl()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: com.android.browser.search.SearchEngine getSearchEngine()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryAdapter: long getChildId(int,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getSearchEngineName()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.homepages.Template$CursorListEntityWrapper: android.database.Cursor getCursor()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.SearchEngines: java.util.List getSearchEngineInfos(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<android.webkit.BrowserFrame: android.webkit.CallbackProxy getCallbackProxy()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BookmarkUtils: android.graphics.drawable.Drawable createListFaviconBackground(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: com.android.browser.TabControl getTabControl()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: int getUserAgent()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: android.webkit.WebView getTopWindow()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: com.android.browser.BreadCrumbView getBreadCrumbView(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngineInfo getSearchEngineInfo(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BookmarkUtils: android.graphics.Bitmap createIcon(android.content.Context,android.graphics.Bitmap,android.graphics.Bitmap,com.android.browser.BookmarkUtils$BookmarkIconType)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserBookmarksPage: java.lang.String getUrl(android.database.Cursor)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: com.android.browser.Tab getParent()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: android.content.SharedPreferences getPreferences()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: long getLong(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: short getShort(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getOrigin()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: android.content.Context getContext()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.addbookmark.FolderSpinnerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSnapshotPage: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.NavTabScroller: com.android.browser.NavTabView getTabView(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: int getTabPosition(com.android.browser.Tab)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: long getLong(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.homepages.Template: com.android.browser.homepages.Template copy()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BackgroundHandler: android.os.Looper getLooper()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.database.Cursor getCursor(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserBookmarksPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int,android.graphics.Bitmap)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BreadCrumbView: java.lang.Object getTopData()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BaseUi: android.webkit.WebView getWebView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PreloadController: android.content.Context getContext()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.SnapshotProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.SnapshotProvider: android.database.sqlite.SQLiteDatabase getReadableDatabase()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.NavTabScroller: int getGap()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: java.util.List getItems()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: android.webkit.WebViewClassic getWebViewClassic()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.DefaultSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.ScrollerView: int getMaxScrollAmount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BaseUi: android.view.View getVideoLoadingProgressView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: int getTextZoom()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: int getChildrenCount(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchOnWifiOnlyPreferenceString(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.util.ThreadedCursorAdapter: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: android.webkit.WebView getCurrentWebView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.SearchEngineInfo: java.lang.String getSuggestUriForQuery(java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: long getItemId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: android.webkit.WebView getCurrentTopWebView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: int getDesiredThumbnailWidth(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BaseUi: android.graphics.drawable.Drawable getFaviconDrawable(android.graphics.Bitmap)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PreloadController: android.view.View getVideoLoadingProgressView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.UrlInputView: android.widget.ListAdapter getAdapter()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: com.android.browser.Tab getTabFromAppId(java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: int getMaxTabs()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SnapshotTab$LoadData: android.database.Cursor doInBackground(java.lang.Void[])> com.android.browser.permission.READ_HISTORY_BOOKMARKS - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: java.lang.String getUrl()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getPreloadOnWifiOnlyPreferenceString(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: android.webkit.WebView getCurrentTopWebView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: float getInvertedContrast()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: long getItemId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter$CombinedCursor: com.android.browser.SuggestionsAdapter$SuggestItem getItem()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: com.android.browser.GeolocationPermissionsPrompt getGeolocationPermissionsPrompt()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: android.view.View getSubViewContainer()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.ComboViewActivity$TabsAdapter: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter: long getItemId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PieControl$TabAdapter: long getItemId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SnapshotTab: android.graphics.Bitmap getScreenshot()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: android.content.Intent createBookmarkCurrentPageIntent(boolean)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: int getInt(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab$3: android.graphics.Bitmap getDefaultVideoPoster()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: long getChildId(int,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getPrettyTitle()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: long getLastRecovered()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.ScrollerView: float getTopFadingEdgeStrength()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter: android.widget.Filter getFilter()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.util.ThreadedCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: com.android.browser.UI getUi()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<android.webkit.BrowserFrame: java.lang.String getRawResFilename(int,android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.NfcHandler: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PreloadController: android.app.Activity getActivity()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: android.view.View getView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<org.apache.http.impl.cookie.BrowserCompatSpec: int getVersion()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getPreloadEnabled()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.ComboViewActivity$TabsAdapter: android.app.Fragment getItem(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.WebStorageSizeManager: long getAppCacheMaxSize()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabScrollView$TabLayout: int getChildDrawingOrder(int,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: android.graphics.Bitmap createScreenshot(android.webkit.WebView,int,int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<android.webkit.BrowserFrame: boolean getShouldStartScrolledRight()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.AutoFillProfileDatabase: android.database.Cursor getProfile(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SnapshotTab: long getDateCreated()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TitleBar: com.android.browser.PageProgressView getProgressView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.ScrollerView: float getBottomFadingEdgeStrength()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.addbookmark.FolderSpinnerAdapter: long getItemId(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.NavTabScroller: int getScrollValue()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider: java.lang.String getClientId(android.content.ContentResolver)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TitleBar: com.android.browser.NavigationBarBase getNavigationBar()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: com.android.browser.TabControl$OnThumbnailUpdatedListener getOnThumbnailUpdatedListener()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TitleBar: android.webkit.WebView getCurrentWebView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: long getLong(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: double getDouble(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DeviceAccountLogin: int getState()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.WebStorageSizeManager$StatFsDiskInfo: long getFreeSpaceSizeBytes()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Preloader: com.android.browser.PreloadedTabControl getPreloadedTab(java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.DefaultSearchEngine: java.lang.CharSequence getLabel()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: android.view.View getViewContainer()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: android.os.Bundle createSaveState()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: com.android.browser.Tab getCurrentTab()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngine get(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter$CursorSource: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Preloader$PreloaderSession: com.android.browser.PreloadedTabControl getTabControl()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BaseUi: android.app.Activity getActivity()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: long getId()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchAlwaysPreferenceString(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: int getAdjustedDoubleTapZoom(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.preferences.WebsiteSettingsFragment$Site: android.graphics.Bitmap getIcon()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: int getLoadProgress()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: java.lang.String getOriginalUrl()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PieControl$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BaseUi: android.graphics.Bitmap getDefaultVideoPoster()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: android.graphics.Bitmap getScreenshot()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabScrollView: int getScroll()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: int getInnerRadius()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: com.android.browser.view.PieMenu$PieView getPieView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserBookmarksAdapter: java.lang.Object getRowObject(android.database.Cursor,java.lang.Object)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.DefaultSearchEngine: java.lang.String getName()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PreloadController: android.graphics.Bitmap getDefaultVideoPoster()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.homepages.Template$HashMapEntityData: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: float getStart()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: double getDouble(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserHistoryPage$HistoryAdapter: int getGroupCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: int getAdjustedMinimumFontSize(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SnapshotTab: long getId()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter$SuggestionResults: int getLineCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserWebView: int getTitleHeight()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.addbookmark.FolderSpinnerAdapter: int getCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: java.lang.String getString(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<android.webkit.BrowserFrame: java.lang.String getUserAgentString()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: android.webkit.WebView getCurrentWebView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.SuggestionsAdapter$SuggestCursor: com.android.browser.SuggestionsAdapter$SuggestItem getItem()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.addbookmark.FolderSpinnerAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Controller: java.util.List getTabs()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView: com.android.browser.BrowserBookmarksAdapter getChildAdapter(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: android.webkit.WebView getSubWebView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: android.net.http.SslError getSslCertificateError()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.DateSortedExpandableListAdapter: int getGroupCount()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.NavScreen$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: long getLong(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BreadCrumbView: int getBaseline()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: int getDoubleTapZoom()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserSettings: int getMinimumFontSize()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BookmarkItem: java.lang.String getUrl()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: java.lang.String getString(int)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.PreloadController: com.android.browser.WebViewFactory getWebViewFactory()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.view.PieItem: int getLevel()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.homepages.HomeProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: android.widget.RemoteViews getLoadingView()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.TabControl: java.util.List getTabs()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.BrowserActivity: com.android.browser.Controller getController()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<com.android.browser.Tab: java.lang.String getAppId()> - @DSSource({DSSourceKind.BROWSER_INFORMATION}) 
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getDriverName(java.lang.String)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService$TagService: int getTimeout(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcTag$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcTag$Stub$Proxy: int[] getTechList(int)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parse(android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcTag$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService: byte[] doTransceiveNoLock(int,byte[])> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcTag: byte[] transceive(byte[],boolean,int[])> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NdefRecord: int getByteLength()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage createHandoverSelectMessage(boolean)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INdefPushCallback$Stub$Proxy: android.net.Uri[] getUris()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NdefFormatable: byte[] transceive(byte[],boolean)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.Ndef: byte[] transceive(byte[],boolean)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.P2pLinkManager: java.lang.String getMessageType(android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothOobDataRecord()> android.permission.BLUETOOTH - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage createHandoverRequestMessage()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(int,int,int,int)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] getGeneralBytes()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseBtOob(java.nio.ByteBuffer)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcBarcode: android.nfc.Tag getTag()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NFC}) 
<android.nfc.Tag: java.lang.String[] getTechList()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcAdapter$Stub$Proxy: int getState()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.Tag: byte[] getId()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[],boolean)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcF: byte[] transceive(byte[],boolean)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.BluetoothOppHandover: java.lang.String getMimeTypeForUri(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcV: byte[] transceive(byte[],boolean)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: int getTimeout(int)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService$NfcAdapterService: int getState()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseHandoverSelect(android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessage: byte getVersion()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseNokia(java.nio.ByteBuffer)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NdefRecord: byte[] getPayload()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcB: byte[] getProtocolInfo()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcBarcode: byte[] getBarcode()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.IsoDep: byte[] transceive(byte[],boolean)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcTag$Stub$Proxy: android.nfc.NdefMessage ndefRead(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getSap()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getHandle()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcAdapter: android.content.Context getContext()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: int getSize()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService$NfcAdapterExtrasService: java.lang.String getDriverName(java.lang.String)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.TransceiveResult: byte[] getResponseOrThrow()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcDispatcher: android.content.Intent getAppSearchIntent(java.lang.String)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcTag$Stub$Proxy: android.nfc.TransceiveResult transceive(int,byte[],boolean)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcTag getNfcTagInterface()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcV: byte getDsfId()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] transceive(byte[])> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] receive()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: int getBlockCount()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.Ndef: android.nfc.Tag getTag()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionlessSocket(int,java.lang.String)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcV: byte getResponseFlags()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcV: byte[] transceive(byte[])> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcF: byte[] transceive(byte[])> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcA: byte[] transceive(byte[])> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcB: byte[] transceive(byte[])> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findResumedActivityState()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareUltralight: android.nfc.tech.MifareUltralight get(android.nfc.Tag)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcAdapter: int getSdkVersion()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerInTransferLocked(android.bluetooth.BluetoothDevice)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getGetRequest(int,android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcA: int getTimeout()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverTransfer: int getTransferId()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcF: int getTimeout()> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.RegisteredComponentCache: java.util.ArrayList getComponents()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcA: int getMaxTransceiveLength()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcF: int getMaxTransceiveLength()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcB: int getMaxTransceiveLength()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcV: int getMaxTransceiveLength()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle transceive(java.lang.String,byte[])> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareUltralight: android.nfc.Tag getTag()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NdefRecord: byte[] toByteArray()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeLlcpSocket: int getRemoteRw()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: int getMaxTransceiveLength()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(int,java.lang.String,int,int,int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcB: android.nfc.Tag getTag()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcA: android.nfc.Tag getTag()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcF: android.nfc.Tag getTag()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcV: android.nfc.Tag getTag()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.Ndef: java.lang.String getType()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INdefPushCallback$Stub$Proxy: android.nfc.NdefMessage createMessage()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcA: short getSak()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcA: byte[] getAtqa()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: byte[] addressToReverseBytes(java.lang.String)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcTag: int[] getTechList()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: byte[][] getWipeApdus()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcV: android.nfc.tech.NfcV get(android.nfc.Tag)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NdefMessage: int getByteArrayLength()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcDispatcher$DispatchInfo: android.content.Intent setTagIntent()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createHandoverSelectRecord(boolean)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcF: byte[] getSystemCode()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalMiu()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.SendUi: float getDegreesForRotation(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(int,int,int,int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService: com.android.nfc.NfcService getInstance()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcActivityManager: android.net.Uri[] getUris()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage tryHandoverRequest(android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.TechListParcel: java.lang.String[][] getTechLists()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeLlcpSocket: int getRemoteMiu()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NdefMessage: byte[] toByteArray()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessage: byte getField()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcBarcode: int getType()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcTag: int getHandle()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.Tag: android.nfc.INfcTag getTagService()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcF: android.nfc.tech.NfcF get(android.nfc.Tag)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcA: android.nfc.tech.NfcA get(android.nfc.Tag)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessage: android.nfc.NdefMessage getNdefMessage()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getLinkMiu()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getSuccessResponse(android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getNfcAdapter(android.content.Context)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.P2pLinkManager: int getMessageAarPresent(android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: java.lang.String dump()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findActivityState(android.app.Activity)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcAdapter: android.nfc.INfcAdapter getService()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: byte[] readBlock(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: int getTimeout()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.IsoDep: byte[] transceive(byte[])> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.P2pLinkManager: android.nfc.NdefMessage createDefaultNdef(java.lang.String)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcAdapter$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.IsoDep: int getTimeout()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: byte[] transceive(byte[],boolean)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcTag$Stub$Proxy: boolean isPresent(int)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.LlcpPacket: byte[] getDataBuffer()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcTag: byte[] getUid()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalSap()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcTag getNfcTagInterface()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcTag: byte[] readNdef()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepClient: com.android.nfc.snep.SnepMessage get(android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcAdapterExtras$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INdefPushCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeP2pDevice: int getMode()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcF: byte[] getManufacturer()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.SendUi: android.graphics.Bitmap createScreenshot()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createHandoverRequestRecord()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.BasicTagTechnology: int getMaxTransceiveLengthInternal()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.ndefpush.NdefPushProtocol: byte[] toByteArray()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createCollisionRecord()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessenger: com.android.nfc.snep.SnepMessage getMessage()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareUltralight: int getType()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessage: byte[] toByteArray()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState getActivityState(android.app.Activity)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.P2pLinkManager: int getMessageTnf(android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(int,java.lang.String,int,int,int)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcTag: int getConnectedTechnology()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeP2pDevice: int getHandle()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcB: byte[] getApplicationData()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getMessage(byte)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcDispatcher$DispatchInfo: android.content.Intent setTechIntent()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle close(java.lang.String,android.os.IBinder)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessage: int getLength()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcTag$Stub$Proxy: android.nfc.Tag rediscover(int)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: int getDefaultLlcpRwSize()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService$TagService: int getMaxTransceiveLength(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: android.nfc.Tag getTag()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcTag$Stub$Proxy: int getMaxTransceiveLength(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: int getType()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.BluetoothHeadsetHandover: boolean getProfileProxys()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionLessSocket(int,java.lang.String)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.Tag: int getServiceHandle()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcAdapter: android.nfc.INfcTag getTagService()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.BasicTagTechnology: byte[] transceive(byte[],boolean)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: boolean getExtendedLengthApdusSupported()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalRw()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: int getMaxTransceiveLength(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.NfcBarcode: android.nfc.tech.NfcBarcode get(android.nfc.Tag)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.ndefpush.NdefPushProtocol: android.nfc.NdefMessage getImmediate()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NdefRecord: byte[] getType()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcTag$Stub$Proxy: int getTimeout(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INdefPushCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.Tag: int getConnectedTechnology()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothAlternateCarrierRecord(boolean)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NdefRecord: byte[] getId()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService: byte[] doTransceive(int,byte[])> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerOutTransferLocked(com.android.nfc.handover.HandoverManager$BluetoothHandoverData,android.net.Uri[])> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcTag: android.os.Bundle[] getTechExtras()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessage: int getAcceptableLength()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareUltralight: int getTimeout()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.Ndef: int getMaxSize()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareUltralight: byte[] readPages(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: java.lang.String getName()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.dhimpl.NativeNfcManager: int getDefaultLlcpMiu()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getPutRequest(android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.INfcTag$Stub$Proxy: boolean isNdef(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareClassic: int getSectorCount()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcAdapter: int getAdapterState()> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.LlcpPacket: int getRemoteSap()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NdefRecord: short getTnf()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.Tag: android.os.Bundle getTechExtras(int)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService$NfcAdapterExtrasService: int getCardEmulationRoute(java.lang.String)> android.permission.NFC - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.NfcService$TagService: int[] getTechList(int)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcApplicationState findAppState(android.app.Application)> - @DSSource({DSSourceKind.NFC}) 
<com.android.nfc.P2pLinkManager: int getMessageSize(android.nfc.NdefMessage)> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.NfcActivityManager: android.nfc.NdefMessage createMessage()> - @DSSource({DSSourceKind.NFC}) 
<android.nfc.tech.MifareUltralight: int getMaxTransceiveLength()> - @DSSource({DSSourceKind.NFC}) 
<android.view.Window: android.view.Window$Callback getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.Utility$4: java.lang.Integer get(android.database.Cursor,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceRandom: com.android.commands.monkey.MonkeyEvent getNextEvent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getAddressString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilMediaElementImpl: short getFill()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getGroupBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.SuperscriptSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaProperties: int[] getSupportedAudioCodecs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Video: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getNativeOutputSampleRate(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeader: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Authenticator: java.net.PasswordAuthentication getPasswordAuthentication()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: android.app.IWallpaperManager getIWallpaperManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.Object getDefaultValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.telephony.MmsSmsProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.LayerDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.CharSequence getText(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: int getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageCompose$ActionSpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentLengthHeader getContentLengthHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gms.common.internal.IGmsCallbacks$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultiset: java.lang.Object delegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.WorkSource: int get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$Factory: android.webkit.WebViewFactoryProvider$Statics getStatics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SystemSensorManager: java.util.List getFullSensorList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.RichInputConnection: int getCursorCapsMode(int,java.util.Locale,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.CameraUtility: com.google.android.apps.lightcycle.util.Size getPhotoSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaJsonReaderParser$BooleanObjectField: int getValue(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.LogEntries$DeviceInfoEntry: java.lang.String[] getLogStrings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObjectList: java.lang.String debugDump()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: android.text.Layout$Directions getLineDirections(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: char getCharExtra(java.lang.String,char)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.testrunner.IAutomationSupport getAutomationSupport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.LexerCore: java.lang.String getBuffer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTransition: int getBehavior()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.Watchdog: com.android.server.Watchdog getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableList: java.util.ListIterator listIterator(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyStylesSet$EmptyKeyStyle: java.lang.String[] getStringArray(android.content.res.TypedArray,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ConnectionState: int getPaddingSize(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.CompatUtils: android.content.Intent getInputLanguageSelectionIntent(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView$PrivateAccess: float getVerticalScrollFactor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getHeaderFieldKey(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Inet6Address: int getScopeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getSigAlgParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.OverScroller: int getCurrY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.OverScroller: int getCurrX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ViewManager: java.util.ArrayList access$300(android.webkit.ViewManager)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider$Transport: android.os.ICancellationSignal createCancellationSignal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DateTimeKeyListener: char[] getAcceptedChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: android.content.Context getThemedContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString$AttributedIterator: int getRunLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$Factory: android.webkit.CookieManager getCookieManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Util: int getJpegRotation(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.XMPMetaFactory$1: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.ISerialManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.sax.BadXmlException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: long getOriginalLocalSequenceNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: int getPromptPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUTF8String: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: int getSoftInputMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: byte[] getThumbnail(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertStore: java.security.cert.CertStoreParameters getCertStoreParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountShutdownObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getAllowContentAccess()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.io.pem.PemObject: byte[] getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getMessageChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipProviderImpl: javax.sip.Dialog getNewDialog(javax.sip.Transaction)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.util.ListIterator getHeaderNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.Attributes$Name: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Set$1: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: int getInt(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.AccessibleObject: java.lang.String getSignature(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CSeqHeader getCSeq()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: long getLong(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getRouteAtStatic(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.encoders.Hex: byte[] decode(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupMenu: android.view.MenuInflater getMenuInflater()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: byte[] protectedArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getMaxZoomScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout: int getRowCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardIconsSet: android.graphics.drawable.Drawable getIconDrawable(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.MediaItemUtils: long getMinimumImageItemDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: int geteuid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy getSmallerMapStorage(java.util.SortedMap)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaSyncManager: com.google.android.picasasync.PicasaSyncManager get(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorageInfo: long getFreeSpace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.mail.Multipart: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multisets$ImmutableEntry: java.lang.Object getElement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Equalizer: short getBand(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.WeakHashMap$Entry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: char getShortcut()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.OtherName: byte[] access$200(org.apache.harmony.security.x509.OtherName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarView: int getDropdownSelectedPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$Keys$1$1: java.lang.Object getElement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.smil.TimeList getBegin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipDescription: java.lang.String getMimeType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: short getShort(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTheme: int getNameResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableMap: java.util.Collection values()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterPort: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: int getDeviceId(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getScrollBarSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.TransformedImmutableList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$SingletonList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getByteCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getRawUserInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.QueryController: java.lang.String getCurrentActivityName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: java.security.cert.Certificate getCertificate(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipEntry: long getCompressedSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getTopPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Virtualizer: android.media.audiofx.Virtualizer$Settings getProperties()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.sip.SipEditor$PreferenceKey: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.AlarmPreference: android.net.Uri getAlert()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getOwner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$SetOnClickPendingIntent: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.opengl.DeviceOrientedSprite$1: android.graphics.PointF getPosition(com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector$DeviceOrientation)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: int getZAdjustment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: java.lang.String getMAddr()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: int getStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: int getDeviceClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: java.util.List getSamples()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebBackForwardListClassic: int getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.Principal getSubjectDN()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterContext: android.filterfw.core.GLEnvironment getGLEnvironment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int findClosestMotionRow(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimerTask: long scheduledExecutionTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTransition: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.AuthenticatorDescription: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: double getDouble()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.VelocityTracker: float getXVelocity(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.validation.Validator: java.lang.Object getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.Utility$3: java.lang.Long get(android.database.Cursor,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getTopFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.Proxy: org.apache.http.conn.routing.HttpRoutePlanner getAndroidProxySelectorRoutePlanner(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DEROutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDLSubStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoaderManagerImpl: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getViaHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getModulus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapString$1: java.io.InputStream getAsStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageItem: java.lang.CharSequence getCachedFormattedMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable: android.graphics.Region getTransparentRegion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: int getBasicConstraints()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodSession$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Program: android.renderscript.Program$TextureType getTextureType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.Metadata: java.lang.String getString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1TypeCollection: void getValues(java.lang.Object,java.lang.Object[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderOperation: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebStorage: android.webkit.WebStorage getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceRandom: int getKeyCode(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.AbsoluteSizeSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IClipboard$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.NameValue: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.Dialog getJoinDialog(gov.nist.javax.sip.header.extensions.JoinHeader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.scheme.Scheme: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragLayer$LayoutParams: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ContainerEncryptionParams: java.lang.String getMacAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Element: android.renderscript.Element$DataKind getDataKind()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.opengl.Sprite: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountAuthenticatorResponse$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.CollationElementIteratorICU: libcore.icu.CollationElementIteratorICU getInstance(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.CompositionTimeToSample: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.DialogPreference: java.lang.CharSequence getNegativeButtonText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle$Control: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserModel: android.content.Intent getIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentDisposition: java.lang.String getDispositionType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getBreadCrumbTitle(android.content.res.Resources)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.AppErrorResult: int get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.IInputDevicesChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getUserAgentString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer getContent(long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarContainer: android.view.View getTabContainer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getGravity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.StringUtils: java.lang.String getSimpleTimestampAsString(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractFullBox: int getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeaderElement: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.connectivity.Vpn: android.os.ParcelFileDescriptor establish(com.android.internal.net.VpnConfig)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: double getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.DefaultRetryScheme: long getWaitingInterval()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralNames: java.util.Collection getPairsList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: java.util.List getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$UnmodifiableListMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Bookmarks: android.content.Intent getIntentForShortcut(android.content.ContentResolver,char)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.MemoryFile: int getSize(java.io.FileDescriptor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.ThreadAuditor: long getPingIntervalInMillisecs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioRecord: int getRecordingState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: java.lang.String[] getStringArray(android.content.res.TypedArray,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.TestCaseCollector getTestCaseCollector(java.lang.ClassLoader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureLibrary: int getOrientationStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.VertexFrame: int getVboId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.PhotoModule$ImageNamer: java.lang.String getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: java.lang.String getGeneratedImageClip()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: libcore.net.http.HttpConnection getConnection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: android.widget.ListView getListView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipEntry: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Certificate: byte[] access$300(org.apache.harmony.security.x509.Certificate)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler getRedirectHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeSwitcher: java.util.Locale getCurrentSubtypeLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature: java.security.AlgorithmParameters getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] getArcs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: long getBoundaryEndTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTransition getEndTransition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.stack.SIPServerTransaction getCanceledInviteTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.LayerDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: android.graphics.RectF getShownFrameLw()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: android.widget.ListView getListView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.appwidget.IAppWidgetHost$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.TransitionsAdapter: com.android.videoeditor.TransitionType[] getTransitions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDeviceConnection: int getFileDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItem: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.ICU: java.util.Locale[] getAvailableBreakIteratorLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: int getSelectedItemPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.boxes.ContainerBox getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat getNumberFormat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableEntry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.util.ZoneInfo: int getOffset(int,int,int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEntry: byte[] getPhotoBytes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ShapeDrawable$ShapeState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.usb.UsbHostManager: void getDeviceList(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.FocusFinder: android.view.View findNextFocusInAbsoluteDirection(java.util.ArrayList,android.view.ViewGroup,android.view.View,android.graphics.Rect,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaDatabaseHelper: long getUserId(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: java.util.List getRunningAppProcesses()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Utils: long getTimeNow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.lang.String getFocusMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ExchangeStore: java.lang.Class getSettingActivityClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.RuleBasedCollatorICU: libcore.icu.CollationElementIteratorICU getCollationElementIterator(java.text.CharacterIterator)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.IInputDevicesChangedListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.base.Joiner$3: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterPort: android.filterfw.core.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: int getContentHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createByteFormat(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignedData: java.util.List getCertificates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Set: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: com.android.inputmethod.compat.InputMethodManagerCompatWrapper getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Throwable: java.lang.Throwable[] getSuppressed()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherApplication: int getLongPressTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: int getMetadataCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.Field: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.ServiceWatcher: java.util.ArrayList getSignatureSets(android.content.Context,java.util.List)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ContrastFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserParam()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AllowEvents: java.lang.String getEventType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetService: java.util.List getInstalledProviders(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: java.lang.String getTagName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SerializedFrame: float[] getFloats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewDatabaseClassic: java.util.ArrayList getFormData(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.Queries$Query: java.lang.String[] getProjection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Validity: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: byte getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEntry: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.NativeFrame: float[] getFloats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.backup.IBackupTransport$Stub$Proxy: int getRestoreData(android.os.ParcelFileDescriptor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.events.EventImpl: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: int getDropDownVerticalOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AlgorithmParameters: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.OverlaysAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: int getMappedViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.BEROctetStringParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.Display getDisplay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String debugDump()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.Authority: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Oid: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.EnumMap$EnumMapKeySet$1: java.lang.Enum get(java.util.MapEntry)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Cubic$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Cubic$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Cubic$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: android.media.videoeditor.Overlay getOverlay(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Animator: android.animation.Animator clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.content.PackageHelper: java.lang.String[] getSecureContainerList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.UriImage: java.lang.String getSrc()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SampleToChunkBox getSampleToChunkBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.LightCycleView: com.google.android.apps.lightcycle.camera.CameraPreview getCameraPreview()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieManagerClassic: android.webkit.CookieManagerClassic getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.CipherSpi: int engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Thread: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: java.util.Set entrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView$RecycleBin: android.view.View getActiveView(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getSystemUiVisibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getTopPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.ICU: java.util.Locale[] getAvailableDateFormatSymbolsLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Inflater: int getRemaining()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.FileUtils: java.lang.String getMaskFilename(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity: java.util.ArrayList access$100(android.preference.PreferenceActivity)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountAuthenticator$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageInstallObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: int getOrder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: int getLayerStack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.HorizontalScrollView: int getMaxScrollAmount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.TransitionAlpha: int getRGBFileHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: com.android.phone.Ringer getRinger()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Toast: float getVerticalMargin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserModel: int getHistorySize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Folder: int getItemCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.TransformedImmutableList$1: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.DownloadManager: com.android.mms.util.DownloadManager getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioRecord: int getPositionNotificationPeriod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.References: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneUtils: android.graphics.drawable.Drawable getProviderIcon(android.content.Context,android.content.Intent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createFloatFormat(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorageInfo: java.lang.String getDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.System$SystemEnvironment: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeListImpl: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.PointerIcon: android.view.PointerIcon getNullIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaApi: int getAlbumPhotos(com.google.android.picasasync.AlbumEntry,com.google.android.picasasync.PicasaApi$EntryHandler)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: java.net.InetAddress getInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.test.IsolatedContext: android.content.ContentResolver getContentResolver()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Window: int getLocalFeatures()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getTotalPaddingLeft()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: android.widget.AutoCompleteTextView$Validator getValidator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.TwoStatePreference: android.os.Parcelable onSaveInstanceState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.DialogPreference: android.os.Parcelable onSaveInstanceState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ServerOperation: javax.obex.HeaderSet getReceivedHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.protocol.DefaultedHttpContext: java.lang.Object getAttribute(java.lang.String)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getExitFadeDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: int getActions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: com.android.launcher2.LauncherModel getModel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.AlertDialog$Builder: android.app.AlertDialog show()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.AddressImpl: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: com.android.launcher2.Folder getFolderForTag(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: int getDisplayedChild()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: int getShowDividers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnails(android.content.ContentResolver,android.net.Uri,int,java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERT61String: com.android.org.bouncycastle.asn1.DERT61String getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ExpandableListActivity: android.widget.ExpandableListView getExpandableListView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.DeleteMessageConfirmationDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.Extensions getCrlExtensions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageDataObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.JarURLConnection: java.security.cert.Certificate[] getCertificates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: java.lang.String getNaN()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiDevice: java.lang.String getCurrentPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: com.android.org.bouncycastle.asn1.ASN1GeneralizedTime getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ReplyTo: gov.nist.core.HostPort getHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppMediaDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILMediaElement createMediaElement(java.lang.String,org.w3c.dom.smil.SMILDocument,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPServerTransaction: int getViaPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: int getLauncherLargeIconSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.ParserCursor: int getUpperBound()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: com.android.launcher2.CellLayout getCellLayout(long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageInstallObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: java.lang.String getHttpParamsLine1Key()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.AnimationUtils$CrossFadeDrawable: android.animation.ObjectAnimator getAnimator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.CountryCodeToRegionCodeMap: java.util.Map getCountryCodeToRegionCodeMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetServiceImpl: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getY(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getLegacyExternalStorageObbDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetHostView: android.graphics.Rect getDefaultPaddingForWidget(android.content.Context,android.content.ComponentName,android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable$BitmapState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieOverlay getOverlay(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Quad$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Quad$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getLineStart(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Quad$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.CollationKey: java.lang.String getSourceString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.DTDHandler getDTDHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Server: java.util.ListIterator getProduct()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharToByteBufferAdapter: char get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ErrorInfo: java.lang.String getErrorMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.GLFrame: java.lang.Object getObjectValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.Pop3Store$Pop3Folder: int getUnreadMessageCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.InsetDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: short getShort(java.lang.String,short)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackRunBox: java.util.List getEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: java.lang.String getDebugString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.profiler.HprofData$StackTrace: int getThreadId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DeviceAdminReceiver: android.app.admin.DevicePolicyManager getManager(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getEllipsizedWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.StatusLine getStatusLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Level: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getChannelConfiguration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean getMainCountryForCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: android.os.Vibrator getInputDeviceVibrator(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageProcessor: int getDefaultPort(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension: org.apache.harmony.security.x509.KeyUsage getKeyUsageValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ISyncStatusObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: boolean[] getKeyUsage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Sequence getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.SocketChannelImpl: java.io.FileDescriptor getFD()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaProperties: int getSupportedAudioTrackCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: long getParentNodeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: char getNumericShortcut()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$WrappedCollection: com.google.common.collect.AbstractMultimap$WrappedCollection getAncestor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralNames$1: java.util.Collection getValues(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.PduLoaderManager: com.android.mms.util.ItemLoadedFuture getPdu(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Entity: android.content.ContentValues getEntityValues()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1ValueCollection: java.util.Collection getValues(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.AlignmentSpan$Standard: android.text.Layout$Alignment getAlignment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalToolMajor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.InputFilter[] getFilters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Utils$RingCharBuffer: java.lang.String getLastWord(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ProgressBar: android.graphics.drawable.shapes.Shape getDrawableShape()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialogErrorEvent: int getErrorID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CompoundButton: int[] onCreateDrawableState(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.BerInputStream: byte[] getBuffer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: java.util.Date getRevocationDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.wallpaper.fall.ScriptField_Constants: android.renderscript.Element createElement(android.renderscript.RenderScript)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RawHeaders: int getResponseCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.Class getDeclaringClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socks4Message: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getActionIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SimpleAdapter: android.widget.SimpleAdapter$ViewBinder getViewBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getPeerAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: android.view.View getView(android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DEROutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDERSubStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.media.MediaProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.fortress.Services: java.security.Provider[] getProviders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.ProjectPickerAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioRecord: int getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ArrayAdapter: android.widget.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: boolean getAutoExposureLock()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DeleteDropTarget$5: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getClientParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DeleteDropTarget$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.LocatorImpl: java.lang.String getSystemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebResourceResponse: java.io.InputStream getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getDefaultMinZoomScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Canvas: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$Alignment: int getSizeInCell(android.view.View,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.media.AudioManager getAudioManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxListFragment: long getAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserHandle: int getIdentifier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20TextureLayer: android.graphics.SurfaceTexture getSurfaceTexture()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.TimeKeyListener: char[] getAcceptedChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObject: java.lang.String debugDump()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getAccessibilityWindowId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramPacket: int getOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.net.DefaultNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: java.security.PublicKey getPublicKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.lang.String getHeaderField(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TtsEngines: java.lang.String getLocalePrefForEngine(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeDecimalFormat: int getMinimumIntegerDigits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherViewPropertyAnimator: java.util.ArrayList getListeners()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.Insets getLayoutInsets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.SAXParseException: java.lang.String getSystemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getParentSelector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuPresenter: android.view.View getItemView(com.android.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Context: java.lang.String getString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentSender: java.lang.String getTargetPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.DisplayManagerGlobal: int[] getDisplayIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.DistributionPoint$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralName: byte[] access$202(org.apache.harmony.security.x509.GeneralName,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.wallpaper.galaxy.ScriptField_VpConsts: android.renderscript.Element createElement(android.renderscript.RenderScript)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.TrackMetaData: java.lang.String getLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SingletonImmutableMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: byte getByte(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.InputPointers: int getPointerSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: long getPlayheadPos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AcceptLanguage: float getQValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.util.List getHeadersAsEncodedStrings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: int getVoiceMessageCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicInteger: int get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getDefaultMaxZoomScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.BerInputStream: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: boolean getVoiceSearchLaunchRecognizer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.VerificationParams: android.net.Uri getReferrer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.WordComposer: java.lang.String getTypedWord()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.ManageConferenceUtils: int getNumCallersInConference()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.net.SocketFactory: java.net.Socket createSocket()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoInline: int getTextureName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceFragment: android.preference.PreferenceScreen getPreferenceScreen()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractBox: long getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstMutationRule: com.google.common.collect.BstModifier getModifier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: java.lang.String getAuthority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: android.database.Cursor access$200(com.android.ex.chips.BaseRecipientAdapter,java.lang.CharSequence,int,java.lang.Long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: int getOrientation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.IntentResolverOld: java.lang.Object newResult(android.content.IntentFilter,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getAuthority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.MissingFormatWidthException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy getCamera()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: long getParent(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.TaskRecord: long getInactiveDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.ResponseHeaders: java.util.Date getExpires()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeValue(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.Signature: java.security.PublicKey getPublicKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getTotalPaddingBottom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.CompatUtils: java.lang.Class getClass(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.LastComposedWord: int getSeparatorLength(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: gov.nist.javax.sip.header.extensions.SessionExpiresHeader createSessionExpiresHeader(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ToPackedGrayFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.GLLogWrapper$PointerInfo: int getStride()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.From: java.lang.String getUserAtHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: int getMemoryClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.MoreSettingPopup$MoreSettingAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.Buffer: java.nio.Buffer mark()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getExclusiveQueuedThreads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.CompatibilityInfoHolder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$6: android.widget.GridLayout$Bounds getBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getVerticalFadingEdgeLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature: java.lang.Object getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.SystemProperties: long getLong(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.text.NumberFormat getPercentInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ActivityInfo: int getRealConfigChanged()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmSupportInfo: java.lang.String getDescriprition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.RDN: com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue[] getTypesAndValues()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getSuggestedMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideModel get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.TypedValue: float getFloat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableMap$SerializedForm: java.lang.Object readResolve()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: java.net.InetAddress getInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.utils.AlgNameMapper: java.lang.String getStandardName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.RandomAccessFile: long getFilePointer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: java.util.Map getAllPackageLaunchCounts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: java.lang.Object getResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice$MotionRange: float getFlat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getLastReceivedDownEdgeFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: java.lang.String getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: org.w3c.dom.Document getOwnerDocument()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ActivityStack: android.content.pm.ActivityInfo resolveActivity(android.content.Intent,java.lang.String,int,java.lang.String,android.os.ParcelFileDescriptor,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine$LogRec: java.lang.String getInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFieldsForLoading: double get(java.lang.String,double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeDecimalFormat: int getGroupingSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.security.Permission getPermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.To: java.lang.String getUserAtHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ResizeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: boolean getEnableExchangeLogging()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SimpleAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ObexHelper: byte[] updateHeaderSet(javax.obex.HeaderSet,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.PackageParser$Component: java.lang.String getComponentShortName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderProxy: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.DateSorter: java.lang.String getLabel(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.UserAgentHeader getDefaultUserAgentHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ArrayAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchManager: android.content.ComponentName getGlobalSearchActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: gov.nist.javax.sip.header.SIPHeader remove(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager$ListenerDelegate: android.os.storage.StorageEventListener getListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: java.lang.String getPackageForIntentSender(android.content.IIntentSender)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.StaticInnerHandlerWrapper: java.lang.Object getOuterInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Collection getSubjectAlternativeNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: long getLongExtra(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: int getLineNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extensions: java.util.Set getNonCriticalExtensions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.ContentInfo: java.lang.Object getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractClientConnAdapter: int getLocalPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: int getBlockSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: java.lang.String getETag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.AccountAndUser: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.util.Locale[] getAvailableLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.Recycler: int getMessageMinLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPDate: java.lang.String getMonth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Key: android.graphics.drawable.Drawable getIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: long getLong(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.WaitingThread: java.util.concurrent.locks.Condition getCondition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Folder: float getPivotYForIconAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.view.View getViewAtRelativeIndex(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CallbackProxy$UploadFileMessageData: java.lang.String getAcceptType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URISyntaxException: int getIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.res.Resources getResources()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: short[] getShortArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: float getMaxVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: android.view.SubMenu getSubMenu()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneUtils: android.app.Dialog displayMMIInitiate(android.content.Context,com.android.internal.telephony.MmiCode,android.os.Message,android.app.Dialog)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFields: byte get(java.lang.String,byte)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalGcInvocationCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RemoteControlClient: android.media.IRemoteControlClient getIRemoteControlClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getMessages()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider$Service: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Security$SecurityDoor: java.security.Provider$Service getService(java.security.Provider,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ListActivity: android.widget.ListAdapter getListAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.performance.ThroughputFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DeviceAdminInfo: java.util.ArrayList getUsedPolicies()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeSwitcher: android.view.inputmethod.InputMethodSubtype getNoLanguageSubtype()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.SubMenuBuilder: java.lang.String getActionViewStatesKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.swipeablelistview.SwipeableListView: android.view.View getChildAtPosition(android.view.MotionEvent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: boolean getIncludeThumbnailPad()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatConversionException: java.lang.Class getArgumentClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageViewFragment: long getMessageId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: float getLineSpacingMultiplier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageViewFragmentBase: com.android.email.Controller getController()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignerInfo: java.math.BigInteger getSerialNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity: android.preference.PreferenceActivity$Header onGetInitialHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Event: java.lang.String getEventId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: long getLong()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERNumericString: com.android.org.bouncycastle.asn1.DERNumericString getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: boolean isSpeechRecognitionActive()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: java.io.File getParentFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore$EventHub: android.os.Looper getWebKitLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.String getSignatureAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.CookieSpecBase: java.lang.String getDefaultDomain(org.apache.http.cookie.CookieOrigin)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.StyleSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.util.ArrayList getParamValues()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.CallerInfoCache: com.android.phone.CallerInfoCache$CacheEntry getCacheEntry(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Handler: android.os.Looper getLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.StringCharacterIterator: int getIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.RouteTracker: org.apache.http.conn.routing.RouteInfo$LayerType getLayerType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebStorageClassic: android.webkit.WebStorageClassic getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MainKeyboardView: int getLanguageOnSpacebarAnimAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsHorizontalScrollView: int getHorizontalFadingEdgeLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.ActionBarPolicy: int getEmbeddedMenuWidthLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ActivityBase: long getStorageSpace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.DialogPreference: java.lang.CharSequence getDialogTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: int getLengthOfGeographicalAreaCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.CameraUtility: float getFieldOfView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountSettingsUtils: android.content.ContentValues getAccountContentValues(com.android.emailcommon.provider.Account)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.KeyboardLayout: java.lang.String getDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.http.CertificateChainValidator: android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection,javax.net.ssl.SSLSocket,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.ColorStateList: int getColorForState(int[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: int getDocumentAnchorY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: int getDocumentAnchorX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.VersionInfo: java.lang.String getClassloader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView: android.widget.Adapter getAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FastBitmapDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherViewPropertyAnimator: long getStartDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionListenerProxy: android.net.sip.ISipSessionListener getListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.PeriodicSync$1: android.content.PeriodicSync createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.SecurityPolicy: android.content.ComponentName getAdminComponent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.PointerTracker$BogusMoveEventDetector: int getDistanceFromDownEvent(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getEnabledAccessibilityServiceList(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.HardwareRenderer$GlRenderer: long getFrameCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.Ringtone: int getStreamType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputContext$Stub$Proxy: void getCursorCapsMode(int,int,com.android.internal.view.IInputContextCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: android.graphics.Rect getCellLayoutMetrics(com.android.launcher2.Launcher,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getPreferredDomesticCarrierCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Formatter$FormatToken: char getDateSuffix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Alarms: java.util.Calendar calculateAlarm(int,int,com.android.deskclock.Alarm$DaysOfWeek)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: float getVerticalViewAngle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.TempFileProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: float getFloat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.OutputPort: android.filterfw.core.Filter getTargetFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getWindowTouchSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Loader: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DoubleBuffer: java.lang.Object array()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyDetector: com.android.inputmethod.keyboard.Keyboard getKeyboard()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Movie: com.googlecode.mp4parser.authoring.Track getTrackByTrackId(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl: float getXVelocity(android.view.VelocityTracker,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URISyntaxException: java.lang.String getReason()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperInfo: java.lang.String getSettingsActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ImplForWildcard: java.lang.reflect.Type[] getUpperBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: java.math.BigInteger getSerialNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.EnumSet: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.transport.CountingOutputStream: long getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoView: boolean getPlayerBuffering()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Date: int getDay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: short getShort(java.lang.String,short)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: java.lang.String getTimeString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramPacket: byte[] getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ClientOperation: int getMaxPacketSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: java.lang.String getSignatureAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.ContactsBinaryDictionary getContactsDictionary()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.SparseIntArray: int get(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.GenericInflater: java.lang.String getDefaultPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: int getRenderingMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralSubtrees$1: java.util.Collection getValues(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Controller: com.android.email.Controller getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString$AttributedIterator: int getIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: android.widget.ImageView$ScaleType getScaleType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getBottom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowAnimator: com.android.server.wm.ScreenRotationAnimation getScreenRotationAnimationLocked(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SharedPreferencesImpl: java.util.Set getStringSet(java.lang.String,java.util.Set)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Linear$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: int getSPIClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.CompatModePackages: int getPackageScreenCompatModeLocked(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.CdmaPhoneCallState: com.android.phone.CdmaPhoneCallState$PhoneCallState getCurrentCallState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice$MotionRange: float getMin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmRights: java.lang.String getSubscriptionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.ContentCache$CachedCursor: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: android.widget.CursorTreeAdapter$MyCursorHelper getChildrenCursorHelper(int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: int getUnreadMessageCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Key: android.graphics.drawable.Drawable getPreviewIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewWidget: int[] getPreviewSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: java.lang.CharSequence getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag get(byte)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getThumbPixHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: java.lang.String getTouchIconUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Layer: int getLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getSIPVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Object: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker: int getMinValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Mesh$Builder: int getCurrentIndexSetIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: java.util.List getInterfaceAddresses()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: android.preference.Preference$OnPreferenceChangeListener getOnPreferenceChangeListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: java.lang.CharSequence getError()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.EditPhoneNumberPreference: java.lang.String getPhoneNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.GLFrame: float[] getFloats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getMaxExposureCompensation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.PlaybackQueueItem: java.lang.Object getCallerIdentity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getFirstHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Transition: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.preference.PreferenceScreen inflateFromResource(android.content.Context,int,android.preference.PreferenceScreen)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.EmailProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RetryAfter: java.lang.String getComment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.DisplayDevice: android.os.IBinder getDisplayTokenLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: int getNumberOfConnectedInputs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.effect.EffectContext: android.media.effect.EffectFactory getFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasastore.PicasaStoreFacade: java.lang.String getAlbumCoverKey(long,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ImplForWildcard: java.lang.reflect.Type[] getLowerBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragLayer$LayoutParams: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieItem: float getAnimationAngle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice$MotionRange: float getMax()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.PolicyConstraints$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager$StorageEvent: android.os.Message getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver: boolean getAbortBroadcast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.QuickSettings: com.android.systemui.statusbar.phone.PhoneStatusBar getService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: int getTagNo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getRealm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.FileURLConnection: java.security.Permission getPermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: int getCountX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: int getCountY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: java.lang.String getNewline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getCacheColorHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.Schema: int getEntity(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.DateFormat getTimeInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getMaximumFlingVelocity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Folder: float getPivotXForIconAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplayStatus: int getFeatureState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: byte get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getImageClipProperties()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: java.lang.String getCallers(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo infoFromShortcutIntent(android.content.Context,android.content.Intent,android.graphics.Bitmap)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RAck: long getCSequenceNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: android.media.videoeditor.WaveformData getWaveformData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.AccountSelectorAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Mac: byte[] doFinal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Mesh$TriangleMeshBuilder: android.renderscript.Mesh create(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.AbstractCookieSpec: org.apache.http.cookie.CookieAttributeHandler getAttribHandler(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilParElementImpl: short getFill()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IUserManager$Stub$Proxy: int getUserSerialNumber(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionBundle: int getProxyPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: long getDelayUntilTime(android.accounts.Account,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapSimpleString: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.mms.pdu.CharacterSets: java.lang.String getMimeName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Account getAccount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo getStorageInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieEffect: android.graphics.Rect getStartRect()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getEndColumn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.Gesture: android.graphics.RectF getBoundingBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.DefaultProxyAuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RequestLine: java.lang.String getVersionMajor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice$MotionRange: int getAxis()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.ProjectPickerAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getMethodParam()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: int getMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getTouchMajor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapConnection: java.util.List getCommandResponses()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getHomeButton()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraActivity: long getPictureDisplayedToJpegCallbackTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: int getScrollMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getAcceptLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getThirdArgument(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.InputStreamEntity: java.io.InputStream getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String[] listAllTransports()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.base.RetargetFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.ProgramFragmentFixedFunction$Builder: android.renderscript.ProgramFragmentFixedFunction create()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v13.app.FragmentPagerAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.GridLayoutAnimationController: float getRowDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getUserName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getY(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getX(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ReadOnlyHeapByteBuffer: byte[] protectedArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.GridLayoutAnimationController: int getDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Ordering: com.google.common.collect.Ordering reverse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.app.ActionBar getActionBar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: java.lang.Object getUserData(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUniversalString: com.android.org.bouncycastle.asn1.DERUniversalString getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.Semaphore: java.util.Collection getQueuedThreads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: java.lang.String getTouchIconUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout: int getMeasurementIncludingMargin(android.view.View,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.JarURLConnection: java.lang.String getEntryName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.IssuingDistributionPoint$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetManager: int createTheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getMenuButton()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TextToSpeech$Connection: android.os.IBinder getCallerIdentity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Context: java.lang.String getString(int,java.lang.Object[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SimpleFrame: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.lang.String getInstallerPackageName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: int getVirtualChildCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: java.util.ArrayList getPendingOperations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: float getBackgroundAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.os.Handler getHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Sine$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Sine$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Sine$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.Typeface getTypeface()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Choreographer: android.view.Choreographer getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.TypefaceSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$AuthorityInfo getAuthority(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeUtility: java.io.InputStream getInputStreamForContentTransferEncoding(java.io.InputStream,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractFullBox: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.shapes.Shape: float getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getSource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: float getRefreshRate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Alarm$DaysOfWeek: int getCoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractCollection: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.message.Request,javax.sip.header.ContentTypeHeader,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20RenderLayer: android.view.HardwareCanvas getCanvas()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getInAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.SortedMultiset createDescendingMultiset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.TreeMultiset$LiveEntry: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.LogEntries$AutoCorrectionCancelledEntry: java.lang.String[] getLogStrings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilParElementImpl$1: org.w3c.dom.smil.ElementTime getParentElementTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.util.Map getRequestProperties()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: int getEventType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat: float getX(android.view.MotionEvent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyMotionEvent: long getDownTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat: float getY(android.view.MotionEvent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: com.google.android.apps.lightcycle.util.Size getPhotoSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getPaddingBottom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter$MyCursorHelper: long getId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.EasResponse: org.apache.http.Header getHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.DefaultClientConnection: org.apache.http.HttpHost getTargetHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver$UEventInfo: java.lang.String getSwitchStatePath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.AnticipateOvershootInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.FolderProperties: android.graphics.drawable.Drawable getIcon(int,long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UiUtilities: java.lang.String getMessageCountForUi(android.content.Context,int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.IconListPreference: boolean getUseSingleIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.GLFrame: int getFboId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RingtoneManager: android.database.Cursor getCursor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SimpleFrame: float[] getFloats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: int getTitleRes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEntry: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IOnPrimaryClipChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.net.FileNameMap getFileNameMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: int getRepeatCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.IoBridge: int getSocketLocalPort(java.io.FileDescriptor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.sip.SipProfileDb: int getProfilesCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: android.graphics.Bitmap createWidgetBitmap(com.android.launcher2.ItemInfo,android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: java.lang.String getXmlEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Mesh: android.renderscript.Allocation getIndexSetAllocation(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.content.Intent getIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.Header createHeader(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: float getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: float getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicRequestLine: org.apache.http.ProtocolVersion getProtocolVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItemView: com.android.internal.view.menu.MenuItemImpl getItemData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry getAuthSchemes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Security: java.lang.String getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputBinding: int getPid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SimpleSessionDescription: java.lang.String[] getBandwidthTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Toast: android.view.View getView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getLineStart(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk$ReceiverDispatcher: android.content.BroadcastReceiver getIntentReceiver()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.LatinImeLogger$LogEntry: java.lang.String[] getLogStrings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.encoders.Hex: byte[] encode(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SerializedFrame: java.nio.ByteBuffer getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.SlideshowActivity$SmilPlayerController: int getCurrentPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.BitSet: byte[] toByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getDigestSHA()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$AsMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.CallNotifier: com.android.internal.telephony.Call$State getPreviousCdmaCallState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Alarm$DaysOfWeek: java.util.HashSet getSetDays()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: boolean getHorizontallyScrolling()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.CertBlacklister$BlacklistObserver: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PrefetchHelper: com.google.android.picasasync.PrefetchHelper get(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyKeyEvent: int getAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int[] getRepeatArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.Pop3Store$Pop3Folder: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationThreadNative: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.base.Predicates$ObjectPredicate: com.google.common.base.Predicate withNarrowedType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputContext$Stub$Proxy: void getTextAfterCursor(int,int,int,com.android.internal.view.IInputContextCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: boolean getDefaultAllowUserInteraction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameManager: android.filterfw.core.Frame duplicateFrame(android.filterfw.core.Frame)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.HttpUtils: byte[] httpConnection(android.content.Context,long,java.lang.String,byte[],int,boolean,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPictureSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.util.LinkedList getMessageAsEncodedStrings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.TimerSetupView: int getTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: int getSoTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: int getSoLinger()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity: java.util.List getHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: android.media.videoeditor.MediaArtistNativeHelper$EffectSettings getOverlaySettings(android.media.videoeditor.OverlayFrame)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.AlertDialogs: android.app.AlertDialog createEditDialog(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.content.DialogInterface$OnClickListener,java.lang.String,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener,int,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherApplication: com.android.launcher2.IconCache getIconCache()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.InCallScreen: com.android.phone.InCallControlState getUpdatedInCallControlState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ISyncAdapter$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getHopTarget(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: int getAspectRatio(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: int getLengthOfNationalDestinationCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.DynamicDrawableSpan: int getVerticalAlignment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorage: int getStorageId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getViaHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.ScaleXSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: java.lang.CharSequence getCurrentMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.NtpTrustedTime: long getCachedNtpTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.CameraUtility: java.lang.String getFocusMode(com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite getByName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: int getReadTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: boolean getTcpNoDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace$InverseZInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: int getParameter(int,short[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getMaxEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.BreakIterator: java.text.BreakIterator getCharacterInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.View$ListenerInfo getListenerInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute getRoute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RequestLine: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: java.util.Collection getOutputPorts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.EventObject: java.lang.Object getSource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: android.view.ScaleGestureDetector getScaleGestureDetector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByClass(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IPowerManager$Stub$Proxy: boolean isWakeLockLevelSupported(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout$SpannedEllipsizer: int getSpanEnd(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver: int getSendingUserId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.CropFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabHost: android.view.View getCurrentView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentFilter$AuthorityEntry: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeader: java.lang.String getHeaderName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUTCTime: java.util.Date getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Configuration: int getLayoutDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Thread: java.util.Map getAllStackTraces()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.Parser: java.io.InputStream getInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.ExportOptionsDialog: android.app.Dialog create(android.content.Context,com.android.videoeditor.ExportOptionsDialog$ExportOptionsListener,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.MosaicFrameProcessor: com.android.camera.MosaicFrameProcessor getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Overlay: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.RichInputConnection: java.lang.String getWordAtCursor(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageDataObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HeaderViewListAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicLong: long getAndDecrement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: long getStartOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.CSeq: long getSeqNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.DistributionPointName$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: char getZeroDigit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackBox: com.coremedia.iso.boxes.SampleTableBox getSampleTableBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: java.util.ArrayList getAuthorities()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPSchemaRegistryImpl$1: com.adobe.xmp.options.AliasOptions getAliasForm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: float[] getAnimationScales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Collator: int getDecomposition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: int getInt(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: java.util.List getProcessesInErrorState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: int getFileType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyMotionEvent: long getEventTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstMutationRule: com.google.common.collect.BstNodeFactory getNodeFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.PathPermission: java.lang.String getWritePermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: int getTargetRequestCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.util.ZoneInfo: int getOffset(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: int getPackageUid(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.NetscapeDraftSpec: org.apache.http.Header getVersionHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.BERApplicationSpecificParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: int[] getDeviceIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.PackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMessage: java.lang.String[] getHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$UnmodifiableList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas getCanvas()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: float getAttributeFloatValue(int,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.Time: int getWeekNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Formatter: java.lang.String getTail(java.util.logging.Handler)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChildCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.UserInfo: java.lang.String getUser()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: java.lang.String getSelection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IStopUserCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Character: byte getDirectionality(char)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.GlowPadView: int getTargetDescriptionsResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.AsyncTask: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModel: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.DuplicateNameValueList: java.util.Collection getNameValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.BinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONObject: java.lang.String getString(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.DatePicker: int getDayOfMonth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Inflater: int getTotalOut()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: int getEffectivePort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getKeyRepeatDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: int getEffectivePort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.TextPaint getPaint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaSyncEvent: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getThreadGcInvocationCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStoreSpi: java.security.KeyStore$Entry engineGetEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.EventLog$Event: int getProcessId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: boolean getDefaultEditable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: int getProductId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsHorizontalScrollView: android.view.View getChildContentView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.TempFileProvider: java.lang.String getScrapPath(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogManager: java.util.logging.LogManager getLogManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessagesInternal(java.lang.String[],com.android.emailcommon.mail.Folder$MessageRetrievalListener)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RawHeaders: java.lang.String getValue(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Type: int getEncodedLength(org.apache.harmony.security.asn1.BerOutputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.AnimatedRotateDrawable: android.graphics.drawable.Drawable getDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultiset$StandardElementSet: com.google.common.collect.Multiset multiset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.SuggestionSpanUtils: java.lang.CharSequence getTextWithAutoCorrectionIndicatorUnderline(android.content.Context,java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: long getUIAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: android.media.IRingtonePlayer getRingtonePlayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.app.NotificationCompat$Builder: android.app.Notification getNotification()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.KeyGenerator: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.MulticastSocket: boolean getLoopbackMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createDoubleFormat(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: java.lang.String getLegacyBackupPreference(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ZygoteConnection: java.io.FileDescriptor getFileDesciptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getNamespace(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getAllHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup$ChildListForAccessibility: android.view.View getChildAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.ResourceHelper: int getAccountColorIndex(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.SystemProperties: int getInt(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Element: android.renderscript.Element getSubElement(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getScrollBarStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxFragmentAdapter: long getId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Interpolator: int getValueCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneUtils: boolean getMute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult getPendingResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IHardwareService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.lang.String getAntibanding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.BigInteger: int getLowestSetBit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyPairGenerator: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.MediaItem getMediaItem(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable: int getHeight()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.BaseExpandableListAdapter: int getGroupType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedReaderThreads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.DateFormat getDateInstance(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: android.app.SearchableInfo getActivityMetaData(android.content.Context,android.content.pm.ActivityInfo,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor: android.widget.Editor$SelectionModifierCursorController getSelectionController()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppObbDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetFileDescriptor: long getDeclaredLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplay: java.lang.String getFriendlyDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.DeliveryReportAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.TransactionTerminatedEvent: javax.sip.ServerTransaction getServerTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Scroller: float getCurrVelocity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DateKeyListener: char[] getAcceptedChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.BassBoost: short getRoundedStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.Semaphore: int getQueueLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String getApplicationIdentifiers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.ArrowKeyMovementMethod: android.text.method.MovementMethod getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodWriteObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: android.widget.ExpandableListConnector$PositionMetadata getUnflattenedPos(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.CallID: java.lang.String getCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getFullName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.GLFrame: java.nio.ByteBuffer getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String,java.util.Map)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSeekBar: int getKeyProgressIncrement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getChoiceMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView$Marquee: float getScroll()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.framework.ComparisonFailure: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractBox: byte[] getUserType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DoubleArrayBuffer: java.nio.DoubleBuffer get(double[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.OtaUtils: com.android.phone.OtaUtils$CdmaOtaInCallScreenUiState$State getCdmaOtaInCallScreenUiState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: int getOffset(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.layout.HVGALayoutParameters: int getTextHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.BasicCookieStore: java.util.List getCookies()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPDate: java.lang.String getWkday()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.Plugin: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.OrientationEKF: double getHeadingDegrees()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideModel: com.android.mms.model.TextModel getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILParElement addPar(org.w3c.dom.smil.SMILDocument)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.wallpaper.grass.ScriptField_Vertex: android.renderscript.Element createElement(android.renderscript.RenderScript)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getUsername()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.GLSurfaceView: int getDebugFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputBinding: int getUid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Cling: java.lang.String getDrawIdentifier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: int getLauncherLargeIconDensity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.AddressImpl: int getAddressType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.content.pm.ResolveInfo getDefaultActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$FilteredMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: java.lang.String getIPAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString$AttributedIterator: int getBeginIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment: int getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItemClassic: android.graphics.Bitmap getFavicon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPServerTransaction: java.lang.String getViaHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.VersionInfo: java.lang.String getModule()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getValue(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: long getZoomControlsTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureLibrary: java.util.ArrayList recognize(android.gesture.Gesture)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.Finished: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.PKIXParameters: java.util.Date getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.EasSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getInsertAfterMediaItem(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getLineForVertical(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getSchemeSpecificPart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.SimpleTimeZone: int getDSTSavings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableString: int getSpanStart(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: float getChildrenOutlineAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledPackages(int,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.lang.String getSubType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getYPrecision()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: java.util.LinkedList getMessageAsEncodedStrings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl: android.view.ViewParent getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.MovieFragmentBox: long getOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuPresenter: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: java.lang.String getExpiresString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbAccessory: java.lang.String getDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Utils: java.lang.String getStackTrace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.VMRuntime: long getExternalBytesAllocated()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Element: android.renderscript.Element$DataType getDataType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.ListPreference: java.lang.CharSequence getEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.SingleRecipientArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getDigestMD5()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignerInfo: byte[] getEncodedAuthenticatedAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: android.filterfw.core.FrameFormat getInputFormat(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1OctetString: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.channels.DatagramChannel getChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.MediaItemUtils: long getMinimumVideoItemDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.HprofData getHprofData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: int getTextRunCursor(char[],int,int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.lang.String getPackageCodePath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageProcessor: int getMaximumMessageSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ISyncStatusObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.CollationElementIteratorICU: int getOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.parser.Parser: java.lang.String sipVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: android.preference.PreferenceManager getPreferenceManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageListItem: com.android.mms.ui.MessageItem getMessageItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.CharacterPickerDialog$OptionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.FocusFinder: int getWeightedDistanceFor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Hashtable: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: android.app.Application getApplication()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.WebViewClient getWebViewClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.InputSource: java.lang.String getSystemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: int getOrder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputEvent: int getSequenceNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.WebViewCore getWebViewCore()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker: float getBottomFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: android.net.Uri getUri(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: java.lang.String getPackageForToken(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Thumbnail: android.graphics.Bitmap createVideoThumbnailBitmap(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getAccessibilityCursorPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getNextNonce()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String getCurrentKeyboardLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.widget.EmailWidget: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantLock: int getQueueLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.IsoFile: com.coremedia.iso.boxes.MovieBox getMovieBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Adler32: long getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.NamespaceSupport$Context: java.util.Enumeration getDeclaredPrefixes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Message: android.os.Handler getTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.GlobalActions$ToggleAction: android.view.View create(android.content.Context,android.view.View,android.view.ViewGroup,android.view.LayoutInflater)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getKeyedStringOrEmpty(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SingletonImmutableList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.CameraUtility: com.google.android.apps.lightcycle.util.Size getPreviewSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: int getConnectTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.AssetManager getAssets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: int getWrongPasswordStringId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> android.permission.READ_SMS android.permission.RECEIVE_SMS - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageListItemCoordinates: int getWidth(android.view.View,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: byte getByte(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEntry: int getHash()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.PointCloud$WaveManager: float getRadius()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.Installer: int getSizeInfo(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,android.content.pm.PackageStats)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: android.view.CompatibilityInfoHolder getCompatibilityInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getExtensionValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: byte[] protectedArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SortedMultisets$ElementSet: java.util.SortedSet tailSet(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.IllegalCharsetNameException: java.lang.String getCharsetName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormat: int getMultiplier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: long getHeaderFieldDate(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TtsEngines: android.speech.tts.TextToSpeech$EngineInfo getEngineInfo(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabHost$ViewIdContentStrategy: android.view.View getContentView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: java.lang.String getQName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getDisposition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Character: java.lang.String getName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AcceptEncoding: float getQValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentType: java.lang.String getContentSubType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackExtendsBox: long getDefaultSampleDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmConstraintInfo: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.Options: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: android.graphics.drawable.Drawable getDividerDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.Shader getShader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeaderElement: org.apache.http.NameValuePair getParameterByName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: java.lang.String getDataDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager: int getSensors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogManager: java.util.logging.Logger getOrCreate(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.FileSynthesisCallback: int getMaxBufferSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.Utils: java.lang.String getQuotedString(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IObbActionListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getMinHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: android.view.InputDevice getDevice(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: android.view.View getContentView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(android.content.res.Resources,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getSummary(android.content.res.Resources)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERIA5String: com.android.org.bouncycastle.asn1.DERIA5String getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: android.filterfw.core.OutputPort getOutputPort(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle$MissingBundle: java.util.Enumeration getKeys()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress getPeerInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstanceForThread(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getHeaderAsFormattedString(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView$HitTestResult: java.lang.String getExtra()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.AudioTrackView: android.media.videoeditor.WaveformData getWaveformData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: int getConnectTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread$ApplicationThread: android.os.Debug$MemoryInfo dumpMemInfo(java.io.FileDescriptor,boolean,boolean,java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideshowModel: com.android.mms.model.LayoutModel getLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Storage: long getAvailableSpace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String[] getISOLanguages()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.GlowPadView: int getSuggestedMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getPhoneNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.DialogPreference: android.view.View onCreateDialogView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: double getDouble(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.Serializer: byte[] toByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getInt(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.Object getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.HashMap: java.util.Iterator newEntryIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$Axis: int[] getLocations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ImfUtils: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getNavDump()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyboardSwitcher: com.android.inputmethod.keyboard.KeyboardSwitcher getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ToHeader getToHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String getCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView$CharWrapper: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPMetaImpl: java.lang.String getPropertyString(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: android.database.Cursor swapCursor(android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$Factory: android.webkit.GeolocationPermissions getGeolocationPermissions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: java.lang.String getLoggerName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1StringType$7: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.VersionInfo: java.lang.String getTimestamp()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Date: int getHours()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.ParsePosition: int getIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.IconListPreference: int[] getImageIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.GLUtils: int getType(android.graphics.Bitmap)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: int getMinimumAndroidPua()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModel: int getMediaSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DeviceAdminReceiver: android.content.ComponentName getWho(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.widget.ActivityChooserModel getDataModel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: int getCellHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.AccountAuthenticatorCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(android.accounts.AuthenticatorDescription,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.HashMap$HashMapEntry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Enum: java.lang.Enum[] getSharedConstants(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getThumbPixWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getMaxTextLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.VelocityTrackerCompat: float getYVelocity(android.view.VelocityTracker,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmRightsManager: android.drm.mobile1.DrmRights installRights(java.io.InputStream,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputQueue: android.view.InputChannel getInputChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.ExchangeService$AccountList: com.android.emailcommon.provider.Account getById(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.LocaleData: java.lang.String getDateFormat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.Certificate: java.lang.Object writeReplace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Sensor: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPDateTimeImpl: java.lang.String getISO8601String()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,long,android.database.Cursor,long,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IThumbnailReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TableRow: int[] getColumnsWidths(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.LayoutModel: int getLayoutType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice$MotionRange: float getFuzz()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetManager: java.lang.String[] getResourceStringArray(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.CommonTimeConfig: long getMasterElectionGroupId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1BitString: org.apache.harmony.security.asn1.ASN1BitString getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.AlertException: javax.net.ssl.SSLException getReason()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.InputPointers: int[] getYCoordinates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ShapeDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],int,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver getAddressResolver()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ListActivity: long getSelectedItemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.KeyframeSet: java.lang.Object getValue(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.FocusOverlayManager: int getFocusState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: int[] getMinSpanForWidget(android.content.Context,android.appwidget.AppWidgetProviderInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPDate: int getYear()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.DialogTerminatedEvent: javax.sip.Dialog getDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FloatToByteBufferAdapter: java.nio.FloatBuffer get(float[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.GLFrame: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.DropBoxManager$Entry: java.lang.String getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.wallpaper.RenderScriptScene: android.renderscript.ScriptC getScript()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountManager$Stub: android.accounts.IAccountManager asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.Schema: java.lang.String getPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Time: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Parcel: byte[] marshall()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UiUtilities: android.view.View getViewOrNull(android.app.Activity,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.BrightnessFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getEmulatedStorageSource(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.SocketHttpClientConnection: java.net.Socket getSocket()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupMenu: android.view.Menu getMenu()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20RecordingCanvas: android.view.GLES20RecordingCanvas getNextPoolable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.Time: java.lang.String getCurrentTimezone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DigitsKeyListener: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getHour()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore: java.lang.String getVersion(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: int[] getNextIndexToLoad()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Mesh$Builder: android.renderscript.Type newType(android.renderscript.Element,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IUiModeManager$Stub$Proxy: int getCurrentModeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.ScrollingMovementMethod: android.text.method.MovementMethod getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: float getShadowRadius()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: int getListSelection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Frame: android.filterfw.core.Frame retain()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List getPreferredPackages(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMap: java.util.Set keySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelephoneNumber: java.lang.String getPostDial()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Toast: float getHorizontalMargin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.header.EventHeader getEventHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupStreamClass(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: android.graphics.Rect getGivenContentInsetsLw()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner: int getBaseline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.Host: java.lang.String getHostname()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.ParseOptions: boolean getFixControlChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.PointerTracker: int getDistance(int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: int getLocalPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: java.util.List getMotionRanges()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SettingsValues: android.view.inputmethod.InputMethodSubtype[] getAdditionalSubtypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider$Transport: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.opengl.Sprite: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ResolveInfo: int getIconResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$SipSessionImpl: android.net.sip.SipProfile getLocalProfile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.MessagingNotification$NotificationInfo: long getTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getStyleAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.PackageSettingBase: java.lang.String getInstallerPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.FileTransforms: java.io.InputStream getDecryptedStream(java.io.InputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getEndColumn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$BlendSrcFunc getBlendSrcFunc()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getTitle(android.content.res.Resources)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: int getPhotoId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.TaskStackBuilder: android.content.Intent[] getIntents()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DialogPopup: android.graphics.drawable.Drawable getBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.DialogPreference: java.lang.CharSequence getPositiveButtonText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getLineBounds(int,android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CRLNumber: java.math.BigInteger getNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Indentation: java.lang.String getIndentation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AllPermission: java.lang.String getActions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsgColumn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.MimeVersionHeader createMimeVersionHeader(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getRightPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getCipherSuite()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackRunBox$Entry: com.coremedia.iso.boxes.fragment.SampleFlags getSampleFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.RuleBasedCollatorICU: int getDecomposition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizePagedView: int getPageForComponent(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Collator: java.text.Collator getInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Script$FieldBase: android.renderscript.Element getElement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.backup.IBackupTransport$Stub$Proxy: android.app.backup.RestoreSet[] getAvailableRestoreSets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SimpleFrame: java.nio.ByteBuffer getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.test.IsolatedContext: java.io.File getFilesDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CallbackProxy$ResultTransport: java.lang.Object getResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.CharSequence getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Canvas: android.graphics.Matrix getMatrix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.Package getPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.storage.ExternalStorageFormatter: android.os.storage.IMountService getMountService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.sax.Element: android.sax.Element getChild(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: android.content.ComponentName getComponentNameFromResolveInfo(android.content.pm.ResolveInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.LatinIME$BatchInputUpdater getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppWidgetResizeFrame: android.graphics.Rect getWidgetSizeRanges(com.android.launcher2.Launcher,int,int,android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeSwitcher: com.android.inputmethod.latin.SubtypeSwitcher getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getJpegThumbnailQuality()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IAlarmManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.ResponseHeaders: int getMaxAgeSeconds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.applications.ApplicationsProvider: android.content.pm.PackageManager getPackageManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Type: byte[] encode(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: float getScrollFriction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.test.IsolatedContext: java.lang.Object getSystemService(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultiset: int add(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractMap: java.util.Set keySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: android.app.LoaderManager getLoaderManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieTransition getEndTransition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ContainerEncryptionParams: javax.crypto.SecretKey getMacKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.WaitingThread: java.lang.Thread getThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyEvent: int getEventType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xmlpull.v1.XmlPullParserException: int getLineNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentTasksLoader: java.util.ArrayList getLoadedTasks()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: java.util.ArrayList getTouchables()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.PointCloud: float getScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: int getPeerPacketSourcePort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.security.Provider)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardIconsSet: int getIconId(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.BaseSurfaceHolder: int getRequestedFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: java.lang.CharSequence getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: int getPeerPacketSourcePort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.OverlayFrame: java.lang.String getBitmapImageFileName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: java.lang.String getClazzName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSet entrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.DateHeader createDateHeader(java.util.Calendar)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.res.AssetManager getAssets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.NtpTrustedTime: android.util.NtpTrustedTime getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: java.util.ListIterator getChargingCollectionFunctionAddresses()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ServerHello: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.HttpConnectionMetrics getMetrics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FileChannelImpl: long transferTo(long,long,java.nio.channels.WritableByteChannel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: long getUploadedTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.Dialog getReplacesDialog(gov.nist.javax.sip.header.extensions.ReplacesHeader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List getAllPermissionGroups(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity: android.preference.PreferenceScreen getPreferenceScreen()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: float getFloat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.makedict.FusionDictionary$CharGroup: com.android.inputmethod.latin.makedict.FusionDictionary$WeightedString getShortcut(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItemClassic: java.lang.String getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.EmergencyDialer: android.app.Dialog onCreateDialog(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: float getPreference()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SelectionModifierCursorController: int getMinTouchOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNode: int getQualifierLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.PolicyManager: android.view.Window makeNewWindow(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getEndLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHttpResponse: org.apache.http.StatusLine getStatusLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: int getInt(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSErrorHandler getErrorHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getPressure(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.net.VpnProfile: byte[] encode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: long getEventTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: android.graphics.Bitmap generateBitmap(android.content.Context,android.graphics.Bitmap,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.Time: int getJulianDay(long,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: int getContentAppWidgetId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: int getUserSerialNumber(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: android.media.videoeditor.Effect getEffect(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.ICU: java.lang.String[] getISOLanguages()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.base.CharMatcher: java.lang.String trimFrom(java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Matrix2f: float[] getArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: int getZoomLevel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IRemoteCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ClassNotFoundException: java.lang.Throwable getException()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ObjectAnimator: java.lang.Object getTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: boolean getInhibitGraphicsAcceleration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment$UserEnvironment: java.io.File getMediaStorageDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: java.util.List getSampleDependencies()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getType(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: java.lang.Object getParameterValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite[] getSupported()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.GenericMapMaker: com.google.common.collect.MapMaker$RemovalListener getRemovalListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.MessageDisplay: com.google.android.apps.lightcycle.opengl.Sprite access$200(com.google.android.apps.lightcycle.panorama.MessageDisplay,android.graphics.Bitmap,float,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.utils.ObjectIdentifier: int[] getOid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputChannel: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getTextWrapScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: android.media.IAudioService getAudioService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.logging.AndroidHandler: int getAndroidLevel(java.util.logging.Level)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey(java.net.InetAddress,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.view.View findViewByAccessibilityIdTraversal(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmRawContent: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout$LayoutParams: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: java.util.ListIterator getEventChargingFunctionAddresses()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.StyleSpan: int getStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.SAXParseException: int getColumnNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: long getEventTimeNano()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.FileTypeBox: long getMinorVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.ImageModel: boolean getMediaResizable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Utils: int getPressedColorId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: int getNumActiveViews()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Matrix4f: float[] getArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.SocketImpl: int getLocalPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragLayer: float getDescendantCoordRelativeToSelf(android.view.View,int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.NinePatch: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.MacSpi: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.BitwiseInputStream: byte[] readByteArray(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: android.view.View createShortcut(com.android.launcher2.ShortcutInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.PasswordAuthentication: char[] getPassword()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipEntry: long getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.BinaryDictionaryGetter: java.lang.String getTempFileName(java.lang.String,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizePagedView: android.view.View getPageAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.AbstractCookieSpec: org.apache.http.cookie.CookieAttributeHandler findAttribHandler(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: long getBoundaryBeginTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.HTMLScanner: int getColumnNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.geometry.Quad: float getBoundingHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x501.Name getSubject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getRequestParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: long[] getLongArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: double getDouble()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapStore: com.android.email.mail.Transport cloneTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: long getStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageVolume: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Encodable[] toArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.PlainDatagramSocketImpl: java.lang.Object getOption(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraSettings: com.android.camera.PreferenceGroup getPreferenceGroup(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PanelView: float getExpandedFraction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.ParcelUuid: java.util.UUID getUuid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Matrix3f: float[] getArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: java.nio.channels.SocketChannel getChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView$10: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gms.common.internal.GmsClient: android.os.IInterface getService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.SensorReader: com.google.android.apps.lightcycle.math.Vector3 getFilteredAcceleration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncQueue: java.util.Collection getOperations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.EllipticCurve: java.security.spec.ECField getField()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.SocketImpl: java.io.FileDescriptor getFD$()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$SipSessionImpl: android.net.sip.SipProfile getPeerProfile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List getInstalledPackages(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeader: java.lang.String getHeaderValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: java.util.List getRecentTasksForUser(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getVideoClipProperties()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.RandomAccessFile: java.io.FileDescriptor getFD()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.StrictMode: int getThreadPolicyMask()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.RSeqHeader createRSeqHeader(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.ShortcutInfo: android.graphics.Bitmap getIcon(com.android.launcher2.IconCache)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.LayoutModel: com.android.mms.model.RegionModel getImageRegion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: android.database.Cursor getGroup(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt16Format(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore$CallbackHandlerProtection: javax.security.auth.callback.CallbackHandler getCallbackHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getChildOffset(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPath: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ActivityBase: com.android.gallery3d.app.GalleryActionBar getGalleryActionBar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: float getImplicitDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.ViewConfigurationCompat: int getScaledPagingTouchSlop(android.view.ViewConfiguration)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: java.lang.String getString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.protocol.BasicHttpContext: java.lang.Object getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.DownloadInfo: java.util.Collection getHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: int[] getObjectHandles(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.annotation.Annotation[] getAnnotations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.ContentImpl: java.lang.Object getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: long getHistoricalEventTimeNano(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getScaledOffsetX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getScaledOffsetY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,android.text.style.MetricAffectingSpan[],int,android.graphics.Paint$FontMetricsInt)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getQueryActionMsg()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$TabImpl: android.view.View getCustomView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Transition: java.util.List isEffectandOverlayOverlapping(android.media.videoeditor.MediaItem,android.media.videoeditor.MediaArtistNativeHelper$ClipSettings,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.Authority: java.lang.String getUser()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ApplicationInfo: android.content.pm.ApplicationInfo getApplicationInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getPrefixes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Switch: int getSwitchPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.drawable.TextDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.PathPermission: java.lang.String getReadPermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: int getRequestedOrientation(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipProviderImpl: javax.sip.ServerTransaction getNewServerTransaction(javax.sip.message.Request)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: java.lang.String getPrivateImeOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.CompatUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: java.lang.String getLocalClassName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.InterruptibleInOutAnimator: android.animation.ValueAnimator getAnimator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyPairGenerator: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationInfo: gov.nist.core.NameValue getAuthInfo(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: byte[] getByteArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: com.android.internal.os.PkgUsageStats[] getAllPackageUsageStats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: android.media.videoeditor.Transition getEndTransition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: long getParameterAsLong(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getAliasMaxChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.JarURLConnection: java.util.jar.Attributes getMainAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory getCategoryAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getLabelFor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Mesh: int getVertexAllocationCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormat: java.lang.String getPositivePrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.Account: java.lang.String getProtocol(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Dialog: android.view.View getCurrentFocus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.CacheManager: com.android.mms.util.BlobCache getCache(android.content.Context,java.lang.String,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipData: int getItemCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.ManagedEGLContext: javax.microedition.khronos.egl.EGLContext getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.Parser: org.xml.sax.ErrorHandler getErrorHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragView: float getInitialScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getEdgeSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputContext$Stub$Proxy: void getTextBeforeCursor(int,int,int,com.android.internal.view.IInputContextCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ScrollView: float getTopFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.parsers.DocumentBuilder: javax.xml.validation.Schema getSchema()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryContentProviders(java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebStorage$Origin: long getUsage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.textui.ResultPrinter: java.io.PrintStream getWriter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.AbstractAccountAuthenticator: android.os.IBinder getIBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.VerificationParams: android.content.pm.ManifestDigest getManifestDigest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: java.lang.String getBluetoothHeadsetPriorityKey(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker$InputTextFilter: char[] getAcceptedChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.MappingFileProvider: java.lang.String getFileName(int,java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.net.Proxy,java.util.List)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.JarVerifier: java.security.cert.Certificate[] getCertificates(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.lang.String getDefaultType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: java.lang.String getBranch()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ScrollingTabContainerView$TabView: android.app.ActionBar$Tab getTab()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.LoggingSessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.BlockGuard$BlockGuardPolicyException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getNumColumnInRow(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.view.CompatibilityInfoHolder getCompatibilityInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.util.Locale[] getAvailableLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getLoadsImagesAutomatically()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: float getFloat(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.AccountAuthenticatorCache: android.accounts.AuthenticatorDescription parseServiceAttributes(android.content.res.Resources,java.lang.String,android.util.AttributeSet)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Object[] toArray(java.lang.Object[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.GlowPadView: int getScaledSuggestedMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.LoadPreviewBitmapTask: android.graphics.Bitmap doInBackground(java.lang.Void[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.PipeImpl$PipeSinkChannel: java.io.FileDescriptor getFD()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.DefaultRetryScheme: int getRetryLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.PasswordAuthentication: byte[] getPassword()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: int getegid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.Singleton: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Oid: org.apache.harmony.security.asn1.ASN1Oid getInstanceForString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AlgorithmIdentifier$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getTrackId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: java.lang.String getFragment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: int[] getSpanForWidget(android.content.Context,android.content.ComponentName,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetManager: boolean getThemeValue(int,int,android.util.TypedValue,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.PointerIcon: float getHotSpotY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.PointerIcon: float getHotSpotX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: java.lang.String getRef()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.TimeKeyListener: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraScreenNail: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.wallpaper.grass.ScriptField_Blade: android.renderscript.Element createElement(android.renderscript.RenderScript)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.CookieHandler: java.net.CookieHandler getDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: int getMaximumSizeDimension()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.References: java.lang.String getCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.NativeDaemonConnectorException: java.lang.String getCmd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.WaveView: int getSuggestedMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: boolean performLongPress(android.view.View,int,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$SelectionHandleAlpha: int getTargetAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: int getParameterAsInt(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.Account: android.net.Uri save(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SerializedFrame: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureLibrary: java.util.Set getGestureEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: java.lang.String getReadPermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IOnPrimaryClipChangedListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: libcore.net.http.RawHeaders getNetworkRequestHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.widget.WidgetManager: long loadAccountIdPref(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: java.util.List getRunningServices(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler getUserTokenHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ImageStitcher: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getRadius()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHttpResponse: org.apache.http.ProtocolVersion getProtocolVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.LegacySensorManager: int getSensors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: android.view.View getChildAt(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.core.NameValueList getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.content.ComponentName getComponentName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.CdmaPhoneCallState: com.android.phone.CdmaPhoneCallState$PhoneCallState getPreviousCallState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: java.lang.Runnable getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.StringTokenizer: java.lang.String getSDPFieldName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasastore.PicasaStoreFacade: java.lang.String getAuthority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.LegacySensorManager: int getRotation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getUseFixedViewport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: byte[] update(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.PhotoCollection: float[] getCameraToWorld(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureStore: android.gesture.Learner getLearner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription createTaskDescription(int,int,android.content.Intent,android.content.ComponentName,java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ByteArrayOutputStream: byte[] toByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MainKeyboardView: int getPointerCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.AccessibilityIterators$WordTextSegmentIterator: android.view.AccessibilityIterators$WordTextSegmentIterator getInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.LongSparseArray: java.lang.Object get(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.EditText: boolean getDefaultEditable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router getRouter(gov.nist.javax.sip.message.SIPRequest)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager: float[] getOrientation(float[],float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaProperties: int[] getSupportedVideoBitrates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.LightCycleApp: com.google.android.apps.lightcycle.camera.CameraUtility getCameraUtility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormat: int getGroupingSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractIterator: java.lang.Object next()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.ImageModel: android.graphics.Bitmap getBitmap(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getPositionDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore: android.webkit.DeviceOrientationService getDeviceOrientationService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.view.Window getWindow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.util.ZoneInfo: int getDSTSavings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getAudioBitrate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: java.lang.String getXmlVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: android.os.UserHandle getUserForSerialNumber(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader,java.lang.Object,javax.sip.header.ContentTypeHeader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getNthPreviousWord(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getEllipsisCount(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SystemSensorManager$ListenerDelegate: java.lang.Object getListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Set getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.ImageViewTouchBase: float getMaxZoom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieItem: float getSweep()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.ProgramVertexFixedFunction$Builder: android.renderscript.Type getConstantInputType(android.renderscript.RenderScript)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager$FastBitmapDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SearchView: java.lang.CharSequence getQuery()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodSubtype: int getNameResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.TimeZones: java.lang.String[][] getZoneStrings(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDLSubStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.Collection getWaitingThreads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$Alignment: android.widget.GridLayout$Bounds getBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner: android.graphics.drawable.Drawable getPopupBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Certificate: byte[] getSignatureValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Toast: int getGravity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.PKIXParameters: java.util.List getCertPathCheckers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ClassNotFoundException: java.lang.Throwable getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Context: int getThemeResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: int getMinimumLogicalFontSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.Manifest: java.util.jar.Manifest$Chunk getChunk(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: float getScrollProgress(int,android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.app.PendingIntent getBroadcastAsUser(android.content.Context,int,android.content.Intent,int,android.os.UserHandle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleToChunkBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$WrappedList: java.util.List getListDelegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.Metadata: double getDouble(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.WifiDisplayController: android.hardware.display.WifiDisplay access$2200(android.net.wifi.p2p.WifiP2pDevice)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListPosition: long getPackedPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: gov.nist.core.NameValueList getQheaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.internal.GestureStrokeWithPreviewPoints getGestureStrokeWithPreviewPoints()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager: java.io.File getCacheFileBaseDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.String getResourcePackageName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.OverlayType: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getSuggestedMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.UUID: long getLeastSignificantBits()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.AudioModel: java.util.Map getExtras()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.X509DefaultEntryConverter: com.android.org.bouncycastle.asn1.ASN1Primitive getConvertedValue(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getMinLines()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoViewProxy: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.KeyStore: byte[] get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView$RecycleBin: android.view.View getScrapView(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: int getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionSettings: java.lang.String getMmscUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: int getParameter(int[],int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.FileLock: long size()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyDetector: int getKeyHysteresisDistanceSquared(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CallbackProxy: android.webkit.WebBackForwardListClient getWebBackForwardListClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CallbackProxy: android.webkit.WebChromeClient getWebChromeClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socks4Message: int getCommandOrResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.ExpiresHeader createExpiresHeader(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.IntToByteBufferAdapter: int get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.WindowManager$LayoutParams getSearchLayoutParams(android.view.ViewGroup$LayoutParams)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFields$ObjectSlot: java.io.ObjectStreamField getField()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: long getAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: long[] getLapTimes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView$Marquee: float getGhostOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.test.mock.MockContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeArgument()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.RotateDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilPlayer$TimelineEntry: org.w3c.dom.smil.ElementTime getElement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Extensions getExtensions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeySpecParser: int getIntValue(java.lang.String[],java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: int getAudioSamplingFrequency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.TreeMultiset$Reference: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Deflater: long getBytesWritten()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityOptions: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: android.content.IContentProvider getIContentProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.cookie.CookieSpecRegistry: org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieAudioTrack getAudioTrack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEditTextView: android.text.style.ImageSpan getMoreChip()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getRawPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.IntBuffer: java.lang.Object array()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: float getLineSpacingExtra()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.io.File getCacheDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.InfoAccessSyntax$1: java.util.Collection getValues(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.preference.PreferenceScreen inflateFromIntent(android.content.Intent,android.preference.PreferenceScreen)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ScrollBarDrawable: boolean getAlwaysDrawVerticalTrack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: int getModifiers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieEffect: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gles_jni.EGLContextImpl: javax.microedition.khronos.opengles.GL getGL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.IInputManager$Stub$Proxy: android.view.InputDevice getInputDevice(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEntry: int getHash()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.view.View getCurrentFocus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.security.Principal getPeerPrincipal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context,android.database.Cursor,int,int,java.util.HashMap)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: byte[] getHardwareAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstMutationResult: com.google.common.collect.BstNode getOriginalRoot()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.QueryController: java.lang.String getCurrentPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: boolean[] getSubjectUniqueID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageListAdapter: android.database.Cursor getCursorForItem(com.android.mms.ui.MessageItem)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ToRGBAFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getImagePixDepth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: android.graphics.drawable.Drawable getIconDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledScrollBarSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float getSpacingMultiplier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getScheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Type: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.StackTraceElement: java.lang.String getFileName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.DTMFTwelveKeyDialer$DTMFKeyListener: char[] getAcceptedChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.AuthenticatedAttributes: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: android.widget.ListAdapter getAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.IconUtilities: android.graphics.drawable.Drawable createIconDrawable(android.graphics.drawable.Drawable)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getReceivedPointerDownY(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getReceivedPointerDownX(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: android.view.View getVirtualChildAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest$MessageDigestImpl: byte[] engineDigest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.CommonTimeConfig: java.net.InetSocketAddress getMasterElectionEndpoint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: java.lang.String getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Number: byte byteValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.GestureStrokeWithPreviewPoints: int getGestureStrokeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.OverlaysAdapter: android.graphics.Bitmap loadImage(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModel: boolean getMediaResizable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter$DirectoryFilter: int getLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.backup.LocalTransport: android.app.backup.RestoreSet[] getAvailableRestoreSets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Permission: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ScrollView: int getMaxScrollAmount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.KeyAgreement: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSpinner: int getChildHeight(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerBase: com.android.email.activity.MessageListFragment getMessageListFragment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MovieHeaderBox: float getVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.QName: java.lang.String getPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getMinExposureCompensation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$MakeCallCommand: java.lang.String getSessionDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.AbstractHttpClientConnection: boolean isResponseAvailable(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DigitsKeyListener: char[] getAcceptedChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpRequestBase: org.apache.http.ProtocolVersion getProtocolVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.EasResponse: int getStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Subject: java.lang.String getSubject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: java.lang.CharSequence getHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatCodePointException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: int getSoftInputMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Sets$PowerSet$1: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getLoadWithOverviewMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: android.database.Cursor getCursor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getMinMessageCountPerThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: android.view.ActionProvider getActionProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DialogFragment: int getTheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeader: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipData$Item: android.content.Intent getIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: int getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getBeginLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.GLFrame: int[] getInts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.HashMap: java.util.Iterator newKeyIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.MemInfoReader: long getFreeSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserModel: int getHistoryMaxSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: int getSupportedTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.YuvImage: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Annotation: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: long[] getLastCpuSpeedTimes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getAudioFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: float getMinVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.IsoFile: com.coremedia.iso.IsoFile getIsoFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONObject: long getLong(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header[] getAllHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Level: java.lang.String getResourceBundleName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BufferedHeader: org.apache.http.util.CharArrayBuffer getBuffer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationLoaders: java.lang.ClassLoader getClassLoader(java.lang.String,java.lang.String,java.lang.ClassLoader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.CharSequence getContentDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.RSSurfaceView: android.renderscript.RenderScriptGL getRenderScriptGL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: int getPersistedInt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ScaleDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.From: gov.nist.core.HostPort getHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: int getAudioChannels()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.RegularImmutableList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.IUsbManager$Stub$Proxy: android.hardware.usb.UsbAccessory getCurrentAccessory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractPooledConnAdapter: java.lang.Object getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteGroup: android.media.MediaRouter$RouteInfo getRouteAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.To: gov.nist.core.HostPort getHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: long getKeepAliveTime(java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.AlertProtocol: java.lang.String getAlertDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int getSessionCacheSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ISearchManager$Stub$Proxy: java.util.List getSearchablesInGlobalSearch()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.CountingTimerView$UnsignedTime: float calcTotalWidth(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.CollationKeyICU: byte[] toByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession(android.os.Looper)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.ORAddress$2: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetEncoder: float averageBytesPerChar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getImagePixWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.FileInputStream: java.io.FileDescriptor getFD()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: boolean getOOBInline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: android.animation.Animator getChangeStateAnimation(com.android.launcher2.Workspace$State,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ByteArrayBuilder: int getByteSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AuthorityKeyIdentifier$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItemClassic: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getModifierMetaStateMask()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiDevice: android.graphics.Point getDisplaySizeDp()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$ViewBinder getViewBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.WorldClockAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeSignature()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Storage: android.net.Uri addImage(android.content.ContentResolver,java.lang.String,long,android.location.Location,int,int,java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetAddress: byte[] getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPSchemaRegistryImpl$1: java.lang.String getPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getISO3Language()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.Authority: gov.nist.javax.sip.address.UserInfo getUserInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$SelectionHandleAlpha: int getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.SessionExpires: java.lang.String getRefresher()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientChip: com.android.ex.chips.RecipientEntry getEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.AttrImpl: boolean getSpecified()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultiset: java.util.Set elementSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getLeftPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.Manifest: java.util.Map getEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardHostView: long getUserActivityTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(android.widget.GridLayout$Alignment,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideModel: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.ServiceManager: android.os.IBinder getService(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IActivityController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Oid: org.apache.harmony.security.asn1.ASN1Oid getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.EnumMap$Entry: java.lang.Enum getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.Host: java.lang.String getIpAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.mail.PackedString: java.lang.String get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: android.graphics.Bitmap getBitmapFromAndroidPua(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthority(android.accounts.Account,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getFadeHeight(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.cookie.CookieSpecRegistry: java.util.List getSpecNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: java.lang.String getUserAgent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractList: java.util.ListIterator listIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager: java.lang.Long getMaxBytesOverMobile(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1InputStream: int getLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.KeyguardManager: android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.ProgressBar: com.android.videoeditor.widgets.ProgressBar getProgressBar(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: android.graphics.Bitmap getBitmapFromVendorSpecificSjis(char)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: gov.nist.core.HostPort getSentBy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.X509PublicKey: java.lang.String getFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IIntentReceiver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: char[] getCharArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: int getOrientation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.DirectoryString$1: java.lang.Object getObjectToEncode(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1SetParser parser()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.To: java.lang.String getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: boolean getGeneratePreview()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: byte[] toBytes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelURLImpl: gov.nist.core.NameValueList getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getLastReceivedUpPointerId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DatagramChannelImpl: java.io.FileDescriptor getFD()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: int getParameter(byte[],byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.testrunner.UiAutomatorTestCase: android.os.Bundle getParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAndroidDataDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ClientOperation: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.seekbar.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIds(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$PositionListener: int getPositionX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$PositionListener: int getPositionY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DefiniteLengthInputStream: int getRemaining()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.media.MediaProvider: int getDatabaseVersion(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header getLastHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(android.app.IWallpaperManagerCallback,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraSettings: int getMaxVideoDuration(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.RuleBasedCollatorICU: int getStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.ShaderProgram: android.filterfw.core.GLEnvironment getGLEnvironment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getLineVisibleEnd(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.PKIXParameters: java.lang.String getSigProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat: int getPointerId(android.view.MotionEvent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getAttributeName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMessage: java.util.Date getSentDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: int getGroupCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.InputPort: android.filterfw.core.OutputPort getSourcePort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.params.BasicHttpParams: java.lang.Object getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.method.WordIterator getWordIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoView: int getCurrentPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.lang.String[] getPackagesForUid(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription getFirstTask()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable[] getChildren()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getStandardFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorProfile: int getExportProfile(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: int getOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceGroupAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.content.PackageHelper: java.lang.String getSdFilesystem(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getPeerProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.BitmapRegionDecoder: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.DuplicateFormatFlagsException: java.lang.String getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorProfile: int getExportLevel(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: boolean getUserVisibleHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildAtPosition(android.view.MotionEvent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPSchemaRegistryImpl$1: java.lang.String getPropName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedWriterThreads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getOffsetToRightOf(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicNameValuePair: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.PagerAdapter: android.os.Parcelable saveState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.EventLog$Event: int getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.FieldPosition: int getEndIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageStatsObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.PackageVerificationState: com.android.server.pm.PackageManagerService$InstallArgs getInstallArgs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getFps()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: android.widget.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String[] processName(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getCNonce()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaBox: com.coremedia.iso.boxes.MediaInformationBox getMediaInformationBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.provider.ExchangeDirectoryProvider: android.database.Cursor buildGalResultCursor(java.lang.String[],com.android.exchange.provider.GalResult)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame retainFrame(android.filterfw.core.Frame)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.ExtendedKeyUsage: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl: float getYVelocity(android.view.VelocityTracker,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.PackageParser$Component: android.content.ComponentName getComponentName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SharedPreferencesImpl: int getInt(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.transport.DiscourseLogger: java.lang.String[] getLines()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: int getIntExtra(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.KeyAgreement: byte[] generateSecret()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: java.lang.String getTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MoveMessageToDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.stack.MessageChannel getResponseChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.PlainSocketImpl: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IUpdateLock$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: int getScaledHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: float getTextRunAdvances(java.lang.CharSequence,int,int,int,int,int,float[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: java.lang.String getAccountDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.backup.IBackupTransport$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.Recycler: com.android.mms.util.Recycler$MmsRecycler getMmsRecycler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Handler: java.util.logging.Level getLevel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.SocketPermission: java.lang.String getActions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AllowList: java.util.ListIterator getMethods()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.KeyValueMap: java.lang.String getString(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,long,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIds(com.android.server.AppWidgetServiceImpl$Provider)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.statusbar.StatusBarIconList: int getViewIndex(int)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.egl.EGL getEGL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ExtensionHeaderImpl: java.lang.String getHeaderValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Folder$OpenMode getMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: java.lang.String getIdAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getIntegrityProtected()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindow$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ContainerEncryptionParams: byte[] getMacTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: char getChar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: com.android.phone.PhoneGlobals getInstanceIfPrimary()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.CallInfo: java.lang.String getPurpose()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateFormat: java.text.DateFormat getMediumDateFormat(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: float getFocalLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.DropBox: libcore.io.DropBox$Reporter getReporter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.TimerSetupView: int getLayoutId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.SubjectPublicKeyInfo: org.apache.harmony.security.x509.AlgorithmIdentifier getAlgorithmIdentifier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getLineForVertical(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFields: long get(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.AddressImpl: java.lang.String getUserAtHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.UnsafeByteSequence: byte[] toByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DialogPopup: int getHorizontalOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: float getDurationScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Sensor: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPDateTimeImpl: int getMinute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TtsEngines: android.content.Intent getSettingsIntent(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getAuthType(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneUtils: java.lang.CharSequence getProviderLabel(android.content.Context,android.content.Intent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.GlobalActions$MyAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieManagerClassic: java.lang.String getCookie(android.net.WebAddress)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.Settings: java.util.ArrayList getListOfIncompleteInstallPackagesLPr()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: long getTimelineDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: long getConstructor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: float getPreviousSpan()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: java.lang.Object getMultiParameterValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: long getLastUsedAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaBox: com.coremedia.iso.boxes.HandlerBox getHandlerBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceScript: com.android.commands.monkey.MonkeyEvent getNextEvent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.VibratorUtils: com.android.inputmethod.latin.VibratorUtils getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONArray: org.json.JSONObject getJSONObject(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.DataEntryUrlBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.regex.PatternSyntaxException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.RequestWrapper: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Deflater: int getTotalOut()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.wallpaper.galaxy.ScriptField_Particle: android.renderscript.Element createElement(android.renderscript.RenderScript)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URISyntaxException: java.lang.String getInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: int getRenderingMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneUtils: java.lang.String getCompactNameFromCallerInfo(com.android.internal.telephony.CallerInfo,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Canvas: int getMaximumBitmapHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUTCTime: com.android.org.bouncycastle.asn1.ASN1UTCTime getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.TextureView: android.graphics.Bitmap getBitmap(android.graphics.Bitmap)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getVoiceLanguageId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout$ViewCluster: android.graphics.Rect getBoundingRect()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.os.Parcelable onSaveInstanceState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Protocol: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.NameValueList: gov.nist.core.NameValue get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.OtherName$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getExtendedPaddingTop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPDate: int getDeltaSeconds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.database.SortCursor: java.lang.String[] getColumnNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getFadeHeight(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorage: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Transition: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.mms.pdu.EncodedStringValue: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormat: java.lang.String getPositiveSuffix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getDataOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IWallpaperManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledOverscrollDistance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: int getDepth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.database.SortCursor: long getLong(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: int getThemeResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: android.content.ComponentName getSearchActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountShutdownObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BufferedHeader: org.apache.http.HeaderElement[] getElements()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IRotationWatcher$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.BackStackRecord: int getTransitionStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: byte get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getScheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.animation.Animation getAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AccessibilityIterators$LineTextSegmentIterator: android.widget.AccessibilityIterators$LineTextSegmentIterator getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.FileUtils: java.lang.String getAudioTrackFilename(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: int getDefaultFixedFontSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RawHeaders: int getHttpMinorVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPDateTimeImpl: int getDay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup: com.android.server.sip.SipSessionGroup$SipSessionImpl access$400(com.android.server.sip.SipSessionGroup,javax.sip.RequestEvent,android.net.sip.ISipSessionListener,javax.sip.ServerTransaction,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getStringOrEmpty(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.Ticker: java.util.ArrayList access$200(com.android.systemui.statusbar.phone.Ticker)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: int getViaPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: int getTitleMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ListPreference: java.lang.String getKey()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeader: org.apache.http.HeaderElement[] getElements()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.JarURLConnectionImpl: java.util.jar.JarFile getJarFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.CSeq: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Canvas: int getMaximumBitmapWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplayStatus: int getScanState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl: int getHostVisibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackExtendsBox: com.coremedia.iso.boxes.fragment.SampleFlags getDefaultSampleFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getVideoType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.policy.DateView: int getSuggestedMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: int getMediaItemRenderingMode(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: boolean isMusicActive()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Reason: int getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getEllipsisStart(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ScrollBarDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getUseWebViewBackgroundForOverscrollBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ShortcutPickerFragment$MailboxPickerLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: int getScaledWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: android.graphics.Bitmap[] getThumbnailList(int,int,long,long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: com.android.launcher2.CellLayout$CellInfo getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.INotificationManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Any: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Linear$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceGroup: int getPreferenceCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraScreenNail: int getUncroppedRenderHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.BlockingAudioTrack: long getAudioLengthMs(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentLanguageHeader getContentLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$MapMultimap$AsMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.UiModeManager: int getNightMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbAccessory: java.lang.String getManufacturer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpURLConnection: java.security.Permission getPermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.WaveformData: int getFramesCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.AnimationSet: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup,android.widget.RemoteViews$OnClickHandler)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: android.view.Display getPresentationDisplay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.DistributionPointName$1: java.lang.Object getObjectToEncode(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.FocusOverlayManager: java.lang.String getFocusMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.LocatorImpl: int getLineNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: java.lang.CharSequence getTextForAccessibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeaderElement: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.KeyboardLayout: java.lang.String getCollection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: int getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowSession$Stub$Proxy: void getDisplayFrame(android.view.IWindow,android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Switch: android.graphics.drawable.Drawable getTrackDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpHead: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IWallpaperManager$Stub$Proxy: android.app.WallpaperInfo getWallpaperInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.HostPort: java.net.InetAddress getInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyMotionEvent: boolean getIntermediateNote()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: gov.nist.core.NameValueList getViaParms()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver: int getResultCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.SocketImpl: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getDownloadCacheDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Dialog: android.app.Activity getOwnerActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$CustomListMultimap: java.util.Collection createCollection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int[] getSelectedAlarmsArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationInfo: int getNonceCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.AccountSelectorAdapter: long getAccountId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getLastMediaItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper$Version: android.media.videoeditor.MediaArtistNativeHelper$Version getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getReasonPhrase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat getConvertedFormat(android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1OctetString: org.apache.harmony.security.asn1.ASN1OctetString getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getBaseline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.WordComposer: java.lang.CharSequence getAutoCorrectionOrNull()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedRegions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedMap: java.util.Comparator unsafeComparator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModel: com.android.mms.model.MediaModel$MediaAction getCurrentAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.io.File getObbDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.app.FragmentManager getFragmentManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.StringCharacterIterator: int getBeginIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarContextView: java.lang.CharSequence getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider$Transport: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: int getVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getTextColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getNamespace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver: boolean getDebugUnregister()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: long getPersistedLong(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.SecureRandom: byte[] getSeed(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.MulticastSocket: int getTimeToLive()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getLineTop(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk$ReceiverDispatcher: java.lang.RuntimeException getUnregisterLocation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbInterface: int getInterfaceClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeaderElement: org.apache.http.NameValuePair getParameter(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RequestLine getRequestLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.EnumMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: java.lang.CharSequence getSummary()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: java.lang.String getBluetoothA2dpSinkPriorityKey(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.database.SortCursor: int getInt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: long getEventTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.backup.IBackupTransport$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.AlertDialog: android.widget.ListView getListView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$WrappedList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.LayoutInflater: android.view.View createViewFromTag(android.view.View,java.lang.String,android.util.AttributeSet)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: float getFontSpacing()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.ExifInterface: long getDateTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEditTextView: com.android.ex.chips.RecipientEntry access$2300(com.android.ex.chips.RecipientEditTextView,com.android.ex.chips.RecipientEntry)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Level: java.lang.String getLocalizedName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getBlockNetworkImage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor: android.widget.Editor$InsertionPointCursorController getInsertionController()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getNextFocusRightId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1Encodable getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItemClassic: java.lang.Object getCustomData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.lang.Object getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Canvas: int getRenderer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.mdat.MediaDataBox: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.BroadcastQueue: com.android.server.am.BroadcastRecord getMatchingOrderedReceiver(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: android.graphics.Bitmap getThumbnail(int,int,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: javax.net.ssl.HandshakeCompletedEvent getHandshakeCompletedEvent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: byte[] getContents()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: long getDownTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.LightCycleView: int getTotalPhotos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: int getViaPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.content.Intent getSelector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.SecureRandom: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.crypto.internal.NullCipherSpi: byte[] engineDoFinal(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.BasicPermission: java.lang.String getActions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: android.webkit.PluginList getPluginList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ShortArrayBuffer: short get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: long getStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: int getUserHandle(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: java.lang.String getLocalName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.RealToString: java.lang.RealToString getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager$TaskThumbnails: android.graphics.Bitmap getSubThumbnail(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: int getAttributeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.FilePermission: java.lang.String getActions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getLeftFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.AccessibleObject: java.lang.String getClassSignatureAttribute(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.BaseExpandableListAdapter: int getChildTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getNamespacePrefix(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.JarEntry: java.security.cert.Certificate[] getCertificates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.util.Map getRequestProperties()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.EnumMap$Entry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.FocusOverlayManager: boolean getAeAwbLock()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.statusbar.StatusBarIconList: java.lang.String getSlot(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: java.lang.String getClassAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.RichInputConnection: int getCodePointBeforeCursor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.ChoiceFormat: java.lang.Object[] getFormats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.AddressImpl: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicLong: long get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.res.Resources getResources()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TimePicker$SavedState: int getMinute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Build: java.lang.String getRadioVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.IUsageStats$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetSocketAddress: java.lang.String getHostString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getValue(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.BERTaggedObjectParser: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectParser(int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine$LogRecords: com.android.internal.util.StateMachine$LogRec get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObject: java.lang.String getIndentation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.JarFile: java.util.jar.Manifest getManifest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: int getBaseline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getZoomOverviewScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.CompatibilityInfoHolder: android.content.res.CompatibilityInfo get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DatePickerDialog: android.widget.DatePicker getDatePicker()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItem: java.lang.String getUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityEvent: int getRecordCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: java.util.List getCompositionTimeEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout: int getOrientation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: java.net.InetAddress[] getaddrinfo(java.lang.String,libcore.io.StructAddrinfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.os.IBinder getWindowToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: long getGroupId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: int getActivePhoneType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter: int getCategoryCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Enum: java.lang.Class getDeclaringClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RelativeLayout$LayoutParams: int[] getRules(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.PackedObjectVector: java.lang.Object getValue(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Thread: int getPriority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CallbackProxy: android.webkit.WebViewClient getWebViewClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getRawTextAlignment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.VelocityTracker$Estimator: float getXCoeff(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.message.Request,javax.sip.header.ContentTypeHeader,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.RDN[] getRDNs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.CRC32: long getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.NativeDaemonConnectorException: int getCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateUtils: java.lang.String getStandaloneMonthString(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.DomainList: java.lang.String get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.FixedRotationFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.System: java.lang.String getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getContentWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.BassBoost: android.media.audiofx.BassBoost$Settings getProperties()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DoubleToByteBufferAdapter: double get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: int getWallpaperDesiredMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMap: java.lang.Object get(java.lang.Object)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getChildWidth(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizePagedView: android.os.Bundle getDefaultOptionsForWidget(com.android.launcher2.Launcher,com.android.launcher2.PendingAddWidgetInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.MetricAffectingSpan$Passthrough: android.text.style.CharacterStyle getUnderlying()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.QueryController: android.view.accessibility.AccessibilityNodeInfo getRootNode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.FromHeader getFrom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: int getHash()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.GLFrameTimer: android.filterfw.core.StopWatchMap get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ActivityBase: android.content.Intent getResultData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.graphics.Movie getMovie(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.Object getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityOptions: int getAnimationType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Field[] getFields()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String getApplicationIdentifiers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.net.URL getURL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetHostView: android.view.View getDefaultView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.DisplayAdapter: android.os.Handler getHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout$LayoutParams: int getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: java.lang.String getAppDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Inet6Address: java.net.NetworkInterface getScopedInterface()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout$LayoutParams: int getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneUtils: java.lang.String getInitialNumber(android.content.Intent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.ChooseAccountTypeActivity$AccountArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MovieHeaderBox: long getNextTrackId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.TrackMetaData: double getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getDeclaredPrefixes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,int,float[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: float distanceInfluenceForSnapDuration(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PMediaAuthorization: java.lang.String getToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HeaderViewListAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.IntArrayBuffer: java.nio.IntBuffer get(int[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: java.lang.String getInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.SAXException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getPackagesForUid(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.mms.pdu.PduPersister: java.lang.String convertUriToPath(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IThumbnailRetriever$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView$ScrollInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: android.webkit.WebSettings$ZoomDensity getDefaultZoom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DialogFragment: boolean getShowsDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.ClientParamsStack: java.lang.Object getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.ICU: java.util.Locale[] getAvailableLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor: android.text.method.WordIterator getWordIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: int getFrontActivityScreenCompatMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.AbstractCookieSpec: java.util.Collection getAttribHandlers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.Switch: int getCompoundPaddingRight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: com.android.internal.telephony.IccCardConstants$State getSimState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey(gov.nist.core.HostPort,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.InputPointers: int[] getPointerIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.TextAppearanceSpan: int getTextStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapSimpleString: java.io.InputStream getAsStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.util.ResourceBundle getResourceBundle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: java.util.List getSampleDependencies()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ResolverActivity$ResolveListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$Static: android.view.Display[] getAllPresentationDisplays()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Key: int getDrawX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.PasswordAuthentication: byte[] getUserName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.NioUtils: int getDirectBufferAddress(java.nio.Buffer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SipSession: java.lang.String getLocalIp()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperInfo: android.content.ComponentName getComponent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.LayoutInflater: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable: int getResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.RealSystemFacade: java.lang.Long getMaxBytesOverMobile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewCellLayout: com.android.launcher2.PagedViewCellLayoutChildren getChildrenLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: int getModifiers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getLeadingDigitsPattern(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.MessageListContext: com.android.emailcommon.service.SearchParams getSearchParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getFadeTop(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.ParseOptions: int getValidOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.WorkingMessage: com.android.mms.model.SlideshowModel getSlideshow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsApp: com.android.mms.util.PduLoaderManager getPduLoaderManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapStore: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableString: int getSpanEnd(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: int getPhoneState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: com.android.launcher2.CellLayout getCurrentDropLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.VideoEditorActivity: com.android.videoeditor.widgets.AudioTrackLinearLayout getAudioTrackLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.MissingFormatArgumentException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ClientOperation: long getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Path: android.graphics.Path$FillType getFillType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getSampleDescriptionIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFieldsForLoading: java.lang.Object get(java.lang.String,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.view.WindowManager getWindowManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DEROctetStringParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.Class getReturnType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.CameraApiProxyAndroidImpl$CameraProxyAndroidImpl: android.hardware.Camera$Parameters getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getLeftPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityOptions: int getCustomExitResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getBeginColumn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.UriImage: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.SmileyParser: com.android.mms.util.SmileyParser getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: int getMediaItemFileType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ArrayListMultimap: java.util.Collection createCollection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.BackgroundColorSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IRestoreObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.net.SocketFactory: javax.net.SocketFactory getDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannedString: java.lang.Object[] getSpans(int,int,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeader: java.lang.String encode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.lang.String[] getEras()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getAssociatedUpperPageBound(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IPowerManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.GraphRunner: android.filterfw.core.FilterContext getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.address.Address getRemoteTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getHorizontalScrollbarHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpPropertyGroup: android.mtp.MtpPropertyList getPropertyList(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: long getTimelineDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getBottomFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getListPaddingTop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.Certificate: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DefaultFileNameMap: java.lang.String getContentTypeFor(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerOnePane: long getUIAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Hashtable$HashtableEntry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteGroup getGroup()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getCurrentHintTextColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getReadHoldCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IRestoreSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.validation.ValidatorHandler: java.lang.Object getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getCursiveFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getRotation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: byte[] getByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.sip.SipSharedPreferences: java.lang.String getPrimaryAccount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int getPositionForSection(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieItem: float getStartAngle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getTextAlignment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementTimeImpl: int getEndConstraints()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getCannonicalName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getRepeatCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView$CharWrapper: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.HardwareLayer getHardwareLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: libcore.io.StructTimeval getsockoptTimeval(java.io.FileDescriptor,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.RecipientAdapter: int getDefaultPhotoResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSet$TransformedImmutableSet$1: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.TextKeyListener$NullKeyListener: android.text.method.TextKeyListener$NullKeyListener getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.CompletionInfo: long getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.Charset: java.lang.String name()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: org.w3c.dom.NodeList getChildNodes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getAliasMinChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Switch: int getThumbTextPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt32Format(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ServerOperation: int getHeaderLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.crypto.internal.NullCipherSpi: byte[] engineUpdate(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: int getBlockSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.CommonTimeConfig: int getPanicThreshold()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.String getImplementationVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: android.media.videoeditor.MediaArtistNativeHelper$EffectSettings getEffectSettings(android.media.videoeditor.EffectColor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector: com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector$DeviceOrientation getOrientation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.DialogPreference: android.app.Dialog getDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String readLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaInformationBox: com.coremedia.iso.boxes.AbstractMediaHeaderBox getMediaHeaderBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.InterruptibleInOutAnimator: java.lang.Object getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.ParseOptions: boolean getRequireXMPMeta()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getExternalStorageAppObbDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.RelativeSizeSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier[] getAttributeTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker: android.widget.NumberPicker$Formatter getTwoDigitFormatter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Toast: int getYOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.BackStackRecord: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getExposureCompensation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.performance.Throughput: int getTotalFrameCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getAssistIntent(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RAck: long getRSequenceNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: int getDescendantFocusability()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: int getCellCountX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: int getCellCountY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.RequestEvent: javax.sip.ServerTransaction getServerTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getP()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getG()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$ActionPopupWindow: int getVerticalLocalPosition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.lang.String getLocalPatternChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.SuggestionRangeSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BestMatchSpec: org.apache.http.Header getVersionHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.ContentResolver getContentResolver()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: float getLineMax(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: int getDropDownAnchor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: int getGroupId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.BreakIterator: java.text.BreakIterator getLineInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsHorizontalScrollView: int getVerticalFadingEdgeLength()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.InputPointers: int[] getXCoordinates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getPressedStateDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.Search$SearchParser: int getTotalResults()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.util.Locale getDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: int getMaxSupportedUsers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.PresetReverb: short getPreset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.UnmappableCharacterException: int getInputLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: java.lang.String getPersistedString(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledApplications(int,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: java.lang.String getIfModifiedSince()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageListItemCoordinates: int getHeight(android.view.View,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.BasicCredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getHeaderViewsCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentType: java.lang.String getMediaSubType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.SocketHttpClientConnection: int getRemotePort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate$1: java.util.Date getNotBefore()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Equalizer: short getBandLevel(short)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String encode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorProfile: android.media.videoeditor.VideoEditorProfile get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedSet: java.util.Comparator comparator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.BigInteger: java.math.BigInt getBigInt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: long[] getProcessPss(int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.Join: java.lang.String getFromTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: int getWaitQueueLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRegionElementImpl: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getPositionNotificationPeriod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gms.common.ConnectionResult: int getErrorCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: float getFloat(int,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstMutationRule: com.google.common.collect.BstBalancePolicy getBalancePolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientChip: long getContactId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: int getIndex(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Message[] getMessages(com.android.emailcommon.service.SearchParams,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: long getBoundaryBeginTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultiset: int count(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentLanguage: java.lang.String getLanguageTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.ExifInterface: long getGpsDateTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getHoverTapSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle$Control: java.util.ResourceBundle$Control getControl(java.util.List)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.util.logging.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getContentHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FolderIcon: com.android.launcher2.Folder getFolder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: long getFreeSpace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getCompressedSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralName$1: java.lang.Object getObjectToEncode(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Folder: java.util.ArrayList getItemsInReadingOrder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarView: android.view.View getCustomNavigationView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.ViewParent getParentForAccessibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getTopPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: int getMessageCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.LogicalDisplay: int getDisplayIdLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.DisplayContent: android.view.Display getDisplay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Object: com.android.org.bouncycastle.asn1.ASN1Primitive toASN1Object()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.routing.HttpRoute getPlannedRoute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine: java.lang.String getLogRecString(android.os.Message)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: java.lang.String getAccountName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.Element getElementById(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getKeyedStringOrEmpty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabHost$IntentContentStrategy: android.view.View getContentView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getAttributeResourceValue(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.TaskDescription: android.graphics.drawable.Drawable getIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientChip: java.lang.CharSequence getOriginalText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: java.lang.String getUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IThumbnailRetriever$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraSettings: java.lang.String getDefaultVideoQuality(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralName: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer: android.graphics.Insets getLayoutInsets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.DropBoxManager$Entry: long getTimeMillis()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.sip.SipProfileDb: java.util.List retrieveSipProfileList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.coremedia.iso.boxes.ContainerBox getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$InvokeListBox$MyArrayListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: java.lang.Object getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.StackTraceElement: int getLineNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.util.Locale[] getAvailableLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: java.security.cert.Certificate getCertificate(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONArray: org.json.JSONArray getJSONArray(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ClipDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList: java.util.Date getThisUpdate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OctetString: byte[] getOctets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getP()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getQ()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Hop getNextHop(gov.nist.javax.sip.message.SIPRequest)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getG()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.AttrImpl: org.w3c.dom.Node getNextSibling()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.widget.EmailWidget: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: java.util.List getSamples()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.StatusBarIconView: android.graphics.drawable.Drawable getIcon(android.content.Context,com.android.internal.statusbar.StatusBarIcon)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Effect: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.UserHistoryDictionary: java.util.ArrayList getWordsInner(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.FtpURLConnection: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAccount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver$PendingResult: int getResultCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.SocketChannelImpl$SocketAdapter: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.Stopwatches: java.lang.String getShareTitle(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorImpl: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Surface: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharArrayBuffer: java.nio.CharBuffer get(char[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserAtHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List queryContentProviders(java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.StatFs: int getBlockCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Keyframe$FloatKeyframe: float getFloatValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getDisplayZoomControls()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DialogFragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: long getIfModifiedSince()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: int getMinimumFontSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: android.content.SyncStorageEngine getSingleton()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: javax.net.ssl.SSLSocketFactory getSslSocketFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String getICIDGeneratedAt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasastore.SystemProperties: long getLong(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getDomain()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilMediaElementImpl$1: float getDur()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat$Field: int getCalendarField()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: android.content.pm.UserInfo createUser(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.clientauthutils.AuthenticationHelper getAuthenticationHelper(gov.nist.javax.sip.clientauthutils.AccountManager,javax.sip.header.HeaderFactory)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.layout.HVGALayoutParameters: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: java.lang.CharSequence getTelephonySpn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildAtRawPosition(float,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getImeOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: int getDefaultPhotoResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ComboPreferences: long getLong(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaPlayer: int getIntParameter(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: int getReceiveBufferSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageProcessor: int getDefaultTargetPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient getClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ShortToByteBufferAdapter: short get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractIterator: java.lang.Object endOfData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.QuoteSpan: int getLeadingMargin(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPDateTimeImpl: int getYear()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SelectionStartHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: long getLong(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.TextureView: android.graphics.Bitmap getBitmap(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraPreference: java.lang.String getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$TabImpl: int getPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.RegistrantList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IUserManager$Stub$Proxy: android.graphics.Bitmap getUserIcon(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout$LayoutParams: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.ProtocolVersion: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.Settings: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentityLPw()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.ResponseHeaders: java.lang.String getContentEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SipSession: int getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: byte[] encodeAsBytes(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: byte[] getNinePatchChunk()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorImpl: int getAspectRatio()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getTextAfterCursor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc mergeFrom(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.TypefaceSpan: java.lang.String getFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: int getGroupId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager: java.lang.String[] getVolumePaths()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.HashMap$HashMapEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: int getMaxChallengeTop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter: java.lang.Object getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Alarm: java.lang.String getLabelOrDefault(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: boolean isUserRunning(int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ResourceCursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.protocol.DefaultedHttpContext: org.apache.http.protocol.HttpContext getDefaults()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay[] getRememberedDisplays()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getDefaultSampleSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.util.ZoneInfoDB: java.util.TimeZone getSystemDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageStatsObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getListPaddingRight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.EditTextPreference: android.widget.EditText getEditText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getThumbFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.parser.Pipeline$Buffer: int getNextByte()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver$PendingResult: int getSendingUserId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getSampleDescriptionIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentType: java.lang.String getMediaType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getAudioType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.ExtensionValue: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.lang.String getNameForUid(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.lang.String getColorEffect()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountService$Stub$Proxy: int[] getStorageUsers(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.BatteryStats: long getRadioDataUptimeMs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getRequestProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: float getLeftFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getSystemSecureDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.content.pm.UserInfo getCurrentUser()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.MemoryFile: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.util.List getHierarchy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.InputStreamReader: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringBuilder: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageListAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager$CursorTranslator: long getLong(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getCharacterInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.LazyEncodedSequence: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIds(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragLayer: float getLocationInDragLayer(android.view.View,int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentSender: android.content.IIntentSender getTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: double[] getDoubleArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getType(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.ViewParent getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IUserSwitchObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Mac: int getMacLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SipSession: java.lang.String getCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbManager: android.hardware.usb.UsbAccessory[] getAccessoryList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.LinearInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.ExchangeService: com.android.emailcommon.provider.Account getAccountById(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyboardSwitcher: com.android.inputmethod.keyboard.Keyboard getKeyboard()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.LayoutModel: int getLayoutWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.net.InetAddress getPeerPacketSourceAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicStatusLine: int getStatusCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.ICU: java.util.Locale[] getAvailableDateFormatLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TreeMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ServerHello: byte[] getRandom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.FastScroller: android.widget.SectionIndexer getSectionIndexer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ScrollView: float getBottomFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AccessibilityIterators$PageTextSegmentIterator: android.widget.AccessibilityIterators$PageTextSegmentIterator getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getTopPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getToolType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.PointerIcon$1: android.view.PointerIcon createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: int getLastSystemTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebBackForwardListClassic: android.webkit.WebHistoryItem getCurrentItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.MultiWaveView: int getTargetPosition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.DrawRectFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getVerticalScrollbarWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ListPreference: java.lang.CharSequence[] getEntryValues()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackExtendsBox: long getDefaultSampleSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringBuilder: int getTextWidths(int,int,float[],android.graphics.Paint)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$InsertionHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: java.lang.String getSuggestPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$SetPendingIntentTemplate: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1InputStream: com.android.org.bouncycastle.asn1.ASN1Primitive buildObject(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.FastXmlSerializer: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: int getDesiredMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getTouchMajor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.StateListDrawable: int[] getStateSet(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Alarms: android.content.CursorLoader getAlarmsCursorLoader(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: long getStartDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.DuplicateNameValueList: java.lang.Object getValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleSizeBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicNameValuePair: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.BerInputStream: int getLength(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: byte get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerBase: com.android.email.activity.MessageViewFragment getMessageViewFragment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragLayer: float getDescendantRectRelativeToSelf(android.view.View,android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: android.graphics.Rect getContentFrameLw()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Thread: long getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: java.lang.Object[] getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: int getResponseInterceptorCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageProcessor createMessageProcessor(java.net.InetAddress,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEditTextView: com.android.ex.chips.RecipientChip getLastChip()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.PanoramaModule: int getPreviewBufSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraManager$CameraProxy: android.hardware.Camera getCamera()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleSizeBox: long[] getSampleSizes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.widget.EmailWidgetLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.sax.Children: android.sax.Element get(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IUpdateLock$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.preference.YesNoPreference: boolean getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.AddressCache: java.lang.Object get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.AsyncTask: android.os.AsyncTask$Status getStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodInfo: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieEffect: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: java.lang.String getNonConfigurationString(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDeviceInfo: java.lang.String getSerialNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: long getExpiration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SuggestionsPopupWindow: int getVerticalLocalPosition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSet$ArrayImmutableSet: com.google.common.collect.ImmutableList createAsList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: android.content.Context getProviderContext(android.content.Context,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float measurePara(android.text.TextPaint,java.lang.CharSequence,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.BrightnessFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TreeMap$BoundedMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.SubjectPublicKeyInfo: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UEventObserver: java.lang.String access$100()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.Pop3Store: com.android.emailcommon.mail.Folder getFolder(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: java.util.Set getServices()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Binder: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.params.AbstractHttpParams: long getLongParameter(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.JarURLConnectionImpl: java.util.jar.JarFile openJarFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: int getDefaultFontSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.LocaleData: java.lang.String getTimeFormat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getAlertTextOrEmpty()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.Map parseChallenges(org.apache.http.Header[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertificateFactory: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getPeerAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.CSeq: int getSequenceNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantLock: int getHoldCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceGroupAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractQueue: java.lang.Object remove()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ComboPreferences: android.content.SharedPreferences getGlobal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.QuickSettingsTileView: int getColumnSpan()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRegionElementImpl: java.lang.String getFit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: void getInvalidateRegion(int,int,int,int,android.graphics.RectF,android.view.animation.Transformation)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.Field: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyTrackballEvent: java.lang.String getTypeLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MemoryBlock: byte[] array()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: java.lang.String getChallenge()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView createView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractList: java.util.List subList(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputConnectionWrapper: int getCursorCapsMode(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocketImpl: int getLocalPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.FileURLConnection: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorage: long getMaxFileSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getLoadedClassCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPMetaImpl: java.lang.String getPacketHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SyncSampleBox: long[] getSampleNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore: android.webkit.WebViewInputDispatcher$WebKitCallbacks getInputDispatcherCallbacks()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: boolean getVoiceSearchLaunchWebSearch()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERT61String: byte[] getOctets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaProperties: int[] getSupportedVideoFileFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x501.Name getIssuer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader,javax.sip.header.ContentTypeHeader,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Effect: android.media.videoeditor.MediaItem getMediaItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: int[] getIntArray(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createFloatFormat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IInputFilterHost$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.AttrImpl: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ThreePaneLayout: int getPaneState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewCellLayout: int getCellCountX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewCellLayout: int getCellCountY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.LayoutTransition: long getStartDelay(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTheme getTheme(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridView: int getRequestedHorizontalSpacing()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: float resolveSize(int,float,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.NameMap: java.lang.Class getClassFromName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.CharSequence getPooledString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.FocusFinder: android.view.View findNextFocusFromRect(android.view.ViewGroup,android.graphics.Rect,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$Viewport: android.graphics.Rect getBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.AbstractThreadedSyncAdapter: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.OverlayLinearLayout: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RAck: int getRSeqNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.UriImage: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.HeaderGroup: org.apache.http.Header getLastHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewCellLayout: int getPageChildCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CertificateIssuer: javax.security.auth.x500.X500Principal getIssuer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.BackStackRecord: int getBreadCrumbTitleRes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getAxisValue(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.RuleBasedCollator: java.lang.String getRules()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$EntryFactory: com.google.common.collect.MapMakerInternalMap$EntryFactory getFactory(com.google.common.collect.MapMakerInternalMap$Strength,boolean,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.RegionModel: java.lang.String getBackgroundColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v13.app.FragmentPagerAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$NullEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyCharacterMap: char getMatch(int,char[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ActivityStack: android.graphics.Bitmap getTaskTopThumbnailLocked(com.android.server.am.TaskRecord)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxFragmentAdapter: long getAccountId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.BaseExpandableListAdapter: int getGroupTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatConversionException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CertificateVerify: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAuthTokenType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertStore: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerSearchTwoPane: long getUIAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TwoLineListItem: android.widget.TextView getText1()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TwoLineListItem: android.widget.TextView getText2()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: int getDuckingThreshhold()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.util.Currency getCurrency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: char[] getTextCharacters(int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MovieHeaderBox: long getModificationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableDictionary$NextHistoryWord: int getFrequency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureStore: java.util.Set getGestureEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.LayoutTransition: long getDuration(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getQOP()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getBeginColumn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Timestamp: java.util.Date getTimestamp()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementSequentialTimeContainerImpl: float getDur()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountAuthenticatorResponse$Stub: android.accounts.IAccountAuthenticatorResponse asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getPossibleNumberPattern()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getTranscriptMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] getDefaultProtocols()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalFreedCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.Utility: java.lang.Long getFirstRowLong(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.VariableSpeed: int getCurrentPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getVoicePromptTextId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: int getPointerId(android.view.MotionEvent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharSequenceAdapter: java.nio.CharBuffer get(char[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUTCTime: java.lang.String getAdjustedTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreferredPreviewSizeForVideo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideshowModel: int getCurrentMessageSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getLayoutDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.SystemProperties: java.lang.String get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERPrintableString: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.DefaultClientConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getUseDoubleTree()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager: java.lang.String getVolumeState(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ClipDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Interpolator: int getKeyFrameCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.EmailContent$Body: com.android.emailcommon.provider.EmailContent$Body restoreBodyWithMessageId(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.SocketHttpClientConnection: java.net.InetAddress getRemoteAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getDigestSHAwithoutLast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: int getLayoutDimension(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.TransitionType: com.android.videoeditor.TransitionType[] getTransitions(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: java.lang.reflect.Type parseReturnType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapUtility: java.lang.String[] getImapSequenceValues(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.NamespaceSupport: java.lang.String getPrefix(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Alarms: boolean get24HourMode(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: android.media.videoeditor.WaveformData getWaveformData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: int getMTU()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug$MemoryInfo: int getTotalPss()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: int getDesiredHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Allocation getAllocation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.GLFrame: android.filterfw.core.GLEnvironment getGLEnvironment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.KeyStore: int getLastError()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultiset: java.util.Set createElementSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.RepeatPreference: com.android.deskclock.Alarm$DaysOfWeek getDaysOfWeek()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List getTestCases()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry: long getExpirationTime()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getColumnNumber(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.io.pem.PemObject: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: android.content.IContentService getContentService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.DragState: int getDragLayerLw()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPTransactionStack getStack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: android.view.SubMenu getSubMenu()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbEndpoint: int getAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.AlertDialog: android.widget.Button getButton(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItemClassic: java.lang.String getTouchIconUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.core.UiDevice getUiDevice()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: float getFloatExtra(java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityOptions: int getCustomEnterResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getVideoBitrate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getUser()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.PolicyInformation: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieManagerClassic: java.lang.String getCookie(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.RoutedRequest: org.apache.http.impl.client.RequestWrapper getRequest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.server.search.Searchables: java.util.ArrayList getSearchablesList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CSeqHeader getCSeqHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.Contact getContactHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.SAXParseException: java.lang.String getPublicId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPathValidator: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMaximumLength(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Handler: java.util.logging.ErrorManager getErrorManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridView: int getColumnWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.AttributeTypeAndValue: org.apache.harmony.security.utils.ObjectIdentifier getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.EngineParameters: int getDecodeBufferMaxSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuPopupHelper: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Authenticator: java.lang.String getRequestingPrompt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AccessDescription$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ListMenuItemView: com.android.internal.view.menu.MenuItemImpl getItemData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.MultiWaveView: int getSuggestedMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getDirectReference()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.address.Hop getNextHop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getTotalPaddingStart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ServiceLoader: java.util.Iterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NamedNodeMapImpl: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.JarVerifier: java.util.Vector getSignerCertificates(java.lang.String,java.util.Map)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getMeasuredState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getDefaultOutAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilElementImpl: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.DeskClock$TabsAdapter$TabInfo: int getPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.SetupData: com.android.emailcommon.provider.Account getAccount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: long getItemIdAtPosition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Formatter$FormatToken: java.lang.String getStrFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatWidthException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$UnmodifiableMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getDefaultKeyCoordX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$DisplayProvider: android.view.DisplayInfo getDisplayInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternView$SavedState: int getDisplayMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.AddressImpl: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: java.lang.String getCallers(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplayStatus$1: android.hardware.display.WifiDisplayStatus createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: int getSpanEnd(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.ButtonDropTarget: android.graphics.Rect getIconRect(int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultiset: java.lang.String standardToString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.IUsbManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Authenticator: int getRequestingPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.MultiWaveView: int getDirectionDescriptionsResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.String[] getStringArray(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Keyframe: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.RequestWrapper: org.apache.http.RequestLine getRequestLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: org.apache.harmony.luni.lang.reflect.ListOfTypes parseOptTypeArguments()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: java.lang.String getMimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstModificationResult: com.google.common.collect.BstNode getOriginalTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableDictionary$NextHistoryWord: com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams getFcParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.OverlayFrame: int getResizedRGBSizeHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpURLConnection: java.lang.String getContentEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.app.ContextImpl getSystemContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker: com.google.common.base.Ticker getTicker()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.NetObject: java.lang.String debugDump()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackExtendsBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SelectionModifierCursorController: int getMaxTouchOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SerialPort: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1BitString$ASN1NamedBitList: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.EffectKenBurns: android.graphics.Rect getEndRect()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getBaseLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DoubleToByteBufferAdapter: java.nio.DoubleBuffer get(double[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getLocalName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getMaxSubjectLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.media.RingtonePickerActivity: android.database.Cursor access$200(com.android.providers.media.RingtonePickerActivity)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.ProgramVertexFixedFunction$Builder: android.renderscript.ProgramVertexFixedFunction create()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharToByteBufferAdapter: char get()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizePagedView: int getPageContentWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ISearchManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorageInfo: long getMaxCapacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$Factory: android.webkit.WebStorage getWebStorage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gms.panorama.internal.PanoramaClientImpl: java.lang.String getStartServiceAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.TrackMetaData: double getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ServerSocket: int getLocalPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.SyncStateContract$Helpers: byte[] get(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.InhibitAnyPolicy: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.AlarmAlert: int getLayoutResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: long getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelURLImpl: java.util.Iterator getParameterNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.Store: com.android.email.mail.Store getInstance(com.android.emailcommon.provider.Account,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: libcore.net.http.RawHeaders getHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipData: android.content.ClipData$Item getItemAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.Object getExtra(java.lang.String,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.RotateDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String getSubserviceIdentifiers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getSuggestThreshold()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieOverlay getOverlay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.accessibility.AccessibilityUtils: com.android.inputmethod.accessibility.AccessibilityUtils getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.style.URLSpan[] getUrls()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateUtils: java.lang.String getMonthString(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpConnection: java.net.Socket getSocket()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: int getAnimationStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: int getSampleHasRedundancy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledFadingEdgeLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: javax.sip.header.Header getLast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: long getStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledPagingTouchSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: int getComponentEnabledSetting(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.LayerDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: double getDouble(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.TimerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TableRow: int getNextLocationOffset(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbAccessory: java.lang.String getModel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: android.view.View obtainView(int,boolean[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: android.os.Bundle getArguments()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.CookieSpecBase: java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.SocketTagger: dalvik.system.SocketTagger get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: int getPlaybackType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: android.view.View getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Message: long getWhen()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PUserDatabase: java.lang.String getDatabaseName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IProcessObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.PointCloud: int getAlphaForPoint(com.android.deskclock.widget.multiwaveview.PointCloud$Point)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: java.util.List getAllOverlays()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getValues()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioSystem: int getNumStreamTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy getCamera()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Message: android.os.Bundle getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getScaleY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getScaleX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalTouchMajor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERInteger: com.android.org.bouncycastle.asn1.ASN1Integer getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.PresenterFactory: com.android.mms.ui.Presenter getPresenter(java.lang.String,android.content.Context,com.android.mms.ui.ViewInterface,com.android.mms.model.Model)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.PowerManager: int getDefaultScreenBrightnessSetting()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.ContentHandler getContentHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.base.Optional$Present: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PhotoCollectorJson: java.util.Map getEntryFieldMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: int getValidOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.String getResourceTypeName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.ExpandHelper$ViewScaler: float getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate$1: java.lang.String getSigAlgName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: java.lang.String getShortcutLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: int getDimensionPixelSize(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.Recycler$MmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> android.permission.READ_SMS - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizeTabHost: java.lang.String getTabTagForContentType(com.android.launcher2.AppsCustomizePagedView$ContentType)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SharedPreferencesImpl: java.lang.String getString(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getCollectionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerTwoPane: int getLayoutId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getThreadAllocCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Math: int getExponent(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: android.graphics.drawable.Drawable getIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.TimeImpl: double getOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: char getNumericShortcut()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageProcessor: int getDefaultTargetPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.content.IIntentSender getTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.ORAddress: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: java.lang.String getDescription(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: java.security.Permission getPermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.util.LinkedList getMessageAsEncodedStrings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncManager: long access$3000()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.RelativeSizeSpan: float getSizeChange()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ViewAnimator: int getBaseline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewDebug: long getViewInstanceCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.InputSource: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getWordsInner(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getNeedInitialFocus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: int finishPostLayoutPolicyLw()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getCity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.EmailAsyncTask$Tracker: int getTaskCountForTest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.content.ComponentName getCallingActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager: java.lang.String getMountedObbPath(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Util: int[] getRelativeLocation(android.view.View,android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: int getNonDecorDisplayWidth(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getBaseType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.AudioTrack getAudioTrack(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$Keys: java.util.Iterator entryIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.NinePatch: int getDensity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.PYXWriter: int getEntity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.TextureView: android.graphics.Matrix getTransform(android.graphics.Matrix)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.LightCycleRenderer: com.google.android.apps.lightcycle.panorama.RenderedGui getRenderedGui()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERSequenceParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBitString: byte[] getBytes(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Class getMyClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: int getParameter(int,int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getRemoteTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.runner.BaseTestRunner: junit.runner.TestSuiteLoader getLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getDepth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsApp: android.provider.SearchRecentSuggestions getRecentSuggestions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetServiceImpl: android.widget.RemoteViews getAppWidgetViews(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.SmoothPagedView: int getScrollMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.performance.Throughput: int getPeriodTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ProgressBar: int getProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MainKeyboardView: java.lang.String getFullDisplayName(android.view.inputmethod.InputMethodSubtype,android.content.res.Resources)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.applications.ApplicationsProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TimeToSampleBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: int getReserved()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebResourceResponse: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMessage: java.lang.String getMimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker: java.lang.String[] getDisplayedValues()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint getEndpoint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.HeadlessDisplayAdapter$HeadlessDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: int getSharedPreferencesMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Maps$AbstractFilteredMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramPacket: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputedInternal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AlgorithmParameters: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsVerticalScrollView: android.view.View getChildContentView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.YuvImage: int[] getStrides()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.String getImplementationVendor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getLineCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.CompatibilityInfoHolder: android.content.res.CompatibilityInfo getIfNeeded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ConnectionState: int getFragmentSize(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.io.File getObbDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getNextSibling()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IAudioRoutesObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractMap: java.util.Collection values()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.CountingTimerView$UnsignedTime: float getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: int getCacheMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: long getAppTimelineDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: android.graphics.Bitmap getBitmapFromVendorSpecificPua(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.IsoFile: long getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getCheckedItemCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getUploadUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: android.graphics.Bitmap getTaskTopThumbnail(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.auth.AuthScope: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.util.Date parse(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: int getDataActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.TempFileProvider: java.lang.String getScrapPath(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String encodeBody()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: int getBackgroundColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress getPeerInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyPair: java.security.PublicKey getPublic()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getInvScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.Join: gov.nist.javax.sip.header.CallIdentifier getCallIdentifer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.LimitedInputStream: int getRemaining()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: int getApplicationEnabledSetting(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.QuoteSpan: int getColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizePagedView: int getAssociatedUpperPageBound(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.DragEvent: boolean getResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ResourceCursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.EmailProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarView: android.widget.SpinnerAdapter getDropdownAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: int getReceiveBufferSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: com.android.email.Preferences getPreferences(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FolderIcon$FolderRingAnimator: float getInnerRingSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ScaleDrawable$ScaleState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentFilter: int getPriority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.OpenHelper: android.content.Intent buildViewIntent(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Long: java.lang.Long getLong(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Equalizer: short getNumberOfBands()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.SocketImpl: java.net.InetAddress getInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Deflater: int getTotalIn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.beans.IndexedPropertyChangeEvent: int getIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.State: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.CollationKey: int compareTo(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmRights: android.drm.mobile1.DrmConstraintInfo getConstraint(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObjectList: gov.nist.core.GenericObject next()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterPort: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getLeadingDigits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.StringCharacterIterator: int getEndIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config,int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Integer: org.apache.harmony.security.asn1.ASN1Integer getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipHelper: javax.sip.ServerTransaction getServerTransaction(javax.sip.RequestEvent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getWindowAttachCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.HostAuth: com.android.emailcommon.provider.HostAuth restoreHostAuthWithId(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: int getTextZoom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: int getIndexCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.TextAppearanceSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: int getThreshold()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: java.lang.CharSequence getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalPressure(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String getHostAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRegionElementImpl: int getTop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiDevice: int getDisplayWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsVerticalScrollView: android.view.View getChildAtPosition(android.view.MotionEvent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Dialog: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Object: byte[] getEncoded(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ServerSocket: int getSoTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: int getCreatorUid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: int getLastSoftIrqTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: int getDuckedTrackVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getHoverTapTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getLoadFields()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.ResourceHelper: int getAccountColor(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: int getNamespaceCount(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: java.lang.String getFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: int getTextRunCursor(java.lang.String,int,int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: int getInt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap: java.util.Collection createEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: java.util.List getInstalledProviders(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getMaxKeyCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.lang.String getPairValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: android.database.Cursor getCursor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapString: int getNumberOrZero()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.GradientDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getJumpTapTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: int getAudioBitrate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.ResponseEvent: javax.sip.Dialog getDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.preference.PreferenceFragment getFragment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewCellLayout: int getContentHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: java.lang.Object getAnimatedValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.QueryController: java.lang.String getLastTraversedText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getApplicationParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.CommonTimeConfig: java.lang.String getInterfaceBinding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildAtPosition(float,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getPageForView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.spellcheck.SpellCheckerProximityInfo: int[] getProximityForScript(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getAttributeNameResource(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentTasksLoader: android.graphics.Bitmap getDefaultIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: android.graphics.Rect getGivenVisibleInsetsLw()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.LocaleSpan: java.util.Locale getLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: int getColor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getSerifFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.BitSet: java.util.BitSet get(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: android.content.res.Resources getResources()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.Rasterizer getRasterizer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: java.lang.Object getSelectedItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RAck: long getCSeqNumberLong()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethod$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingSet: int standardHashCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.HashMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ThreePaneLayout: com.android.email.activity.MessageCommandButtonView getMessageCommandButtons()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.ImageViewTouchBase: android.graphics.Bitmap getImageBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioRecord: int getSampleRate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardIconsSet: java.lang.String getIconName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.DuplicateAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Certificate$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: android.app.FragmentManager getFragmentManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getHighlightColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.util.ZoneInfoDB: java.lang.String[] getAvailableIDs(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getZoom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.ResponseHeaders: int getSMaxAgeSeconds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: int getUserId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.shapes.Shape getShape()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.BreakIterator: java.text.BreakIterator getSentenceInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocketImpl: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: int getGeneratedClipHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getTouchSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.Ticker$Segment: java.lang.CharSequence getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.SocketHttpClientConnection: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountAuthenticator$Stub: android.accounts.IAccountAuthenticator asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager: int markRowDeleted(long[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.EncodedKeySpec: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxFragmentAdapter: long getAccountId(android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Parcel: byte[] createByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.RDN: com.android.org.bouncycastle.asn1.x500.RDN getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ScaleDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.RichInputConnection: com.android.inputmethod.latin.RichInputConnection$Range getWordRangeAtCursor(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.geometry.Rectangle: float getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteCategory: int getSupportedTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getDomain()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.ASN1Primitive getPublicKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment$UserEnvironment: java.io.File getExternalStoragePublicDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getPluginsPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.ASN1Boolean getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ActionMode: boolean getTitleOptionalHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IActivityController$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: android.webkit.WebSettings$PluginState getPluginState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.LayoutModel: java.lang.String getBackgroundColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String[] getPredefinedKeyboardLayoutSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getMasterStreamType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getSipDomain()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.EmptyImmutableMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRegionElementImpl: int getLeft()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getAspectRatio()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getJpegQuality()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SubscriptionState: int getExpires()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$Segment: java.lang.Object get(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.events.EventImpl: boolean getBubbles()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: java.util.List getUsers(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Inflater: long getBytesRead()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SortedMultisets$DescendingMultiset: com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.AlertController: int getIconAttributeResId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.SimpleDateFormat: java.text.DateFormatSymbols getDateFormatSymbols()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.StaticChunkOffsetBox: long[] getChunkOffsets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadsManager$UploadTask: com.google.android.picasasync.UploadTaskEntry getNextUpload()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.Search: int searchMessages(android.content.Context,long,com.android.emailcommon.service.SearchParams,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: double getDouble(java.lang.String,double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getUseWideViewPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieManagerClassic: java.lang.String getCookie(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation: android.os.Bundle getAllocCounts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CallIdHeader getCallIdHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: int getDropDownHorizontalOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getKeyCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: int getImageAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: int getVolumeControlStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.EventLog$Event: long getTimeNanos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherApplication: com.android.launcher2.LauncherModel getModel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IInputFilter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.String getPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: java.lang.String getSuggestIntentData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InterfaceAddress: java.net.InetAddress getBroadcast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: java.util.Collection getInputPorts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ComboPreferences: int getInt(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.Key getKeyOn(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilPlayer$TimelineEntry: int getAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.ResponseHeaders: java.util.Set getVaryFields()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.ParserCore: gov.nist.core.NameValue nameValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView: int getMaxScrollAmount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout$SpannedEllipsizer: int getSpanFlags(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] getSupportedProtocols()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.utility.SimpleIcsWriter: byte[] getBytes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetManager: java.lang.CharSequence[] getResourceTextArray(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.EncodingUtils: byte[] getBytes(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker: com.google.common.base.Equivalence getKeyEquivalence()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: int getDropDownWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.AnimationDrawable: int getDuration(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFields: java.lang.Object get(java.lang.String,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECFieldF2m: int getM()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.ImageUtils: android.graphics.Bitmap buildOverlayBitmap(android.content.Context,android.graphics.Bitmap,int,java.lang.String,java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: int getChildDrawingOrder(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.IvParameterSpec: byte[] getIV()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: float getFloat(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: byte getByte(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.opengl.Sphere: int getTextureId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormat: java.util.Currency getCurrency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPRequest createBYERequest(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableMap: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.DatePicker: long getMaxDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment: java.lang.Object getOrCompute(java.lang.Object,int,com.google.common.base.Function)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.content.Intent getParentActivityIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.NameConstraints$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float getSecondaryHorizontal(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CertificateList$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ClientHello: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IUiModeManager$Stub$Proxy: int getNightMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpanSet: int getNextTransition(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractContainerBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.DateFormat getDateInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: double getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getSequenceNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyFactory: java.security.spec.KeySpec getKeySpec(java.security.Key,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: java.lang.CharSequence getTransformedText(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: android.view.View getView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject$Download: java.lang.String getMimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: int getUidForSharedUser(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getActiveAdmins(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: int getDesiredWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String encode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.IWindowSession getWindowSession()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: android.graphics.Bitmap createDragBitmap(android.view.View,android.graphics.Canvas,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.String getSimpleName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.DERBitString getPublicKeyData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoicemail()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.UriImage: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageViewFragmentBase: long getAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Lists$OnePlusArrayList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Mac: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: int getFirstVisiblePosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.util.Map getHeaderFields()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleDescriptionBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixForParsing()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.RegionModel: java.lang.String getRegionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.ControlPanelEffect: com.android.musicfx.ControlPanelEffect$ControlMode getControlMode(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[] getDeclaredAnnotations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getMediaModel(android.content.Context,org.w3c.dom.smil.SMILMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduBody)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentFilter: java.lang.String getAction(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMagnification()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUTF8String: com.android.org.bouncycastle.asn1.DERUTF8String getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.params.AbstractHttpParams: int getIntParameter(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: java.lang.String getBaseURI()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeysCache: com.android.inputmethod.keyboard.Key get(com.android.inputmethod.keyboard.Key)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int[] getLayoutBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.OverlayRenderer: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.GridLayoutAnimationController: long getDelayForView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ImfUtils: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype(android.content.Context,android.view.inputmethod.InputMethodSubtype)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.SocketChannelImpl$SocketAdapter: java.nio.channels.SocketChannel getChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: java.lang.Object[] getSpans(int,int,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.SingleLineTransformationMethod: android.text.method.SingleLineTransformationMethod getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension: java.lang.String getExtnID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: java.lang.String getLibDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getCipherSuite()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.InputPointers getInputPointers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListView: long getSelectedPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.PointCloud: int getAlphaForPoint(com.android.internal.widget.multiwaveview.PointCloud$Point)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Reason: java.lang.String getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Choreographer: long getFrameDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.AnimatorSet: long getStartDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractCollection: java.lang.Object[] toArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Choreographer: long getFrameTimeNanos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.FindActionModeCallback: int getActionModeGlobalBottom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEntry: int getEntryType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.AddressImpl: gov.nist.core.HostPort getHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getKeyRepeatTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.MinSE: int getExpires()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.MimeVersion: int getMajorVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int getSectionForPosition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormat: java.math.RoundingMode getRoundingMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: java.lang.String getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Boolean: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.List getExtendedKeyUsage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getFirstChild()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: boolean getEnableStrictMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.PolicyManager: android.view.LayoutInflater makeNewLayoutInflater(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.NameValueList: java.lang.String getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine$1: java.io.InputStream getBody()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.header.Via getOutgoingViaHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.CompositionTimeToSample getCompositionTimeToSample()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodReadResolve()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsApp: android.telephony.TelephonyManager getTelephonyManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getTapTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: libcore.io.StructPasswd getpwnam(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IMediaScannerListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getTargetResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.HardwareRenderer$GlRenderer: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.ParserCursor: int getLowerBound()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.AnimatorSet: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringBuilder: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: int getWidthGap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.ProcessMap: java.util.HashMap getMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: int getThreadID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: int getNonceCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.FutureTask: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.transport.MailTransport: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.InsetDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaFile: java.lang.String getMimeTypeForFormatCode(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: android.view.View create(android.content.Context,android.view.View,android.view.ViewGroup,android.view.LayoutInflater)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: android.content.SharedPreferences$Editor getEditor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.AlarmAlertFullScreen: int getLayoutResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Certificate: org.apache.harmony.security.x509.TBSCertificate getTbsCertificate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getLegacyExternalStorageDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.util.Set getCategories()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpGet: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamField: char getTypeCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.encoders.Base64: byte[] decode(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.auth.AuthSchemeRegistry: java.util.List getSchemeNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getSize(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: int getAutoAdvanceDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.StatusLine: int getStatusCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: java.lang.String getSearchHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getRawFragment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.CompatModePackages: int getFrontActivityScreenCompatModeLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CertificateList: byte[] getSignatureValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.address.Address getRemoteParty()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.PackageSettingBase: int getInstallStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: int getBaseline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.UnsafeArrayList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getLineDescent(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Looper: android.os.MessageQueue getQueue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.HeaderSet: java.lang.Object getHeader(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$EvictionQueue$1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List getInstalledApplications(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.DisplayDevice: java.lang.String getNameLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.SurfaceView: android.view.SurfaceHolder getHolder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.FtpURLConnection: java.security.Permission getPermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.ControlPanelEffect: java.lang.Boolean getParameterBoolean(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.PluginManager: java.lang.Class getPluginClass(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: int getTextZoom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getStreamType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.SystemService: android.os.SystemService$State getState(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: java.util.Iterator getSipProviders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: java.lang.String getUserAgent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatPrecisionException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ResizableIntArray: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: long getAppBoundaryBeginTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InterfaceAddress: java.net.InetAddress getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getCompoundPaddingStart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IRingtonePlayer$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralSubtrees$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.PointCloud$WaveManager: float getRadius()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate$1: java.security.PublicKey getPublicKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Inflater: long getBytesWritten()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MultipartMimeContentImpl: javax.sip.header.ContentTypeHeader getContentTypeHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.widget.WidgetManager: com.android.email.widget.EmailWidget getOrCreateWidget(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getMaxImageWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.DownloadManager: com.android.mms.util.DownloadManager access$000()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.auth.callback.UnsupportedCallbackException: javax.security.auth.callback.Callback getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: int getLastIrqTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: int getDefaultPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.Authority: gov.nist.core.Host getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl$ProxyConnectEngine: libcore.net.http.RawHeaders getNetworkRequestHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.TextureView: android.view.HardwareLayer getHardwareLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: int getAndroidPuaFromVendorSpecificSjis(char)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.HashMap: java.util.Iterator newValueIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt16Format(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.os.Handler getHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.MediaItemUtils: long getDefaultImageDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getActionCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.WaitingThread: org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: android.os.Handler getWorkerHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: float getPreviousSpanX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.util.ListIterator getUnrecognizedHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: float getPreviousSpanY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERExternalParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: float getScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getRealm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: javax.crypto.ExemptionMechanism getExemptionMechanism()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie: java.util.Date getExpiryDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEditTextView: int getViewWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamField: java.lang.Class getTypeInternal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.VelocityTracker: android.view.VelocityTracker getNextPoolable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore$Builder$BuilderImpl: java.security.KeyStore getKeyStore()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.seekbar.ProgressBar: int getMax()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: java.lang.String getMessageSubject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LoggingPermission: java.lang.String getActions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: float getCurrentSpan()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: int getAudioType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractSequentialList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapStore: com.android.emailcommon.mail.Folder getFolder(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringInternal: int getSpanStart(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multisets$UnmodifiableSortedMultiset: java.util.Set createElementSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageList: long getAccountFromIntent(android.content.Context,android.content.Intent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERSetParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbManager: java.util.HashMap getDeviceList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: int getVendorSpecificPuaFromAndroidPua(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ComponentName: java.lang.String getClassName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getRawIpSourceAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewPropertyAnimator: long getStartDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: android.view.View getAnchorView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.DebugSettingsActivity: android.content.Intent getIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstModificationResult: com.google.common.collect.BstModificationResult$ModificationType getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.TaskDescription: java.lang.CharSequence getLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString$AttributedIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView: long[] getCheckItemIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$DepthFunc getDepthFunc()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ReadWriteHeapByteBuffer: byte[] protectedArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.OverlayFrame: int getResizedRGBSizeWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountManagerResponse$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.WeakHashMap$Entry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.BaseStatusBar: com.android.systemui.statusbar.BaseStatusBar$H createHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String[] getSupportedCipherSuiteNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension: org.apache.harmony.security.x509.ExtensionValue getDecodedExtensionValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getCountry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmInfoRequest: int getInfoType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IAlarmManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: int getClientTransactionTableSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate$1: java.lang.String getSigAlgOID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmRights: java.lang.String getMimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureStore: java.util.ArrayList recognize(android.gesture.Gesture)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getAddedCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IMessenger$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TimeToSampleBox: java.util.List getEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncManager: long access$3700()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: long getDrawingTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RequestLine: java.lang.String getSipVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ActivityBase: int getResultCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.server.search.Searchables: java.util.ArrayList getGlobalSearchActivities()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTheme: int getPreviewImageResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.io.File getFilesDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: java.lang.Object getMetaValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.IntKeyframeSet: int getIntValue(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: boolean draw(android.graphics.Canvas,android.view.ViewGroup,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: android.view.MotionEvent getLastInjectedHoverEvent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: int getSpanStart(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.PresetReverb: android.media.audiofx.PresetReverb$Settings getProperties()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternUtils: boolean getPowerButtonInstantlyLocks()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmRawContent: java.lang.String getRightsAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ShortcutPickerFragment$AccountShortcutPickerFragment: java.lang.String[] getFromColumns()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.InputPort: android.filterfw.core.FrameFormat getSourceFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.EasResponse: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: java.lang.String getMessageSubject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: boolean getDefaultUseCaches()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaApi: int getUploadedPhotos(com.google.android.picasasync.AlbumEntry,com.google.android.picasasync.PicasaApi$EntryHandler)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralName: java.util.List getAsList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.effect.FilterEffect: android.filterfw.core.Frame frameFromTexture(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: boolean getUseParentHandlers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.ExifInterface: double getAltitude(double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: com.android.internal.os.ProcessStats$Stats getStats(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: int indexOf(gov.nist.core.GenericObject)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.ICU: java.util.Locale[] getAvailableNumberFormatLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: int getMaximumAndroidPua()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.PointerIcon: android.view.PointerIcon getDefaultIcon(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherAppWidgetHost: android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeDecimalFormat: java.lang.String getPositiveSuffix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.WorldClockAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: int getLayoutMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getColumnNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ClientSession: long getConnectionID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.QueryController: int getPatternCount(com.android.uiautomator.core.UiSelector)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.NativeDaemonEvent: java.lang.String getRawEvent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.view.View getStatusBarView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackRunBox: int getDataOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ShortBuffer: java.lang.Object array()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Indentation: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.SubscriptSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuItemImpl getExpandedItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceGroup: android.preference.Preference getPreference(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ActivityStack: android.app.ActivityManager$TaskThumbnails getTaskThumbnailsLocked(com.android.server.am.TaskRecord)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getExampleNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaProperties: int getSupportedMaxVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.ICU: java.util.Locale[] getAvailableCalendarLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionBundle: byte[] getPushData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.method.KeyListener getKeyListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.String getSpecificationVendor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker: float getTopFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner: java.lang.CharSequence getPrompt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.telephony.MmsSmsDatabaseHelper: com.android.providers.telephony.MmsSmsDatabaseHelper getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.lang.String getFilenameWithLocale(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: java.lang.String getenv(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: java.lang.String getProviderMimeType(android.net.Uri,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int[] getDimensions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.ContentCache: android.database.Cursor getCachedCursor(java.lang.String,java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.content.SharedPreferences getPreferences(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.SelectionKey: java.lang.Object attachment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeyDivider: android.graphics.drawable.Drawable getIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: java.lang.String getAbsolutePath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.MinExpiresHeader createMinExpiresHeader(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.FullBackupDataOutput: android.app.backup.BackupDataOutput getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.io.HttpTransportMetricsImpl: long getBytesTransferred()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String[] getISOCountries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension: byte[] getExtnValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPDateTimeImpl: int getSecond()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.OverlayFrame: int getOverlayFrameWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: int getInt(android.content.res.TypedArray,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Method[] getMethods()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.PanoramaFrameOverlay: boolean getDrawOutlineOnly()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderProxy: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getSharedQueuedThreads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatPrecisionException: int getPrecision()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Formatter$FormatSpecifierParser: java.lang.String getFormatSpecifierText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: java.lang.String getCurrentPageDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HeaderViewListAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.JarURLConnectionImpl: java.lang.Object getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getDisplayCountry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.AtomicFile: java.io.File getBaseFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.ContentCache: android.database.Cursor get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.Mailbox: org.apache.james.mime4j.field.address.DomainList getRoute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getStandardFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.Rfc822Output: java.lang.String getHtmlBody(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignerInfo: byte[] access$600(org.apache.harmony.security.pkcs7.SignerInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IAudioFocusDispatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: libcore.io.StructPasswd getpwuid(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getTextDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNddPrefixForRegion(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FastBitmapDrawable: int getMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.X509PublicKey: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Enumerated: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: char[] getTextCharacters(int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$Factory: java.lang.String getDefaultUserAgent(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: long getFrameDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.ParseException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: java.lang.String[] getVmFeatureList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.content.ClipData getClipData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getEllipsisStart(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: int getBaselineAlignedChildIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplay: java.lang.String getDeviceAlias()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RawHeaders: java.lang.String getFieldName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.ViewPager: android.support.v4.view.PagerAdapter getAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.WallpaperChooserDialogFragment$WallpaperDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ISearchManager$Stub$Proxy: java.util.List getGlobalSearchActivities()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpConnection: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter getShowAllAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.TextKeyListener: int getPrefs(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView$PrivateAccess: float getHorizontalScrollFactor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getDefaultScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: android.media.videoeditor.MediaArtistNativeHelper getNativeContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.FileLock: long position()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$LayerType getLayerType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.SurfaceView$4: android.graphics.Rect getSurfaceFrame()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.String: byte[] getBytes(java.nio.charset.Charset)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getNumberOfDimensions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getLineTop(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: int getSleepDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ProgressBar: android.graphics.drawable.Drawable getIndeterminateDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getWindowSystemUiVisibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraActivity: long getAutoFocusTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.PKIXCertPathChecker: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.ListPreference: java.lang.CharSequence[] getEntryValues()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: java.lang.String getResponseMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: boolean getRestoreMuteOnInCallResume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ImplForVariable: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.Layout getHintLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.NodeList getTimeChildren()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstModificationResult: com.google.common.collect.BstNode getChangedTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Runtime: java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.Metadata: int getInt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.TextModel: java.lang.String getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getSignature()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.TextAppearanceSpan: int getTextSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.ProximityInfo: long getNativeProximityInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.UrlUtils: java.lang.String getSchemePrefix(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountAuthenticatorResponse$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.DisplayInfo: int getNaturalHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: java.lang.String getFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.LruCache: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.Thread getOwner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObject: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router getRouter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.AlertDialog$Builder: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteCategory: java.util.List getRoutes(java.util.List)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Scroller: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SettingsValues: java.lang.String getPrefAdditionalSubtypes(android.content.SharedPreferences,android.content.res.Resources)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.LogFactory: org.apache.james.mime4j.Log getLog(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.DraftCache: boolean getSavingDraft()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.DataReferenceBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getFragment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Exception: java.lang.Throwable getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject$Download: long getTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Transition: java.lang.String getFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.ProximityInfo: com.android.inputmethod.keyboard.ProximityInfo createSpellCheckerProximityInfo(int[],int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.Utility: java.lang.String[] getRowColumns(android.content.Context,android.net.Uri,long,java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getNameForUid(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.Rfc822Output: java.lang.String getHtmlAlternate(com.android.emailcommon.provider.EmailContent$Body,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByClass(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: android.view.animation.Animation createForceHideEnterAnimation(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterContext: android.filterfw.core.Frame fetchFrame(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.LogRecordFactory getLogRecordFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Transition: android.media.videoeditor.MediaArtistNativeHelper$TransitionSettings getTransitionSettings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraHolder: int getNumberOfCameras()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.References: java.util.Iterator getParameterNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$Factory: android.webkit.WebIconDatabase getWebIconDatabase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: java.lang.String getAudioWaveformFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: float getDimension(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ImageSlicer: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IRotationWatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal getSubjectX500Principal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getData(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase: android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Warning: java.lang.String getAgent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult windowGainedFocus(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableList: java.lang.Object writeReplace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.VersionInfo: java.lang.String getPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.URLSpan: java.lang.String getURL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.FastScroller: java.lang.Object[] getSections()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeLocale: java.util.Locale getSubtypeLocale(android.view.inputmethod.InputMethodSubtype)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: java.io.File getAbsoluteFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: int getIntColumn(android.database.Cursor,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountManagerResponse$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xml.ExpatParser$ExpatLocator: java.lang.String getPublicId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: boolean getFreezesText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.CompatUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: java.io.File getCanonicalFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ComputingConcurrentHashMap$ComputingMapAdapter: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.ByteBuffer: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getAccessibilityCursorPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: java.util.List getProcessesInErrorState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractSetMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: java.lang.Object getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: java.util.ArrayList getAllShortcutAndWidgetContainers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: int getDeviceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignerInfo: byte[] getEncryptedDigest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.header.Via getViaHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue: com.android.org.bouncycastle.asn1.ASN1Encodable getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.SocketHttpClientConnection: int getSocketTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MultipartMimeContentImpl: gov.nist.javax.sip.message.Content getContentByType(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getAllowUniversalAccessFromFileURLs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.util.Iterator getParameterNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityOptions: int getStartY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityOptions: int getStartX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: int getLaunchedFromUid(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.xpath.XMPPathSegment: int getKind()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List getEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask: java.lang.Object[] doInBackground(java.lang.Long[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getBreadCrumbShortTitle(android.content.res.Resources)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RelativeLayout: int getGravity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.DialogState: int getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.auth.DigestScheme: java.lang.String createCnonce()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: int getMinimumIntegerDigits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentEncodingHeader getContentEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: int getSendUdpBufferSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDeviceInfo: java.lang.String getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.UserHistoryDictionary: com.android.inputmethod.latin.UserHistoryDictionary getInstance(android.content.Context,java.lang.String,android.content.SharedPreferences)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.RegexCache$LRUCache: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.ProtocolVersion: int getMajor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: java.lang.String getString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.sax.RootElement: org.xml.sax.ContentHandler getContentHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONArray: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Script$FieldBase: android.renderscript.Type getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LocalActivityManager: java.util.HashMap dispatchRetainNonConfigurationInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: boolean getAutoWhiteBalanceLock()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SearchView: android.widget.CursorAdapter getSuggestionsAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: int getSoTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentLanguage: java.util.Locale getContentLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.ClassLoader getClassLoaderImpl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMap: java.lang.Object delegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getFixedFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Region: android.graphics.Path getBoundaryPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.BackupAgent: android.os.IBinder onBind()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.MediaRange: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.Key getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: java.security.Provider$Service getService(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbEndpoint: int getEndpointNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.YuvImage: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedContentInsets(android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.Recycler: int getMessageMaxLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.Parser: org.xml.sax.EntityResolver getEntityResolver()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbEndpoint: int getInterval()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.mdat.MediaDataBox: com.coremedia.iso.boxes.ContainerBox getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsApp: java.lang.String getCurrentCountryIso()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.io.File getDir(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: boolean getShowGTalkServiceStatusForUser(android.content.ContentResolver,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NamedNodeMapImpl: org.w3c.dom.Node getNamedItem(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Ordering: com.google.common.collect.Ordering nullsFirst()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.AttrImpl: short getNodeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.FromHeader getFromHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionBundle: java.lang.String getUri()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte getDescriptionCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.HopImpl: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: boolean getParameterAsBoolean(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.SubjectPublicKeyInfo: byte[] access$200(org.apache.harmony.security.x509.SubjectPublicKeyInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: char getChar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Equalizer: java.lang.String getPresetName(short)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.EmailContent$Message: com.android.emailcommon.provider.EmailContent$Message restoreMessageWithId(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.view.View findFrontmostDroppableChildAt(float,float,android.graphics.PointF)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AcceptEncoding: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(android.content.pm.ResolveInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getImagePixHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$ReflectionActionWithoutParams: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.InputMonitor: int getPointerLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: float getScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.WaveformData: short[] getFrameGains()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getHeaders(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.StorageManager: com.android.providers.downloads.StorageManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractContainerBox: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongValueReference: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.BerInputStream: int getOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.Context createPackageContext(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.BackupAgentHelper: android.app.backup.BackupHelperDispatcher getDispatcher()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.view.View getZoomControls()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.INotificationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: boolean getBroadcast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: long getDateModified()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: java.lang.String getContentDisposition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: long getLong(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewDatabaseClassic: java.lang.String[] getUsernamePassword(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.view.CertificateSelector: java.lang.String getCertificate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.TextKeyListener: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$SipSessionImpl: int getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.ColorStateList loadColorStateList(android.util.TypedValue,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.InCallScreen: com.android.phone.InCallTouchUi getInCallTouchUi()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Quint$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider$Transport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Quint$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AccessDescription: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.Signature: byte[] toByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Quint$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.NativeDaemonConnector: java.lang.String[] doListCommand(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.KeyChain: java.security.cert.X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageItem: com.android.mms.model.SlideshowModel getSlideshow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRegionElementImpl: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: double getDouble(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: android.app.ActionBar$Tab getSelectedTab()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.LongArrayBuffer: long get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSpinner: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Utilities: android.graphics.Bitmap createIconBitmap(android.graphics.Bitmap,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.Buffer: java.nio.Buffer flip()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.widget.EmailWidget: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByVersion(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ResourceUtils: java.lang.String getDeviceOverrideValue(android.content.res.Resources,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERGeneralString: com.android.org.bouncycastle.asn1.DERGeneralString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getCurrentTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout$ViewCluster: int[] getLeftEdge()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECFieldFp: java.math.BigInteger getP()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap: java.util.Collection entries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncManager: android.accounts.AccountAndUser[] access$2800()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackRunBox: com.coremedia.iso.boxes.fragment.SampleFlags getFirstSampleFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getKeyboardLayoutSetDisplayName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodSubtype: int getIconResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TableRow: int getLocationOffset(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ShapeDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TtsEngines: java.util.List getEngines()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Date: int getSeconds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SuggestionsPopupWindow: int getTextOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessagesAdapter: java.util.Set getSelectedSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.X509PublicKey: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.BERTaggedObjectParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.AnimatedRotateDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: android.view.View getZoomControls()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.EmptyImmutableList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.UploadsManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine: com.android.internal.util.StateMachine$LogRec getLogRec(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$FocusTransitionDrawable: float getProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.DynamicDrawableSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView$PrivateAccess: int getHorizontalScrollbarHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmRawContent: int getRawType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListView: long getSelectedId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getVerticalScrollbarWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyCharacterMap: int getModifierBehavior()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: java.lang.String getNamespaceURI()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Sampler: float getAnisotropy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gms.panorama.internal.PanoramaClientImpl: android.os.IInterface createServiceInterface(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.FrameLayout: boolean getMeasureAllChildren()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AddressParametersHeader: javax.sip.address.Address getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: int getColumnNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.SynthesisRequest: java.lang.String getLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getHeaderField(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultiset: java.util.Set entrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageVolume: android.os.UserHandle getOwner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CertTool: java.lang.String getSignedPublicKey(android.content.Context,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSet: java.util.Iterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List getInstalledPackages(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.StringTokenizer: java.lang.String getLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: boolean getVoiceSearchEnabled()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ImplForVariable: java.lang.reflect.Type[] getBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureStore: java.util.ArrayList getGestures(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation: android.content.Context getTargetContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TtsEngines: java.lang.String getDefaultEngine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.IUsageStats$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.GenericInflater: java.lang.Object onCreateItem(java.lang.String,android.util.AttributeSet)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Enum: java.lang.String name()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgOID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getCurrentTextColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.BreakIterator: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.MessagingExceptionStrings: java.lang.String getErrorString(android.content.Context,com.android.emailcommon.mail.MessagingException)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CRLNumber: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.clientauthutils.CredentialsCache: java.util.Collection getCachedAuthorizationHeaders(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.ByteBuffer: java.io.InputStream getByteStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapString: java.util.Date getDateOrNull()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DeviceAdminInfo: java.lang.String getReceiverName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERInteger: com.android.org.bouncycastle.asn1.ASN1Integer getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.LinkedHashMap: java.util.Iterator newEntryIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: float getAnimationScale(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View$MeasureSpec: int getSize(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.EDIPartyName$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.parsers.FactoryConfigurationError: java.lang.Exception getException()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter$MyCursorHelper: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipEntry: int getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.content.ComponentName getActivityClassForToken(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: int getPendingOperationCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PrefetchHelper: java.io.File getAlbumCover(long,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Folder: com.android.launcher2.DropTarget getDropTargetDelegate(com.android.launcher2.DropTarget$DragObject)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.IUsageStats$Stub$Proxy: com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger getServerLogger()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: int getQueryType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.NativeProgram: java.lang.Object getHostValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeQ()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeP()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.ProgramVertex: android.renderscript.Element getInput(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFieldsForLoading: char get(java.lang.String,char)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getPageBackgroundColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getConfigurationIntent(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.app.PendingIntent getActivitiesAsUser(android.content.Context,int,android.content.Intent[],int,android.os.Bundle,android.os.UserHandle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: int getAttributeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: java.lang.String[] getSearchUids(java.util.List)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getNamespace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.SynthesisRequest: int getPitch()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getHistorySize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getBeginLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateFormat: java.text.DateFormat getLongDateFormat(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.lang.ClassLoader getClassLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledDoubleTapTouchSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamField: int getOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getMessageContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherApplication: float getScreenDensity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.OutgoingCallBroadcaster: android.app.Dialog onCreateDialog(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: java.lang.String getReceived()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getHopTarget(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodWriteReplace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getLastReceivedUpPointerDownX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getLastReceivedUpPointerDownY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaBox: com.coremedia.iso.boxes.MediaHeaderBox getMediaHeaderBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.app.LoaderManager getLoaderManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$FilteredMultimap: java.util.Map asMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: android.util.Pair getBackoff(android.accounts.Account,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaSyncEvent: int getAudioSessionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getHorizontalOffsetForDrawables()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.PKIXParameters: java.util.List getCertStores()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: int getViaPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndProximity poll(long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getBlockNetworkLoads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager: float getAltitude(float,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByClass(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetHostView: android.view.View getErrorView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ActivityRecord$Token: long getKeyDispatchingTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.DrawableHolder: android.graphics.drawable.BitmapDrawable getDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: java.lang.CharSequence getHeaderTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: long getAppStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.NotificationData: com.android.systemui.statusbar.NotificationData$Entry get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorageInfo: int getStorageId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: int getFlag(android.content.res.TypedArray,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ThreePaneLayout: int getRightPaneId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaHeaderBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.VideoEditorActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateUtils: java.lang.String getAMPMString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Properties: java.lang.String getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmRawContent: java.io.InputStream getContentInputStream(android.drm.mobile1.DrmRights)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.PackageManager: java.lang.String getDataDirForUser(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScrollBarFadeDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.StatFs: int getBlockSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.media.MediaProvider$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyboardSwitcher: int getKeyboardShiftMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ClientOperation: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HeaderViewListAdapter: android.widget.ListAdapter getWrappedAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Date: int getYear()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: void getContentInsetHintLw(android.view.WindowManager$LayoutParams,android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.DictionaryFactory: com.android.inputmethod.latin.DictionaryCollection createMainDictionaryFromManager(android.content.Context,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UiUtilities: android.view.View getView(android.app.Activity,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: char getMatch(char[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$MapMultimap$AsMapEntries$1$1: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.Account: com.android.emailcommon.provider.Account restoreAccountWithId(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation$Cache: com.android.mms.data.Conversation get(com.android.mms.data.ContactList)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RadioGroup: int getCheckedRadioButtonId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.parser.Lexer: java.lang.String getHeaderName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: float getBackgroundAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat: int getActionIndex(android.view.MotionEvent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getThumbCompressedSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListView: android.widget.Adapter getAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: long getLongColumn(android.database.Cursor,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.security.Permission getPermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Thumbnail: android.graphics.Bitmap createVideoThumbnailBitmap(java.io.FileDescriptor,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: long getLong(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: int getSources()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapConnection: java.util.List executeSimpleCommand(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: boolean getRegenerateClip()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.backup.LocalTransport: int getRestoreData(android.os.ParcelFileDescriptor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: java.lang.String getLastModified()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.Stopwatches: java.lang.String getTimeText(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: java.util.List getDecodingTimeEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.HardwareLayer: android.view.DisplayList getDisplayList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable$NinePatchState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getBaseline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: long getCpuTimeForPid(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: int getCurrentWorkspaceScreen()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PrefetchHelper: com.google.android.picasasync.PrefetchHelper$CacheStats getCacheStatistics(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.System: java.lang.String getenv(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: java.lang.String getSubtitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.AnimationSet: java.util.List getAnimations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getScrollBarDefaultDelayBeforeFade()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable: float getPositionY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable: float getPositionX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.Resources getSystem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatFlagsException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getPhoneContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.RemoteCallbackList: java.lang.Object getBroadcastCookie(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.ThreadAuditor$ThreadHandle: java.lang.Thread getThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.RateController: com.android.mms.util.RateController getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstPath: com.google.common.collect.BstNode getTip()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixTransformRule()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.telephony.TelephonyManager getTelephonyManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: double getDouble(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: int getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: int getSampleIsDependentOn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedVideoSizes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getPageNearestToCenterOfScreen()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getVoiceMaxResults()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Maps$1: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: java.lang.Object getSystemService(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getCollectionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Clock: long getTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.CallFeaturesSetting: android.app.Dialog onCreateDialog(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getAttributePrefix(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.ViewPager: int getChildDrawingOrder(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObjectList: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.VelocityTracker: float getYVelocity(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.GenericInflater: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.message.Request)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$WrappedCollection$WrappedIterator: java.util.Iterator getDelegateIterator()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getFocusAreas()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: int getLocalPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getQName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputContext getInputContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.ThumbnailManager: java.lang.String getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractLinkedIterator: java.lang.Object next()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharBuffer: java.nio.CharBuffer get(char[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetService: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ExchangeStore: com.android.emailcommon.service.IEmailService getService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: int getHoldCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getType(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: android.widget.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentType: java.lang.String getCharset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: android.view.View addStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.MemInfoReader: long getTotalSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizePagedView: android.view.View getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.Package getPackage(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: int getInjectedPointersDown()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildContentView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Frame: long getBindingId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.DuplicateNameValueList: java.util.Iterator getNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.EDIPartyName: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: java.util.Comparator getAppNameComparator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaScanner: android.media.MediaScanner$FileEntry makeEntryFor(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraActivity: com.android.camera.ShutterButton getShutterButton()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.DisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: int getBaseline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: java.lang.String getHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.os.IBinder getActivityToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: long getTimelineDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SubscriptionState: java.lang.String getReasonCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.ISerialManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: boolean getPersistedBoolean(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RSeq: int getSequenceNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.TimeStampHeader createTimeStampHeader(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getPatternSelector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: boolean getOmitVersionAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.text.NumberFormat getPercentInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.DrawOverlayFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageListAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: java.util.List getAudioTracks()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoView: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IWallpaperManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageFileView: com.android.email.activity.MessageFileViewFragment getFragment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HeaderViewListAdapter: android.widget.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.EmailProvider: android.database.Cursor mostRecentMessageQuery(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: int getRequestedOrientation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getLineInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate$1: java.math.BigInteger getSerialNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountService$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: int getDefaultPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.sql.Date: int getMinutes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: com.android.launcher2.DragController getDragController()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsScrollViewPerformanceHelper: int getVerticalFadingEdgeLengthCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.TextModel: int getCharset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getChildWidth(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IClipboard$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DropDownAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getMediaStorageDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: android.media.videoeditor.WaveformData getWaveformData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureStroke: android.graphics.Path getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Oid$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: byte[] getIV()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: int getDoubleTapToastCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SelectionStartHandleView: android.widget.Editor$ActionPopupWindow getActionPopupWindow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBMPString: com.android.org.bouncycastle.asn1.DERBMPString getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Math: int getExponent(double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getPlayState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.BaseStatusBar: android.view.View updateNotificationVetoButton(android.view.View,com.android.internal.statusbar.StatusBarNotification)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: int getDividerPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.StackTraceElement: java.lang.String getClassName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView: boolean getItemsCanFocus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: android.view.IApplicationToken getAppToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context,com.android.email.Controller)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.CipherSpi: byte[] engineWrap(java.security.Key)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.PointerIcon: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl$HttpUrlConnectionDelegate: javax.net.ssl.SSLSocket getSSLSocket()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: android.graphics.Bitmap getIconFromCursor(android.database.Cursor,int,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.GradientDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getClientKeyType(byte)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractSequentialList: java.lang.Object remove(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyFactory: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: android.graphics.drawable.Drawable getIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$1: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.app.Application getApplication()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$RegisterCommand: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: boolean getReuseAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoaderManagerImpl: android.content.Loader getLoader(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getTitleHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.media.MediaProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchManager: java.util.List getSearchablesInGlobalSearch()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPIfMatch: java.lang.String getETag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.RenderScriptGL: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertStore: java.util.Collection getCertificates(java.security.cert.CertSelector)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetManager: android.content.res.AssetManager getSystem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.AttachmentInfo: android.content.Intent getAttachmentIntent(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Transformation: int getTransformationType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Transition: long getMaximumDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getDrawingCacheQuality()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: double getDouble()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObjectList: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.FastXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: java.util.ArrayList getItemsInLocalCoordinates(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DropDownAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperInfo: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.OverlayFrame: int getOverlayFrameHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.net.URL getURL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SerialManager: java.lang.String[] getSerialPorts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer get(short[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultiset: java.util.Set elementSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBitString: int getPadBits(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.IconListAdapter$IconListItem: int getResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ObjectAnimator: java.lang.String getPropertyName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.VerificationParams: int getOriginatingUid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapElement getElementOrNone(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float getSpacingAdd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getInputMethodList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.AnimationSet: long getStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IRemoteVolumeObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Switch: int getCompoundPaddingLeft()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNode: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.FileUtils: java.lang.String getSimpleName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.PreferredComponent: java.lang.String getParseError()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$EasyEditPopupWindow: int getTextOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$CustomSetMultimap: java.util.Collection createCollection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLStreamHandler: int getDefaultPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.MaxForwardsHeader createMaxForwardsHeader(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ClientOperation: int getHeaderLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float getLineRight(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.DisplayDevice: com.android.server.display.DisplayAdapter getAdapterLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: boolean getReuseAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractSortedMultiset: com.google.common.collect.SortedMultiset descendingMultiset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceGroupAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getScaledNavSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.SubMenuBuilder: android.view.MenuItem getItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver$UEventInfo: java.lang.String getDevPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractListMultimap: java.util.Collection createCollection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.GradientDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ErrnoException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: java.util.ArrayList getStringArrayList(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SortedMultisets$DescendingMultiset: com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: android.content.res.AssetManager getAssets(android.app.ActivityThread)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FieldPort: java.lang.Object getTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup$ChildListForAccessibility: int getChildCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: char getPatternSeparator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbInterface: android.hardware.usb.UsbEndpoint getEndpoint(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: int getIndex(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.KeyAgreement: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request createAck()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: long getThreadId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.RotateDrawable$RotateState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.SocketHttpClientConnection: int getLocalPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: int getMaxWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERVisibleString: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date: java.lang.String getYear()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECFieldFp: int getFieldSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: java.lang.String getUaProfTagName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: int getBaseIndent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchManager: android.content.Intent getAssistIntent(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingCollection: java.lang.Object[] toArray(java.lang.Object[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.lang.String getExternalStorageState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.framework.TestCase: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.HandlerThread: android.os.Looper getLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementTimeImpl: short getFill()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.OverlayType: com.android.videoeditor.OverlayType[] getOverlays(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbEndpoint: int getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.DeskClock$TabsAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl$ViewRootHandler: java.lang.String getMessageName(android.os.Message)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractMap: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: int getParameter(int[],short[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.RSeqHeader createRSeqHeader(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$Axis: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantLock: java.lang.Thread getOwner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getMeasuredHeightAndState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfoByAccessibilityId(int,long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.FrameLayout: int getForegroundGravity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MainKeyboardView: java.lang.String getShortDisplayName(android.view.inputmethod.InputMethodSubtype)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbInterface: int getInterfaceProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: java.lang.Object getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaPlayer: android.os.Parcel getParcelParameter(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getLineHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Editable$Factory: android.text.Editable$Factory getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ViaHeader getTopmostViaHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledOverflingDistance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IPowerManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorageInfo: java.lang.String getVolumeIdentifier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaFile: java.lang.String getFileTitle(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.Principal getIssuerDN()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.Store: com.android.emailcommon.mail.Folder getFolder(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.BaseMenuPresenter: android.view.View getItemView(com.android.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityOptions: int getStartWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.RenderScript: android.content.Context getApplicationContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getAttributeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Controller: java.util.Collection getResultCallbacksForTest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: int getVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ImfUtils: java.lang.String getInputMethodIdOfThisIme(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: com.android.server.accessibility.ScreenMagnifier$MagnificationController$MagnificationSpec getAccessibilityTransformation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewTreeObserver$CopyOnWriteArray$Access: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: float getWeightSum()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.FastXmlSerializer: java.lang.String getNamespace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.AlphaBlendFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.util.DeleteOnExit: org.apache.harmony.luni.util.DeleteOnExit getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieEffect getEffect(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbManager: java.lang.String getDefaultFunction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getWordInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Element: java.lang.String getSubElementName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$3: java.util.Iterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: long getMillis()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$4: java.util.Iterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableCollection: java.lang.Object writeReplace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.IconListAdapter$IconListItem: java.lang.String getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.framework.TestCase: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.ThreadAuditor$ThreadHandle: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IPermissionController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Enum: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogManager: java.util.Enumeration getLoggerNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView$ArrowScrollFocusResult: int getAmountToScroll()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.AnimatorSet: java.util.ArrayList getChildAnimations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getPeerProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.BinaryDictionaryGetter: java.util.ArrayList getDictionaryFiles(java.util.Locale,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FloatBuffer: java.lang.Object array()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SipSession: android.net.sip.SipProfile getLocalProfile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingCollection: java.lang.Object delegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.PlaybackSynthesisCallback: int getMaxBufferSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CallIdHeader getCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.MessageFormat: java.util.Locale getLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetAddress: java.net.InetAddress getLoopbackAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Utils$UsabilityStudyLogUtils: com.android.inputmethod.latin.Utils$UsabilityStudyLogUtils getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getSecureContainerFilesystemPath(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy: java.util.TreeSet getPossibleLengths()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: com.android.launcher2.CellLayout getParentCellLayoutForView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getHmacName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapResponseParser: java.lang.String readUntilEol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObjectList: gov.nist.core.GenericObject first()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputContext$Stub$Proxy: void getExtractedText(android.view.inputmethod.ExtractedTextRequest,int,int,com.android.internal.view.IInputContextCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PanelView: float getExpandedHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.FileOutputStream: java.io.FileDescriptor getFD()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityGroup: android.app.Activity getCurrentActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: android.widget.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: boolean getCropToPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: android.view.MenuItem getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String debugDump()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.telephony.MmsProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory getSystemAudioCategory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: java.lang.String getCaller()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: java.lang.String getSharedPreferencesName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.io.Files$2: java.io.FileOutputStream getOutput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.PowerManager: int getMaximumScreenBrightnessSetting()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IRestoreSession$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DialerKeyListener: char[] getAcceptedChars()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScrollBarSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: java.lang.String getSourceMethodName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.SipFactory: javax.sip.SipFactory getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementTimeImpl: short getFillDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getGlobalProxyAdmin(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumber(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IIntentReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: int getVisibleTitleHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.BinaryTempFileBody: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: java.lang.String getPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getZone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.OverlayFrame: java.lang.String getFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.LayoutAnimationController: int getOrder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.transport.MailTransport: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.inputmethodservice.InputMethodService: int getMaxWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.FullContainerBox: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageObbDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DEREnumerated: com.android.org.bouncycastle.asn1.ASN1Enumerated getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraPreference: android.content.SharedPreferences getSharedPreferences()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IBackupAgent$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.UnmodifiableIterator valueIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.ColorMatrix: float[] getArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getFirstMediaItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ISyncAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.framework.ComparisonFailure: java.lang.String getActual()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getZoomRatios()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.Helpers: java.lang.String getFullPath(java.lang.String,java.lang.String,int,java.io.File)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.References: java.lang.String getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: java.util.Map getHeaderFields()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token jjFillToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getRight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getThumb()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.Thread getFirstQueuedThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getRadius()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.TimePicker: int getHours()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.ProcessedData: java.lang.String getAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.WindowManagerPolicyThread: android.os.Looper getLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: java.util.Enumeration getIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: byte[] getRawContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.MissingResourceException: java.lang.String getClassName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multisets$ImmutableEntry: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1Primitive getExternalContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$900(com.android.ex.chips.BaseRecipientAdapter)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.TrackMetaData: long[] getMatrix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.MaxForwards: int getMaxForwards()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getValue(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.CallIdentifier: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.InputPort: java.lang.Object getTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: com.android.org.bouncycastle.asn1.ASN1Primitive getObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.SetupData: com.android.email.activity.setup.SetupData getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString$AttributedIterator: int getRunStart(java.text.AttributedCharacterIterator$Attribute)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IStopUserCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageDeleteObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate getCertificate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getPaddingStart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Program: android.renderscript.Type getConstant(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.SocketChannelImpl: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.ControlPanelEffect: java.lang.String getParameterString(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneUtils: java.lang.String getPresentationString(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getTopPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.AppGlobals: android.app.Application getInitialApplication()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object getPropertyObject(java.lang.String,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ClipDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapStore: java.lang.String getImapId(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.content.Intent getIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStoreSpi: char[] getPasswordFromCallBack(java.security.KeyStore$ProtectionParameter)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.os.Looper getLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.MulticastSocket: byte getTTL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementTimeImpl: float getDur()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TreeMap$Node: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.FieldPacker: byte[] getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebIconDatabaseClassic: android.webkit.WebIconDatabaseClassic getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.net.ServerSocketFactory: javax.net.ServerSocketFactory getDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: android.content.ContentResolver$OpenResourceIdResult getResourceId(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap: java.util.Set keySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedSet: java.lang.Object writeReplace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Key: int[] getCurrentDrawableState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.Parser: org.xml.sax.ContentHandler getContentHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.content.res.ColorStateList getTextColors(android.content.Context,android.content.res.TypedArray)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.lang.Object get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.parser.SmilContentHandler: org.w3c.dom.smil.SMILDocument getSmilDocument()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.FieldPosition: int getField()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharToByteBufferAdapter: java.nio.CharBuffer get(char[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.HardwareLayer: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPath: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$4: int getAlignmentValue(android.view.View,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionBundle: java.lang.String getProxyAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementTimeImpl: org.w3c.dom.smil.TimeList getEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignedData: java.util.List getCRLs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getEmergency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.NamedMailbox: java.lang.String getAddressString(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: short getShort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.Buffer: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Frame: long getTimestamp()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.PackageSettingBase: int getCurrentEnabledStateLPr(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message getMessage(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilLayoutElementImpl: org.w3c.dom.smil.SMILRootLayoutElement getRootLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.LinkedHashMap: java.util.Iterator newValueIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: java.lang.String getOriginalUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentSender: java.lang.String getCreatorPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.AnimatedRotateDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getReadLockCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentFilter: java.lang.String getDataScheme(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.TargetApplicationGetter: android.content.pm.ApplicationInfo getCachedApplicationInfo(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getKeyX(android.content.res.TypedArray)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine$LogRec: long getTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Dialog: android.app.ActionBar getActionBar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.smil.TimeList getEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBitString: com.android.org.bouncycastle.asn1.DERBitString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature$SignatureImpl: byte[] engineSign()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle$Control: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1EncodableVector: com.android.org.bouncycastle.asn1.ASN1Encodable get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.ParseException: int getErrorOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: java.lang.String getSourceClassName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: java.lang.String getID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: int getWrongPasswordStringId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$1: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.RuleBasedCollatorICU: int getAttribute(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.BaseMovementMethod: int getMovementMetaState(android.text.Spannable,android.view.KeyEvent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.RingtonePreference: boolean getShowDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TextToSpeechService$SpeechItem: int getCallerUid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getRightPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: java.util.Iterator getMultiParameterNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.HTMLScanner: java.lang.String getSystemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: int getLastUserTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.WorkingMessage: java.lang.CharSequence getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.ViewManager getViewManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: java.lang.Class getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: android.app.admin.DeviceAdminInfo getAdminInfo(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: gov.nist.javax.sip.header.SIPHeader get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.Plugin: java.lang.String getDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Message[] getMessages(int,int,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: int getPrefix(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ISearchManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.CharacterPickerDialog$OptionsAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Switch: int getSwitchMinWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.GLSurfaceView: boolean getPreserveEGLContextOnPause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.CursorLoader: java.lang.String getSelection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.performance.Throughput: float getNanosPerPixel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: android.widget.RemoteViews getViewAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getMaxLines()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice$MotionRange: float getRange()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityServiceList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.PasswordAuthentication: java.lang.String getUserName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.PinListEntry: boolean getEnforcing()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabWidget: int getTabCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getImportantForAccessibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getHashName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.TrackMetaData: long getTrackId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.EnumMap$EnumMapValueCollection$1: java.lang.Object get(java.util.MapEntry)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getViewHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: android.app.KeyguardManager getKeyguardManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipEntry: byte[] getExtra()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.LightCycleApp: java.lang.String getAppVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getDataDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: float getExposureCompensationStep()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: boolean getStrictErrorChecking()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeDecimalFormat: java.lang.String getNegativePrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.LayoutAnimationController: float getDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ActivityStack: com.android.server.am.TaskAccessInfo getTaskAccessInfoLocked(int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.IRemoteViewsFactory$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int[] getExpandedArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.MalformedInputException: int getInputLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.ProjectsActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getScaledHeight(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Surface: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getPeerProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getTotalPaddingRight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: boolean getDetachWallpaper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageListItemCoordinates: int getMode(android.content.Context,int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: int getInteger(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.math.RoundingMode getRoundingMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPDateTimeImpl: int getHour()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CRL: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.ChunkOffsetBox: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetwork: com.android.commands.monkey.MonkeyEvent getNextEvent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getPageForView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.net.http.SslCertificate getCertificate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: java.lang.String getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList: java.util.Date getNextUpdate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(java.lang.String,int,javax.sip.address.Hop)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame getWidgetPageAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v13.app.FragmentPagerAdapter: android.os.Parcelable saveState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.RegionModel: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.StringEntity: long getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Date: int getMinutes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.Class[] getClasses()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilParElementImpl: float getDur()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.view.MenuInflater getMenuInflater()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: int getRepeatCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getBytesPerSample()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogManager: java.util.logging.LoggingMXBean getLoggingMXBean()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getMinimumFlingVelocity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ProgressBar: int getMax()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbEndpoint: int getDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Authenticator: java.lang.String getRequestingHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$PackedMap: java.lang.Object getValue(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SampleDependencyTypeBox getSampleDependencyTypeBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderProxy: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager$FastBitmapDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.Pop3Store$Pop3Folder: int getMessageCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: java.lang.String getDependency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.io.File getExternalCacheDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Email: java.lang.String getMessageDecodeErrorString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.internal.util.TimezoneGetter: org.apache.harmony.luni.internal.util.TimezoneGetter getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Scroller: int getCurrX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Scroller: int getCurrY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.performance.Throughput: int getPeriodFrameCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoInline: android.graphics.SurfaceTexture getSurfaceTexture(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getInstalledAccessibilityServiceList(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.MediaRange: java.lang.String getSubtype()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardRow: int getKeyY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.ICancellationSignal$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyKeyEvent: int getKeyCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.BitwiseOutputStream: byte[] toByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: java.lang.Object getSelectedItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getViaHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.util.Iterator getHeaderNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.internal.StringPool: java.lang.String get(char[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.tablet.TabletStatusBar: int getStatusBarGravity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringInternal: int getSpanFlags(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager$FocusEventHandlerDelegate: android.os.Handler getHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetHostView: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getDefaultInAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.NetscapeDraftSpec: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: java.lang.String access$200()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: javax.security.auth.x500.X500Principal getIssuer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbEndpoint: int getMaxPacketSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IBackupAgent$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread getExclusiveOwnerThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker: long getExpireAfterWriteNanos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharBuffer: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getRawSchemeSpecificPart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.Authorization getAuthorization()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: java.util.List getDownloads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.ActionBarPolicy: com.android.internal.view.ActionBarPolicy get(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: boolean getIncludeFontPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: short getShort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: java.lang.String getCanonicalPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.AbsActionBarView: int getAnimatedVisibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.ddm.DdmHandleAppName: java.lang.String getAppName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: java.util.Locale getTextLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AccessibilityIterators$LineTextSegmentIterator: int getLineEdgeIndex(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.EffectKenBurns: android.graphics.Rect getStartRect()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: java.lang.String getDocumentURI()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.EntityResolver getEntityResolver()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.MapEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.DicTraverseSession: long getSession()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.HttpHost: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1OctetString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getAccessibilityViewId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.Utility: java.lang.Object getFirstRowColumn(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Object,com.android.emailcommon.utility.Utility$CursorGetter)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore getCookieStore()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getAllPermissionGroups(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewInputDispatcher$TouchStream: android.view.MotionEvent getLastEvent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentFilter: java.lang.String getCategory(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: javax.net.ssl.SSLSession getSession(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getAuthenticationInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieEffect: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DialerKeyListener: android.text.method.DialerKeyListener getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingCollection: java.util.Iterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getPointerCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: int getAspectRatio()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView: android.widget.ActivityChooserModel getDataModel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.cookie.CookieOrigin: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CertificateRequest: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstCountBasedBalancePolicies$3: com.google.common.collect.BstNode balance(com.google.common.collect.BstNodeFactory,com.google.common.collect.BstNode,com.google.common.collect.BstNode,com.google.common.collect.BstNode)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getMetaState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstCountBasedBalancePolicies$1: com.google.common.collect.BstNode balance(com.google.common.collect.BstNodeFactory,com.google.common.collect.BstNode,com.google.common.collect.BstNode,com.google.common.collect.BstNode)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstCountBasedBalancePolicies$2: com.google.common.collect.BstNode balance(com.google.common.collect.BstNodeFactory,com.google.common.collect.BstNode,com.google.common.collect.BstNode,com.google.common.collect.BstNode)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ProcessManager: java.lang.ProcessManager getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getMaxMessageCountPerThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentTasksLoader: android.graphics.Bitmap getDefaultThumbnail()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ResourceUtils: float getDimensionOrFraction(android.content.res.TypedArray,int,int,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.IoBridge: java.lang.Object getSocketOption(java.io.FileDescriptor,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.JarEntry: java.security.CodeSigner[] getCodeSigners()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObject: gov.nist.core.Match getMatcher()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpURLConnection: java.lang.String getRequestMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ProgressBar: int getSecondaryProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxListFragment: boolean getEnableHighlight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Mac: byte[] doFinal(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ContainerEncryptionParams: java.security.spec.AlgorithmParameterSpec getMacSpec()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: org.w3c.dom.Element getElementById(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.impl.conn.tsccm.WaitingThreadAborter)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.HttpEntityWrapper: org.apache.http.Header getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpConnection: libcore.net.http.HttpConnection$Address getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: android.widget.RemoteViews getLoadingView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForNonGeoEntity(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: android.graphics.Bitmap getFallbackIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: boolean getShouldDisableView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera: android.hardware.Camera$Parameters getEmptyParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getVerticalScrollbarPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] encrypt(byte,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetServiceImpl: int getUidForPackage(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethod$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FloatArrayBuffer: java.nio.FloatBuffer get(float[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy getAggregatePolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: android.view.WindowInfo getWindowInfo(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.SocketChannelImpl$SocketAdapter: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableDictionary$NextStaticWord: int getFrequency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraManager: com.android.camera.CameraManager$CameraProxy cameraOpen(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.MoveItemsParser: java.lang.String getNewServerId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: boolean getUseCaches()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.effect.FilterEffect: android.filterfw.core.FilterContext getFilterContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsHandler: int getDefaultPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection getDialogs(javax.sip.DialogState)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.EntityEnclosingRequestWrapper: org.apache.http.HttpEntity getEntity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ContactList getContactHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Flag[] getPermanentFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: boolean getUseCompactFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.profiler.HprofData: long getStartMillis()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RAck: int getCSeqNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getShortcutInputMethodsAndSubtypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Toast: int getXOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Overlay: android.media.videoeditor.MediaItem getMediaItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: long getLong(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.io.File getSharedPrefsFile(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getRawAuthority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: int getDimensionPixelOffset(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.TimeoutEvent: javax.sip.Timeout getTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Lists$ReverseList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ProxySelector: java.net.ProxySelector getDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.HardwareRenderer$Gl20Renderer: int[] getConfig(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getRightFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Effect: long getStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: java.util.ArrayList getWorkspaceAndHotseatCellLayouts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieOverlay getOverlay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultimap: java.util.Map asMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: int getRotation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: byte get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.SyncTaskProvider getManualVideoUploadTaskProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceScreen: android.widget.ListAdapter getRootAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getDeviceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: int getWindowSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongValueReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: int getPackageScreenCompatMode(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.MosaicFrameProcessor: byte[] getFinalMosaicNV21()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.NumberFormat getNumberFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRegionElementImpl: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.BaseSurfaceHolder: int getRequestedWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.GestureRecorder getGestureRecorder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFields: int get(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralNames: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbAccessory: java.lang.String getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable: int getGravity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getHorizontalScrollFactor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.AccessibilityIterators$ParagraphTextSegmentIterator: android.view.AccessibilityIterators$ParagraphTextSegmentIterator getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ITransientNotification$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: java.lang.String verifySingleRecipient(android.content.Context,long,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getActivityCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: int getOneTimeInitializationProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFieldsForLoading: float get(java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Date: int getMonth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element getOldestElement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DropdownPopup: java.lang.CharSequence getHintText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMultipart: java.lang.String getSubTypeForTest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.accessibility.KeyCodeDescriptionMapper: com.android.inputmethod.accessibility.KeyCodeDescriptionMapper getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpOptions: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.LexerCore: int getPtr()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.StrikethroughSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebResourceResponse: java.lang.String getMimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstOperations: com.google.common.collect.BstNode insertMax(com.google.common.collect.BstNode,com.google.common.collect.BstNode,com.google.common.collect.BstNodeFactory,com.google.common.collect.BstBalancePolicy)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$InvokeListBox$MyArrayListAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ToggleButton: java.lang.CharSequence getTextOn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.lang.String getPackageCodePath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: int getSystemDecorRectLw(android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getSuggestedMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getAttributePrefix(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: byte[] encodeAsBytes(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout: int getAlignmentMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getUserInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getUseDoubleTree()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiSelector: java.lang.String getString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: java.lang.String getUserInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extensions$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewStub: int getInflatedId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.server.search.Searchables: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: int getCurrentAnimationsCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.HTMLScanner: int getLineNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRecorder: int getAudioSourceMax()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.svc.Svc$Command: java.lang.String name()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.StatusLine: java.lang.String getVersionMajor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getEntryCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDERSubStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.DeskClock$TabsAdapter: android.app.Fragment getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmUtils$ExtendedMetadataParser: java.lang.String get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableDictionary$NextHistoryWord: com.android.inputmethod.latin.ExpandableDictionary$Node getWordNode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.Invert: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONObject: double getDouble(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.dalvik.ddmc.ChunkHandler: java.lang.String getString(java.nio.ByteBuffer,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: int getVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: boolean getReadOnlyPacket()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Validity: java.util.Date getNotAfter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getLastChild()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: com.android.org.bouncycastle.asn1.DERApplicationSpecific getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ShortArrayBuffer: short get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TextToSpeech: java.util.Locale getLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.net.InetAddress getPeerInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoView: boolean getStartWhenPrepared()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$CheckedMap$CheckedEntry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: byte[] getBody()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: byte get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Sensor: int getHandle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.KeyStore: android.security.KeyStore getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.TimeStamp: float getDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.StatusLine: java.lang.String getVersionMinor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: com.android.launcher2.DropTarget getDropTargetDelegate(com.android.launcher2.DropTarget$DragObject)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CertificatePolicies$1: java.util.Collection getValues(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: gov.nist.core.NameValueList getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTransition: int getAlphaMaskResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.util.Map getHeaderFields()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TextToSpeechService$SpeechItem: int getCallerPid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.beans.PropertyChangeEvent: java.lang.Object getOldValue()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.security.cert.Certificate[] getCertificateChain(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.StringWriter: java.lang.StringBuffer getBuffer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider$Transport: android.content.ContentProvider getContentProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: java.lang.Object getApplicationData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.codec.binary.Hex: byte[] decode(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName(android.content.res.Resources)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.BubbleTextView: int getPressedOrFocusedBackgroundPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PServedUser: java.lang.String getSessionCase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: char getChar(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: int getPeerPacketSourcePort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.os.ParcelableCompatCreatorHoneycombMR2: java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: android.content.res.Resources getResources()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Certificate: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String encodeBody()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmEvent: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmSupportInfo: java.util.Iterator getMimeTypeIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.BaseStatusBar: android.view.View$OnLongClickListener getNotificationLongClicker()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.Object getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardTextsSet: java.lang.String getText(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.BassBoost: boolean getStrengthSupported()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarView: java.lang.CharSequence getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.AddressUtils: java.lang.String getFrom(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CertTool: java.lang.String getCertType(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.VertexFrame: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getSentenceInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ImplForArray: java.lang.reflect.Type getGenericComponentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.EditQuickResponseDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: java.net.HttpURLConnection getHttpConnectionToCache()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Overlay: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: java.lang.String getVisitedNetworkID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getListPaddingBottom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl: byte[] engineGenerateSeed(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.MediaLinearLayout: int getSelectedViewPos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: android.view.View getScrollingIndicator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getBulkEncryptionAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPClientTransaction: int getViaPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.BlockGuard$BlockGuardPolicyException: int getPolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.power.DisplayPowerState: float getElectronBeamLevel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.beans.PropertyChangeEvent: java.lang.Object getPropagationId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AccessController: java.security.AccessControlContext getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource getCountryCodeSource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getPeerAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: com.google.android.apps.lightcycle.storage.LocalSessionStorage getLocalSessionStorage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: long getExpires()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.view.accessibility.AccessibilityEvent createAccessibilityEvent(com.android.inputmethod.keyboard.Key,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadsDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.IOExceptionEvent: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.graphics.Rect getSourceBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getParagraphDirection(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.BaseExpandableListAdapter: int getChildType(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ISyncContext$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getCameraFieldOfViewDegrees(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: long getBytesUploaded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RelativeLayout$LayoutParams: int[] getRules()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.TransitionType: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.runner.StandardTestSuiteLoader: java.lang.Class load(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.statusbar.StatusBarNotification: int getUserId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppFilesDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$CustomSortedSetMultimap: java.util.Collection createCollection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getFromTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy computeAggregatePolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstOperations: com.google.common.collect.BstNode insertMin(com.google.common.collect.BstNode,com.google.common.collect.BstNode,com.google.common.collect.BstNodeFactory,com.google.common.collect.BstBalancePolicy)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureStore: int getSequenceType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableCollection: java.util.Iterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: int getRPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.PduLoaderManager: java.lang.String getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.IntentResolverOld: java.util.Set filterSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledTouchSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.KeyStore: byte[] sign(java.lang.String,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ActivityBase$MyAppBridge: com.android.gallery3d.ui.ScreenNail getCameraScreenNail()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PanelHolder: int getChildDrawingOrder(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SystemSensorManager$ListenerDelegate: java.util.List getSensors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.ContentLengthHeader createContentLengthHeader(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.content.Intent getIntent(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPDuplicateHeaderException: gov.nist.javax.sip.header.SIPHeader getSIPHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.YuvImage: byte[] getYuvData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Equalizer: android.media.audiofx.Equalizer$Settings getProperties()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter: org.xml.sax.ErrorHandler getErrorHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemSelectedListener getItemSelectedListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.media.MediaThumbRequest: java.util.Comparator getComparator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.Charset: java.lang.String displayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.GlobalActions$MyAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.auth.x500.X500Principal: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace$WallpaperOffsetInterpolator: float getCurrY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace$WallpaperOffsetInterpolator: float getCurrX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsScrollViewPerformanceHelper: int getHorizontalFadingEdgeLengthCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$SynchronizedList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Bookmarks: java.lang.CharSequence getTitle(android.content.Context,android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.BulletSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.EventLog: java.lang.String getTagName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.GridLayoutAnimationController: int getDirectionPriority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation: android.content.ComponentName getComponentName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IRemoteControlClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultiset: java.util.Set entrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: int getMinimumFractionDigits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.lang.String getString(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.regex.PatternSyntaxException: java.lang.String getPattern()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$BitmapCache: android.graphics.Bitmap getBitmapForId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getWordBeforeCursorIfAtEndOfWord(com.android.inputmethod.latin.SettingsValues)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ServerSocket: int getReceiveBufferSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPRequest createSIPRequest(gov.nist.javax.sip.header.RequestLine,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.Parser: int getValueInt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getMaxHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.util.ListIterator getHeaders(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Collator: int getStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RingtoneManager: int getDefaultType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaHeaderBox: java.lang.String getLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.References: java.lang.String getRel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.ParsePosition: int getErrorIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsApp: com.android.mms.MmsApp getApplication()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Collator: int compare(java.lang.Object,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Integer: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.VMRuntime: long getMinimumHeapSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: android.widget.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int getSessionTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannedString: int getSpanFlags(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.StringUtils: java.lang.String getDurationAsString(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getPaintFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieItem: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.BEROctetStringParser: java.io.InputStream getOctetStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: int[] getSpanForWidget(android.content.Context,android.appwidget.AppWidgetProviderInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.LexerCore: java.lang.String getNextId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.codec.binary.Base64: byte[] discardWhitespace(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: java.lang.Class getDeclaringClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.layout.HVGALayoutParameters: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FloatToByteBufferAdapter: float get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: android.graphics.Matrix getImageMatrix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: java.util.List getMediaItems()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalPressure(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilPlayer: int getCurrentPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent$FilterComparison: android.content.Intent getIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.SensorReader: int getAzimuthInDeg()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getWriteHoldCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalAllocCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker: int getMaxValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaFile: android.media.MediaFile$MediaFileType getFileType(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: java.lang.String getnameinfo(java.net.InetAddress,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getPreferredPackages(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.UnknownFormatConversionException: java.lang.String getConversion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.RouteTracker: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.ProximityInfo: com.android.inputmethod.keyboard.Key[] getNearestKeys(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFields: float get(java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.TextAppearanceSpan: java.lang.String getFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstCountBasedBalancePolicies$2: com.google.common.collect.BstNode combine(com.google.common.collect.BstNodeFactory,com.google.common.collect.BstNode,com.google.common.collect.BstNode)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstCountBasedBalancePolicies$1: com.google.common.collect.BstNode combine(com.google.common.collect.BstNodeFactory,com.google.common.collect.BstNode,com.google.common.collect.BstNode)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.AtomicFile: byte[] readFully()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ComboPreferences: com.android.camera.ComboPreferences get(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingConcurrentMap: java.lang.Object delegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: int getRotation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.content.LocalBroadcastManager: android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getAudioSamplingFrequency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeySpecParser: int getCode(java.lang.String,com.android.inputmethod.keyboard.internal.KeyboardCodesSet)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: int getApplicationTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: java.lang.String getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.Parser: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: int getContentWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModel: byte[] getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: java.io.InputStream getErrorStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.RecordRouteList getRecordRouteHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1GeneralizedTime: org.apache.harmony.security.asn1.ASN1GeneralizedTime getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.AccessibleObject: java.lang.String getSignatureAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebStorageClassic: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IObbActionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.Console: java.io.Console getConsole()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String getToTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: double getDouble(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.util.Locale getLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.MinExpires: int getExpires()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: java.lang.String getUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignerInfo: javax.security.auth.x500.X500Principal getIssuer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker$NullComputingConcurrentMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.MaxForwardsHeader getMaxForwards()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractSortedMultiset: java.util.Set createElementSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.String getUtteranceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.app.IActivityManager$ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MainKeyboardView: java.lang.String getMiddleDisplayName(android.view.inputmethod.InputMethodSubtype)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ViewAnimator: android.view.animation.Animation getOutAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Loader: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.NativeFrame: java.lang.Object getObjectValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getExternalStorageDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.ExemptionMechanism: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Frame: android.filterfw.core.FrameManager getFrameManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: int getTrafficClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.statusbar.IStatusBar$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: int getpid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getLayerType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TimePicker: int getBaseline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: boolean getRetainInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbRequest: java.lang.Object getClientData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.DNParser: java.util.List parse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy: int getNumOfEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.opengl.Shader: int getUniform(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$WrappedSortedSet: java.util.SortedSet getSortedSetDelegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getBottomPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Currency: java.lang.String getCurrencyCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.opengl.GLTexture: int getIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.PhotoCollection: int getNumFrames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.MediaItemView: android.view.View$DragShadowBuilder getShadowBuilder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.util.logging.Logger getGlobal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.PluginManager: java.lang.String getPluginsAPKName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardCircleFramedDrawable: float getScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxFragmentAdapter$CombinedMailboxLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.JarURLConnectionImpl: boolean getDefaultUseCaches()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.CountDownTimer: android.os.CountDownTimer start()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.header.CallIdHeader getCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.Schema: org.ccil.cowan.tagsoup.ElementType getElementType(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: double getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.SecureRandom: byte[] generateSeed(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.MissingFormatWidthException: java.lang.String getFormatSpecifier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.MemInfoReader: long getCachedSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: java.lang.String getIfNoneMatch()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceGroupAdapter: android.preference.Preference getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.view.CompatibilityInfoHolder getCompatibilityInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getDevicesForStream(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.seekbar.ProgressBar: int getProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimerTask: long getWhen()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpURLConnection: boolean getFollowRedirects()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.IconCache: android.graphics.Bitmap getIcon(android.content.ComponentName,android.content.pm.ResolveInfo,java.util.HashMap)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.Semaphore$Sync: int getPermits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getLrParam()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.WorkingMessage: com.android.mms.data.Conversation getConversation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.Eas: java.lang.Double getProtocolVersionDouble(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: java.io.File getDataDirFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: com.android.phone.PhoneGlobals getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieManager: java.lang.String getCookie(android.net.WebAddress)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.util.ZoneInfoDB: java.lang.String[] getAvailableIDs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5Audio$IsPrivateBrowsingEnabledGetter: boolean get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.CursorLoader: java.lang.String[] getProjection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.AttrImpl: org.w3c.dom.Node getParentNode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getDefaultSMSMessagesPerThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ThreadGroup: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.policy.CurrentUserTracker: int getCurrentUserId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: int getAccessibilityViewId(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageItem: int getMmsDownloadStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: android.webkit.WebSettings$PluginState getPluginState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstallerPackageName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.OverlayView: int getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperInfo: java.lang.String getServiceName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: float getAttributeFloatValue(java.lang.String,java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ref.Reference: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.SparseLongArray: long get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaPlayer$TrackInfo: int getTrackType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.KeyUsage: boolean[] getKeyUsage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Reason: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.AccountSelectorAdapter$AccountsLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite getByCode(byte,byte,byte)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker: long getExpireAfterAccessNanos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.Manifest: int getMainAttributesEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.DragEvent: android.content.ClipData getClipData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: int getLayoutResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DropDownAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.TransferPipe: android.os.ParcelFileDescriptor getReadFd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$Action: java.lang.String getUniqueKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.BaseMenuPresenter: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String getUtranCellID3GPP()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipData: android.content.ClipDescription getDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extensions: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],java.net.NetworkInterface)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: int getFailedUnlockAttempts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.WifiDisplayAdapter: android.hardware.display.WifiDisplayStatus getWifiDisplayStatusLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getSecureDataDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActionBar: android.content.Context getThemedContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountSettingsFragment: java.lang.String getTitleFromArgs(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: java.util.List getServices(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractSortedMultiset: java.util.Iterator descendingIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Primitive: com.android.org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.Object[] getSections()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignerInfo: java.util.List getAuthenticatedAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: int getUid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: int getViaPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryInstrumentation(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.content.res.Resources getTopLevelResources(java.lang.String,int,android.content.res.Configuration,android.content.res.CompatibilityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageListFragment: long getAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.preference.PreferenceScreen createPreferenceScreen(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getRotationY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getRotationX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.SecurityManager: int classLoaderDepth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.VideoEditorActivity: com.android.videoeditor.widgets.MediaLinearLayout getMediaLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.ReadRecTransaction: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Key: int getDrawWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.ProtocolVersion: int getMinor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MovieHeaderBox: long getTimescale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getBuiltInZoomControls()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.DraftCache: com.android.mms.util.DraftCache getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CertificateList: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Scheduler: android.filterfw.core.FilterGraph getGraph()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: long getOrCreateThreadId(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$NullEntry: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: float getFraction(int,int,int,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: java.lang.CharSequence getText(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TableRow: int getVirtualChildCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: android.net.Uri getUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: javax.sip.SipProvider createSipProvider(javax.sip.ListeningPoint)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestEncryptionAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$EvictionQueue$1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout$SpannedEllipsizer: java.lang.Object[] getSpans(int,int,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeader: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: int getMinFreshSeconds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResDefaultActivityIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(java.lang.String,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getModifiers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyCharacterMap: int get(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.HardwareRenderer getHardwareRenderer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.BaseSurfaceHolder: android.view.Surface getSurface()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Collection getIssuerAlternativeNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.Recycler$SmsRecycler: long getThreadId(android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getAttributeUnsignedIntValue(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Util: int getCameraOrientation(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature: java.security.Signature getInstance(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractContainerBox: void getContent(java.nio.ByteBuffer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientAlternatesAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: java.lang.String getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IIntentSender$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getScaledWidth(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: int getLevel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.NegativeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModel: int getBegin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine: int getLogRecCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.MultiWaveView: int getTargetResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getPageNearestToPoint(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory getCurrentAccessory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Message getMessage(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromPduBody(android.content.Context,com.google.android.mms.pdu.PduBody)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MovieHeaderBox: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation$ActivityResult: int getResultCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.net.VpnConfig: android.content.Intent getIntentForConfirmation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getPageCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ListPreference: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams getParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: int getDropDownAnimationStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuPopupHelper: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.WebView$HitTestResult getHitTestResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IThumbnailReceiver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.ControlPanelEffect: int[] getParameterIntArray(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridView: int getStretchMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getBottomPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: byte get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.ASN1Boolean getInstance(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.ContentCache$CounterMap: int getCount(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: java.lang.String getVendorSpecificPuaFromAndroidPua(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementTimeImpl: int getBeginConstraints()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ClientSession: javax.obex.Operation get(javax.obex.HeaderSet)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMultipart: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getEndColumn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getSansSerifFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine$LogRec: long getWhat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CheckedTextView: android.graphics.drawable.Drawable getCheckMarkDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getImeActionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: int getVolumeHandling()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: int getAppRenderingMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.DHParameterSpec: int getL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: long getLastModified()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.Name: java.lang.String getName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmManagerClient: java.lang.String[] getAvailableDrmEngines()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.TrafficFlags: int getSmtpFlags(android.content.Context,com.android.emailcommon.provider.Account)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap: java.util.Collection createCollection(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter$MyCursorHelper: android.database.Cursor getCursor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.ByteArrayBuffer: byte[] toByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: int getNavigationItemCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.parser.TokenMgrError: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityEvent: long getEventTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ThreadLocal$Values: java.lang.Object getAfterMiss(java.lang.ThreadLocal)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Sets$CartesianSet$Axis: java.lang.Object getForIndex(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: int getPercentageUploaded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.widget.FrameLayout getFrameForChild()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: long[] getCheckedItemIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasastore.PicasaStoreFacade: com.google.android.picasastore.PicasaStoreFacade get(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: boolean[] getIssuerUniqueID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.JsResult: boolean getResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: boolean getVideoStabilization()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: com.android.internal.telephony.Phone getPhone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.FloatKeyframeSet: java.lang.Object getValue(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.DNParser: char getUTF8()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingCollection: java.lang.Object[] standardToArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getNextMediaItem(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.LightCycleView: android.hardware.Camera$PreviewCallback getPreviewCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.ResponseHeaders: int getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.security.Principal getLocalPrincipal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getSaveFormData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.IntentResolver: java.util.Set filterSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.Store: java.lang.Class getSettingActivityClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.MessagingNotification: long getThreadId(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.SecretKeySpec: java.lang.String getFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: int getDisplayId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaDatabaseHelper: java.lang.String getRealAlbumId(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBitString: com.android.org.bouncycastle.asn1.DERBitString getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.EllipticCurve: byte[] getSeed()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkViews$QueryViewCommand: com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn translateCommand(java.util.List,com.android.commands.monkey.MonkeySourceNetwork$CommandQueue)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFields: short get(java.lang.String,short)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.CollationElementIterator: int getMaxExpansion(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ScrollBarDrawable: boolean getAlwaysDrawHorizontalTrack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: java.util.ArrayList getWorkspaceShortcutItemInfosWithIntent(android.content.Intent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.database.SortCursor: double getDouble(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getVisibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: android.content.Intent createInCallIntent(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.TransitionAlpha: int getRGBFileWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.BinaryTempFileBody: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.graphics.Matrix getMatrix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable getCurrent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableMap: java.lang.Object writeReplace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getDoubleTapTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.AccountSelectorAdapter: java.lang.String getDisplayName(android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSpinner: android.view.View getSelectedView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Serialization: com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.mdat.MediaDataBox: long getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimePlugged()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceRandom: java.lang.String getKeyName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.HttpUtils: java.lang.String getCurrentAcceptLanguage(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScope getAuthScope()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.NtpTrustedTime: long getCachedNtpTimeReference()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.FolderProperties: com.android.email.FolderProperties getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.InputPointers: int[] getTimes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.AttrImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.DialogTimeoutEvent: gov.nist.javax.sip.DialogTimeoutEvent$Reason getReason()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: long getExpiration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.lang.String format(double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.ICU: java.util.Locale[] getAvailableCollatorLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAlbumTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: java.lang.String getDecodedImageFileName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.PipeImpl$PipeSinkChannel: long write(java.nio.ByteBuffer[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmSupportInfo: java.lang.String getDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraActivity: com.android.camera.CameraScreenNail getCameraScreenNail()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.DisplayInfo: int getNaturalWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperInfo: android.content.pm.ServiceInfo getServiceInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.IDisplayManagerCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.VariableSpeed: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getRealm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$TransformedEntriesMultimap$TransformedEntries$1$1: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Currency: java.lang.String getDisplayName(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.runner.BaseTestRunner: java.lang.Class loadSuiteClass(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.content.Intent getIntentBeingBroadcast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteGroup: java.lang.CharSequence getName(android.content.res.Resources)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleCondensed()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.EditableInputConnection: android.text.Editable getEditable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.EngineParameters: int getDecodeBufferInitialSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.KeyStore: byte[] getPubkey(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getRowBytes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.DexFile: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getOpenGlMinFieldOfViewDegrees()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Keyframe$IntKeyframe: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.ThreadAuditor$ThreadHandle: long getPingIntervalInMillisecs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.InsetDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Surface: int getGenerationId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.PublicKey getPublicKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SuggestedWords: java.util.ArrayList getTypedWordAndPreviousSuggestions(java.lang.CharSequence,com.android.inputmethod.latin.SuggestedWords)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: android.graphics.drawable.Drawable getHeaderIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfoCache: android.view.accessibility.AccessibilityNodeInfo get(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignerInfo: java.lang.String getDigestAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IUserSwitchObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socks4Message: java.lang.String getUserId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getLineNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternView: int getSuggestedMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyCharacterMap: char getNumber(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl$15: java.lang.Object createStaticService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.SecurityPolicy: com.android.email.SecurityPolicy getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.IntBuffer: java.nio.IntBuffer get(int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation$ActivityMonitor: android.content.IntentFilter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Matrix2f: float get(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getCheckedItemPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getListPaddingLeft()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TextToSpeech: java.util.Set getFeatures(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.RequestWrapper: int getExecCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$CopiesList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: android.graphics.Rect getVisibleFrameLw()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizePagedView: int getAssociatedLowerPageBound(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.DefaultRouter: javax.sip.address.Hop getOutboundProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.AttributeTypeAndValue$2: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.DisplayAdapter: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: long getStorageId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation$ActivityMonitor: android.app.Activity getLastActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: java.lang.String access$300()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate$1: java.security.Principal getIssuerDN()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.AttributeTypeAndValue$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ISearchManager$Stub$Proxy: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.GlowPadView: int getTargetPosition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.IoBridge: java.net.InetAddress getSocketLocalAddress(java.io.FileDescriptor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews: int getLayoutId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleDependencyTypeBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.TouchDelegate getTouchDelegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableString: java.lang.Object[] getSpans(int,int,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Folder: android.view.View getEditTextRegion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.JsPromptResult: java.lang.String getStringResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.SetupData: java.lang.String getPassword()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getViewHeightWithTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Matrix3f: float get(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramPacket: java.net.InetAddress getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.LocaleSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.content.SharedPreferences$Editor getEditor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: float getPersistedFloat(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalClassInitTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.nio.channels.ServerSocketChannel getChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.PackageSettingBase: java.util.HashSet getDisabledComponents(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker$NullConcurrentMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable: int getMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getSentBy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.BigInt: byte[] bigEndianMagnitude()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.DateFormat getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.ContentInfo$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetFileDescriptor: long getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.Object getExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.preference.PreferenceScreen getPreferenceScreen()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Looper: android.os.Looper getMainLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: int getCacheMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.net.DefaultNetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: int getNumberOfInputs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.BackStackRecord: java.lang.CharSequence getBreadCrumbShortTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipFile: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Matrix4f: float get(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.DisplayAdapter: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.common.widget.CompositeCursorAdapter: int getPartitionCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ParceledListSlice: android.os.Parcelable populateList(java.util.List,android.os.Parcelable$Creator)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getBaseDataOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieItem: android.graphics.Path getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getDuration(com.googlecode.mp4parser.authoring.Track)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Quart$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.NativeFrame: java.nio.ByteBuffer getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension: byte[] getRawExtnValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.BackStackRecord: int getBreadCrumbShortTitleRes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Annotation: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmManagerClient: int getDrmObjectType(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getActivePointers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.PipeImpl$PipeSinkChannel: long write(java.nio.ByteBuffer[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.lang.Runnable getTask()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry getCookieSpecs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Quart$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Quart$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AttributeCache: com.android.server.AttributeCache$Entry get(int,java.lang.String,int,int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle$Control: long getTimeToLive(java.lang.String,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getPersistentApplications(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.content.IntentSender getIntentSender()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerTwoPane: long getUIAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.CipherSpi: java.security.Key engineUnwrap(byte[],java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.EasResponse: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: int getLocationOffset(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RawHeaders: java.lang.String getResponseMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getSecondArgument(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Keyframe$ObjectKeyframe: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.VelocityTracker: float getYVelocity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: android.app.Fragment getTargetFragment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.ViewPager: int getCurrentItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.HopImpl: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ServerHelloDone: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: java.util.ArrayList getFocusables(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignerInfo$2: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilMediaElementImpl: org.w3c.dom.smil.TimeList getBegin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: int getPixelFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Window: android.content.res.TypedArray getWindowStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.AsYouTypeFormatter: int getRememberedPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmEvent: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERInteger: java.math.BigInteger getPositiveValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getCrtCoefficient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.ManageSimMessages: android.database.Cursor access$102(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.SpellCheckSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getPattern()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.PreferenceGroup: com.android.camera.CameraPreference get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ProgressBar$RefreshData: android.widget.ProgressBar$RefreshData getNextPoolable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$MapMultimap$AsMapEntries$1$1: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: java.lang.String getFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: int getPortClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.MediaItemUtils: long getMinimumMediaItemDuration(com.android.videoeditor.service.MovieMediaItem)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalClassInitCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getHttpSocketTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.PropertyBoxParserImpl$FourCcToBox: java.lang.String[] getParam()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: int getuid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float getLineWidth(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.OverScroller: float getCurrVelocity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.util.Iterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralNames: java.util.List getNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker: com.google.common.collect.MapMakerInternalMap$Strength getValueStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getAutoLinkMask()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: java.lang.String getTransferEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: long getDateCreated()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.RDN[] getRDNs(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.AnimatedRotateDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Canvas lockCanvas()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MovieHeaderBox: double getRate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.DatePicker: boolean getSpinnersShown()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.InsetDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: int getSlideSettingsDirection(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.TrafficFlags: int getAttachmentFlags(android.content.Context,com.android.emailcommon.provider.Account)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getCompanyName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioRecord: int getChannelConfiguration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.ThumbnailManager: android.graphics.Bitmap access$300()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView$ScrollInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ConnectionState: int getMinFragmentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.MessagingController: com.android.email.MessagingController getInstance(android.content.Context,com.android.email.Controller)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SubscriptionState: java.lang.String getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getProtectionStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmRights: java.lang.String getAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.VelocityTracker$Estimator: float getYCoeff(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URISyntaxException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectParser(int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getUndeclaredThrowable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: int getChunkLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.io.File getExternalCacheDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,android.graphics.Paint)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.ImageSpan: java.lang.String getSource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner: int getDropDownVerticalOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.WindowOrientationListener$SensorEventListenerImpl: int getProposedRotation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: int getDisplayNameId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ConnectionState: int getContentSize(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Mesh: android.renderscript.Allocation getVertexAllocation(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapTempFileLiteral: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.ByteArrayBuffer: byte[] buffer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.DisplayContent: int getDisplayId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: com.android.launcher2.ShortcutAndWidgetContainer getShortcutsAndWidgets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyStylesSet$EmptyKeyStyle: java.lang.String getString(android.content.res.TypedArray,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getMinute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$Viewport$ViewportWindow: int getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.settings.SettingsHelper: byte[] getLocaleData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.PackageParser: int getParseError()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getNextPage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountServiceListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.BreakIterator: java.text.BreakIterator getSentenceInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.SendingProgressTokenManager: long get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.PolicyConstraints: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: float getRightFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.FrameLayout: android.graphics.drawable.Drawable getForeground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame retainFrame(android.filterfw.core.Frame)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateFormat: java.text.DateFormat getDateFormatForSetting(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.common.widget.CompositeCursorAdapter: android.database.Cursor getCursor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1UTCTime: org.apache.harmony.security.asn1.ASN1UTCTime getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: java.lang.String getSuggestPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasastore.FIFEUtil: java.lang.String getImageUrlOptions(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorImpl: java.util.List getAllMediaItems()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$5: int getGravityOffset(android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentEncoding: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$ViewPaddingAction: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker: int getSolidColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getGenerationId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.Parser: org.xml.sax.DTDHandler getDTDHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$3: int getGravityOffset(android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$4: int getGravityOffset(android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.MemoryFile: java.io.FileDescriptor getFileDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getNativeFrameCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Fragment,android.content.Intent,int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.Layout getLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameManager: android.filterfw.core.Frame duplicateFrameToTarget(android.filterfw.core.Frame,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.StateListDrawable: int getStateCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Hotseat: int getCellYFromOrder(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getCurrentPage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.CycleInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PhoneStatusBar$FastColorDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.MetaKeyKeyListener: int getMetaState(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetManager: android.os.Bundle getAppWidgetOptions(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: int getAppVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountSettings$LoginWarningDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: long inputDispatchingTimedOut(int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getDatabasePath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.inputmethodservice.Keyboard: int getKeyWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$Bounds: int getOffset(android.widget.GridLayout,android.view.View,android.widget.GridLayout$Alignment,int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.UriPermissionOwner: android.os.Binder getExternalTokenLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionSettings: java.lang.String getProxyAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: com.android.org.bouncycastle.asn1.ASN1Primitive getObject(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: int getItemLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.regex.PatternSyntaxException: java.lang.String getDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultimap: java.util.Collection removeAll(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentDisposition: java.lang.String getContentDisposition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.HeaderGroup: org.apache.http.Header getFirstHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: long getSerialNumberForUser(android.os.UserHandle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.System: java.util.Properties getProperties()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.SubjectPublicKeyInfo: java.security.PublicKey getPublicKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRegionElementImpl: java.lang.String getBackgroundColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.CharacterPickerDialog$OptionsAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.IResultReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.ThumbnailManager: android.graphics.Bitmap access$200()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl$1: org.w3c.dom.smil.ElementTime getParentElementTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: int getGeneratedClipWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SerializedFrame: int[] getInts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.util.ArrayList getParamNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getPrimaryActivePointerId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.Header[] getFooters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine: java.lang.String getWhatToString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.effect.FilterEffect: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: long getTrackId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.DownloadProvider$SqlSelection: java.lang.String getSelection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.RotateDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.mail.PackedString$Builder: java.lang.String get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: android.media.videoeditor.Transition getBeginTransition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.StateListDrawable: int getStateDrawableIndex(int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.RuleBasedCollator: java.text.CollationElementIterator getCollationElementIterator(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$SetOnClickFillInIntent: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.KeyStore: long getmtime(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmInfo: java.lang.Object get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RawHeaders: java.lang.String getStatusLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.Package[] getPackages()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: char getChar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.FolderProperties: java.lang.String getDisplayName(int,long,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalTouchMinor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ArrayAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.BERSetParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.makedict.FusionDictionary$CharGroup: com.android.inputmethod.latin.makedict.FusionDictionary$WeightedString getBigram(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$BlendDstFunc getBlendDstFunc()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int[] getBlockEndLines()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IBackupManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.seekbar.AbsSeekBar: int getThumbOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageVolume: int getDescriptionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardMultiUserAvatar: android.content.pm.UserInfo getUserInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: java.lang.String getRecipients(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.UiModeManager: int getCurrentModeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.PointerTracker getPointerTracker(int,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraManager$CameraProxy: android.hardware.Camera$Parameters getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: float getMaxScrollProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPSchemaRegistryImpl$1: java.lang.String getNamespace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IWallpaperManager$Stub$Proxy: int getHeightHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: java.lang.Class getObjectClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.util.Locale[] getAvailableLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: byte[] getSessionData(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.GLSurfaceView$GLThread: int getRenderMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getStatusResponseTextOrEmpty()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: byte[] concatArrays(byte[][])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getRequestMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.database.SortCursor: float getFloat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: byte getByteExtra(java.lang.String,byte)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView$RecycleBin: android.view.View getTransientStateView(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: int getNumberOfOutputs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ComputingConcurrentHashMap$ComputedReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewPropertyAnimator: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageProcessor: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TtsEngines: java.lang.String getHighestRankedEngineName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapList getKeyedListOrEmpty(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.MimeVersion: int getMinorVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getNonce()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.content.ComponentName getCallingActivity(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.PrivilegedActionException: java.lang.Exception getException()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: com.android.internal.widget.LockPatternUtils getLockPatternUtils()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMessage: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: android.graphics.Bitmap getThumbnail(int,int,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.LayerDrawable: int getId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Utilities: android.graphics.Bitmap createIconBitmap(android.graphics.drawable.Drawable,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.JarURLConnectionImpl: java.util.jar.JarEntry getJarEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.TaskStackBuilder: int getIntentCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView: int getHeaderViewsCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.DropBoxManager$Entry: java.lang.String getText(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Animator: java.util.ArrayList getListeners()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString$AttributedIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.FloatKeyframeSet: float getFloatValue(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.AccountSelectorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getExternalStorageAppCacheDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.os.IBinder getApplicationWindowToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ResizableIntArray: int[] getPrimitiveArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ContainerEncryptionParams: javax.crypto.SecretKey getEncryptionKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatFlagsException: java.lang.String getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$Viewport$ViewportWindow: android.graphics.Rect getBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.LabeledIntent: java.lang.CharSequence getNonLocalizedLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Keyboard: com.android.inputmethod.keyboard.Key getKey(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieItem: int getInnerRadius()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieManager: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: java.lang.String getQuery()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getMasterMaxVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getQuery()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.auth.AuthScope: java.lang.String getRealm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONObject: int getInt(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: float getTextRunAdvances(java.lang.String,int,int,int,int,int,float[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractClientConnAdapter: int getSocketTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ComboPreferences: java.util.Map getAll()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: int getSendBufferSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.io.File getDatabasePath(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientAlternatesAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.MultiWaveView: int getTargetDescriptionsResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSpinner: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Util: int getDisplayOrientation(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Integer getPropertyInteger(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor getRequestExecutor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getSigningAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: java.util.List getRecentTasks(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: java.lang.String getScaledImageFileName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug$MemoryInfo: java.lang.String getOtherLabel(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.ShortcutManager: android.content.Intent getIntent(android.view.KeyCharacterMap,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.IDisplayManager$Stub$Proxy: android.view.DisplayInfo getDisplayInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.JniUtil: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: java.lang.String[] getAvailableIDs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.EngineParameters: float getWindowDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternView: int getSuggestedMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getActivePointerCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetAddress: java.lang.String getHostAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SortedMultisets$DescendingMultiset: java.util.Set createEntrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: long getLineRangeForDraw(android.graphics.Canvas)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config,int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.Privacy: java.lang.String getPrivacy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.TimePicker: int getMinutes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RSeq: long getSeqNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getTop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: int getStringInfo(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.BEROctetString: java.util.Enumeration getObjects()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetManager: java.lang.CharSequence getPooledString(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getToolMajor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: boolean getEnableExchangeFileLogging()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.Utility: java.lang.Integer getFirstRowInt(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Integer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getLineEnd(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieRenderer$LinearAnimation: float getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: java.lang.CharSequence getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Keyframe: java.lang.Class getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.LocatorImpl: int getColumnNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: java.lang.Object getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModel: int getSeekTo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: java.lang.String getOriginalUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.DefaultMapStorage: int getPrefix(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IDisplayContentChangeListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: java.lang.String getAttributeNS(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.runner.BaseTestRunner: java.util.Properties getPreferences()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.String getSignatureAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.FastScroller: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.tablet.TabletStatusBar: int getStatusBarHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getVerticalScrollFactor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DEREnumerated: com.android.org.bouncycastle.asn1.DEREnumerated getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.DrawableHolder: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getLocalName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: com.android.gallery3d.common.Fingerprint getFingerprint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.ResponseEventExt: gov.nist.javax.sip.ClientTransactionExt getOriginalTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaDatabaseHelper: java.lang.String getUserAccount(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.math.Matrix3x3d: double get(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: int getPeerPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.os.ParcelableCompat$CompatCreator: java.lang.Object createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Lists$CharSequenceAsList: java.lang.Character get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.Settings: java.lang.String getInstallerPackageNameLPr(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: int getgid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.BasicConstraints$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieEffect: long getStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getDistance(android.graphics.Rect,android.graphics.Rect,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: int getAudioType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: int getNextRequestCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getEarlyDialogId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.annotation.Annotation[] getDeclaredAnnotations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.RegionMediaModel: com.android.mms.model.RegionModel getRegion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: java.lang.String getAcceptEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.address.Address getLocalParty()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: boolean getPackageAskScreenCompat(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getVideoLevel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.StackTraceElement: java.lang.String getMethodName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertStore: java.util.Collection getCRLs(java.security.cert.CRLSelector)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.TimeImpl: boolean getResolved()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Gravity: int getAbsoluteGravity(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker: int getConcurrencyLevel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: javax.net.ssl.SSLSession getSession(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.util.List getHeaderList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.CursorLoader: java.lang.String getSortOrder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient getRemoteControlClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getAssociatedLowerPageBound(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.EngineParameters: int getAudioStreamType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getToolMinor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getProxyHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace$ZoomInInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: int getChildrenCount(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.Touch: int getInitialScrollY(android.widget.TextView,android.text.Spannable)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.Touch: int getInitialScrollX(android.widget.TextView,android.text.Spannable)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getExternalStorageAndroidDataDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.ResourceHelper: int getAccountColorId(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CompoundButton: android.os.Parcelable onSaveInstanceState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.RetrieveTransaction: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Sensor: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: android.text.Layout$Directions getLineDirections(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$MapMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SuggestedWords: java.lang.String getWord(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.PowerManager: int getMinimumScreenBrightnessSetting()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.InputSource: java.io.Reader getCharacterStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebStorage$Origin: java.lang.String getOrigin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERGeneralString: com.android.org.bouncycastle.asn1.DERGeneralString getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiDevice: java.lang.String getLastTraversedText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: int getVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternUtils: int getCurrentUser()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.ContentCache$CachedCursor: android.database.CursorWindow getWindow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERExternal: int getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageListItemCoordinates: int getHeight(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.JarURLConnectionImpl: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.DatePicker: boolean getCalendarViewShown()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ContainerEncryptionParams: long getDataEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: java.lang.String getEmailGateway()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.LongToByteBufferAdapter: java.nio.LongBuffer get(long[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Canvas: int getDisplayList(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: float getFloat(java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Bookmarks: java.lang.CharSequence getLabelForFolder(android.content.res.Resources,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: int[] getRunningUserIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMessage: java.lang.String getDisposition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IInputFilter$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getBottomPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Formatter$FormatToken: int getPrecision()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.BlendFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Set getNonCriticalExtensionOIDs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.TransitionType: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.To: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableDictionary$NextStaticWord: com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams getFcParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DialogFragment: android.app.Dialog getDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.ProjectPickerAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.BigInteger: java.math.BigInteger copy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ToRGBAFilter: android.filterfw.core.FrameFormat getConvertedFormat(android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: java.io.FileDescriptor getFileDescriptor$()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUTCTime: java.lang.String getTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.app.ContextImpl getImpl(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.RecipientsEditor: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureLibrary: android.gesture.Learner getLearner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Reason: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: boolean getEnabled()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewGridLayout: int getPageChildCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.EmailProvider: android.database.sqlite.SQLiteDatabase getReadableDatabase(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.framework.TestCase: junit.framework.TestResult run()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Annotation: java.lang.String getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.StringBlock: java.lang.CharSequence get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: android.view.animation.Animation clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Surface$CompatibleCanvas: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: int[] getPackageGids(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.SignatureSpi: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.AnticipateInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicRequestLine: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: long getDownTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Window: android.view.WindowManager getWindowManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponseFactory createHttpResponseFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserModel: int getActivityCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.HttpEntityWrapper: org.apache.http.Header getContentEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Set getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.Via getTopmostVia()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.BasicConstraints: int getPathLenConstraint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(boolean,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getMaxActivityCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapTempFileLiteral: java.io.InputStream getAsStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getAttributeType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] getStackFrames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.FocusOverlayManager: java.util.List getFocusAreas()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.ClientConnectionManager getManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioService$SetModeDeathHandler: int getPid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getSampleRate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getTargetDescriptionsResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.Presenter: com.android.mms.ui.ViewInterface getView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getBandwidthTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.CountOutputStream: int getBytesWritten()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.FastXmlSerializer: java.lang.Object getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.DialogPreference: android.graphics.drawable.Drawable getDialogIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: android.view.MotionEvent getLastInjectedHoverEventForClick()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: android.content.Intent createPhoneEndIntentUsingCallOrigin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getSelectionEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.BounceInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ArrayAdapter: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.SimpleTimeZone: int getOffset(int,int,int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.PropertyValuesHolder: java.lang.String getMethodName(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageOrderManager: long getCurrentMessageId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.WindowOrientationListener: int getProposedRotation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getPaddingLeft()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.beans.PropertyChangeSupport: java.beans.PropertyChangeListener[] getPropertyChangeListeners()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.ControlPanelEffect: int getParameterInt(android.content.Context,java.lang.String,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.DecoderCapabilities: java.util.List getVideoDecoders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.EmailProvider: android.database.Cursor notificationQuery(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioRecord: int getAudioFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.ByteArrayEntity: long getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.DecoderCapabilities: java.util.List getAudioDecoders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragView: android.graphics.Rect getDragRegion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getRawLayoutDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.BubbleTextView: android.graphics.Bitmap getPressedOrFocusedBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: int getInt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Mesh$Builder: int getCurrentVertexTypeIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager: java.io.File access$000()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getActionCode(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getDeclaredAnnotations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: long getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.EditText: android.text.method.MovementMethod getDefaultMovementMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: float getCurrentSpanY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: float getCurrentSpanX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: int getMaximumFractionDigits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getPreviousSibling()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: long getLastInjectedDownEventTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: int getNavigationMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SortedMultisets$DescendingMultiset: java.util.Set entrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Transition: android.media.videoeditor.MediaItem getBeforeMediaItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Organization: java.lang.String getOrganization()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Set: java.util.Enumeration getObjects()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getTheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getMinWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Dictionary: int getFrequency(java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.BEROctetString: byte[] getOctets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Lists$ReverseList: java.util.List getForwardList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowSession$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyFactory: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.DefaultRouter: javax.sip.address.Hop getNextHop(javax.sip.message.Request)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ContentType getContentTypeHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiDevice: java.lang.String getCurrentActivityName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientChip: java.lang.CharSequence getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.util.Set handleKeySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTransition: int getSlidingDirection()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.os.IBinder getActivityToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalExternalAllocCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.BreakIterator: java.text.BreakIterator getLineInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getSelectionStart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SharedPreferencesImpl: java.util.Map getAll()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: long getLastModified()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.TrackMetaData: int getGroup()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.RuleBasedCollatorICU: libcore.icu.CollationElementIteratorICU getCollationElementIterator(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.PointerTracker: int getLastY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.PointerTracker: int getLastX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Program: int getConstantCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipData$Item: java.lang.CharSequence getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityGroup: android.app.LocalActivityManager getLocalActivityManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplay: java.lang.String getDeviceName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.Rect getConstantPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.utils.ObjectIdentifier: java.lang.Object getGroup()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.GenericURI: java.lang.String getScheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.AudioTrackLinearLayout: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Equalizer: short[] getBandLevelRange()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridView: int getVerticalSpacing()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.Schema: org.ccil.cowan.tagsoup.ElementType rootElementType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LocalActivityManager: java.lang.String getCurrentId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: long getBytesTotal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragController: long getLastGestureUpTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo getInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.header.Via getViaHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageProcessor: int getMaximumMessageSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionBundle: int getTransactionType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.preference.PreferenceManager$OnPreferenceTreeClickListener getOnPreferenceTreeClickListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay[] getAvailableDisplays()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getParagraphDirection(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.AtomicFile: byte[] readFully()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageProcessor: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.LayoutModel: int getLayoutHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.AnimatedRotateDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getAlternateFor(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherApplication: com.android.launcher2.LauncherProvider getLauncherProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.RegionModel: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Virtualizer: short getRoundedStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.IconListPreference: int[] getLargeIconIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.BaseInputConnection: int getCursorCapsMode(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String getICID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.HardwareLayer: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieItem: java.util.List getItems()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: android.app.ActionBar$Tab getTabAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ServerOperation: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultimap: java.util.Collection entries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoFullScreen: int getBufferPercentage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: java.util.Set keySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.CopyOnWriteArrayList$CowSubList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.ItemOperationsParser: int getStatusCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: int getSampleDependsOn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.GlowPadView: int getTargetResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.app.TaskStackBuilderHoneycomb: android.app.PendingIntent getActivitiesPendingIntent(android.content.Context,int,android.content.Intent[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.View getRootView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation$ActivityMonitor: int getHits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.GenericInflater: android.preference.GenericInflater$Factory getFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: int getBouncerAnimationDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUser(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DOMImplementation getImplementation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.FixedLengthInputStream: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.StringEntity: java.io.InputStream getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.MimeTypeMap: java.lang.String getExtensionFromMimeType(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceFragment: android.preference.PreferenceManager getPreferenceManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.FolderProperties: java.lang.String getDisplayName(android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelephoneNumber: java.lang.String getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.Plugin: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: boolean getEncodeUTF16BE()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.VertexFrame: int[] getInts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.WordIterator: int getEnd(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.ClassLoader getClassLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socks4Message: int getIP()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.utils.JarUtils: java.security.cert.Certificate[] verifySignature(java.io.InputStream,java.io.InputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$SetEmptyView: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.CallNotifier: boolean getVoicePrivacyState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.xpath.XMPPathSegment: int getAliasForm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.GaiException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: int getInt(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderNative: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: java.lang.String getUaProfUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.PasswordTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: byte[] doFinal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.IconListPreference: int getSingleIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: int getDisplayId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.Object getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getAssociationType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TextToSpeech: java.lang.String getCurrentEngine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.Token: int getTokenType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplay: java.lang.String getDeviceAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1ParsingException: java.lang.Throwable getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewDatabaseClassic: android.webkit.WebViewDatabaseClassic getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl: javax.sip.ClientTransaction handleChallenge(javax.sip.message.Response,javax.sip.ClientTransaction,javax.sip.SipProvider,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.WorkingMessage: java.lang.String getWorkingRecipients()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ProcessManager$ProcessImpl: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Date getNotBefore()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: android.bluetooth.IBluetoothHeadsetPhone getBluetoothPhoneService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection$DefaultContentHandler: java.lang.Object getContent(java.net.URLConnection)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AlgorithmParameters: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getPublicId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CallbackProxy: android.webkit.WebBackForwardListClassic getBackForwardList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaScanner$WplHandler: org.xml.sax.ContentHandler getContentHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.DownloadHandler: long getCurrentSpeed(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: long getInputDispatchingTimeoutNanos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.lang.String[] getMonths()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDefaultDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Sine$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.TimedText: java.lang.String getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: int getTitleMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Sine$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Collator: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Sine$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: com.android.launcher2.DragLayer getDragLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractListMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Hashtable$HashIterator: java.util.Hashtable$HashtableEntry nextEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: java.lang.String getKeywords()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.utils.ObjectIdentifier: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Authenticator: java.net.URL getRequestingURL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: java.lang.String getResourceBundleName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.OverlayFrame: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.ContentCache$CachedCursor: int getPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> android.permission.READ_PHONE_STATE android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.ACCESS_COARSE_LOCATION android.permission.ACCESS_NETWORK_STATE - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ContainerEncryptionParams: java.lang.String getEncryptionAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyboardView: float getLabelWidth(java.lang.String,android.graphics.Paint)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.ISchedulingPolicyService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getCompoundPaddingEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.IUsbManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: int getMessageCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.parser.StringMsgParser: gov.nist.javax.sip.header.SIPHeader parseSIPHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Canvas: int getSaveCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleSizeBox: long getSampleSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: android.os.Vibrator getVibrator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractSortedSetMultimap: java.util.Collection createCollection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.SetupData: com.android.emailcommon.provider.Policy getPolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.ResourceHelper: android.graphics.Paint getAccountColorPaint(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.params.AbstractHttpParams: double getDoubleParameter(java.lang.String,double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getPressure()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEditTextView: com.android.ex.chips.RecipientChip[] getSortedRecipients()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$1: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SettingsActivity: android.content.Intent getIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherApplication: java.lang.String getSharedPreferencesKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.RetryAfterHeader createRetryAfterHeader(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideModel: com.android.mms.model.ImageModel getImage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getUnicodeChar(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.util.ListIterator listIterator(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.mdat.SampleList: java.util.Map getOffsets(com.coremedia.iso.boxes.fragment.MovieFragmentBox,long,com.coremedia.iso.boxes.fragment.TrackExtendsBox)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplayStatus: int getActiveDisplayState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.os.Looper getMainLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackRunBox$Entry: int getSampleCompositionTimeOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ContextThemeWrapper: android.content.res.Resources getResources()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getLocalPart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityOptions: int getStartHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Format: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap: java.util.Iterator createEntryIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUTCTime: com.android.org.bouncycastle.asn1.ASN1UTCTime getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.SubjectKeyIdentifier: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: java.lang.reflect.Type parseFieldTypeSignature()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: java.lang.String getLocalPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.ResponseHeaders: java.util.Date getServedDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ColorTemperatureFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getWindowId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.Utils: java.lang.String getSignature()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: java.math.BigInteger getAuthorityCertSerialNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner getEventScanner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyCharacterMap: int getKeyboardType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socks4Message: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.Name: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] getRandom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.RuleBasedCollator: java.text.CollationKey getCollationKey(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: double getDouble(java.lang.String,double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: int getIndex(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: java.io.InputStream getResponseBody()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getHistorySize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.ListPreference: java.lang.CharSequence[] getEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpConnection$Address: java.net.Proxy getProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView$ArrowScrollFocusResult: int getSelectedPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: boolean getEncodeUTF16LE()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.NamespaceSupport: java.util.Enumeration getPrefixes(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Utils: java.lang.String getDebugInfo(com.android.inputmethod.latin.SuggestedWords,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Window: int getForcedWindowFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.AutoFixFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat: int getPointerCount(android.view.MotionEvent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetFileDescriptor: long getStartOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureStore: int getOrientationStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.SyncTask: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.OverlaysAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getAllowContentAccess()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.os.IBinder getIBinderExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: int getOrder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.ImageSpan: android.graphics.drawable.Drawable getDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MiniThumbFile: byte[] getMiniThumbFromFile(long,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getPostDial()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.IAccessibilityManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.io.pem.PemWriter: int getOutputSize(com.android.org.bouncycastle.util.io.pem.PemObject)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.String getAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Message: java.lang.Runnable getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaSyncHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout$ViewCluster: int[] getRightEdge()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: java.util.Date getCreationDate(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ProcessBuilder: java.util.List command()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.GLSurfaceView: int getRenderMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.DERBoolean getInstance(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CompoundButton: int getHorizontalOffsetForDrawables()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer: int getMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: org.apache.http.HttpEntity getEntity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.RecipientsEditor: java.util.List getNumbers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: java.util.Locale[] getAvailableLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.utils.Array: java.lang.String getBytesAsString(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Enum$1: java.lang.Object create(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult getCacheFile(java.lang.String,long,java.util.Map)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ServerSocket: boolean getReuseAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getReceivedPointerDownCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalToolMinor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraActivity: long getShutterLag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$400(com.android.ex.chips.BaseRecipientAdapter,boolean,java.util.LinkedHashMap,java.util.List,java.util.Set)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IRemoteCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaPlayer: java.lang.String getStringParameter(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.NamespaceSupport$Context: java.lang.String getPrefix(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getMediaItem(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.ITextToSpeechCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.FragmentManagerImpl: java.util.ArrayList retainNonConfig()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Switch: java.lang.CharSequence getTextOn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMap: java.util.Collection values()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewCellLayout: int getWidthBeforeFirstLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Canvas: android.graphics.Rect getClipBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getRawY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getRawX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getX(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getY(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableList$ReverseImmutableList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: int getFrontActivityScreenCompatMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getTBSCertificate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.BackStackRecord: java.lang.CharSequence getBreadCrumbTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.SipCallOptionHandler: android.app.Dialog onCreateDialog(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilMediaElementImpl$1: org.w3c.dom.smil.ElementTime getParentElementTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.screenshot.GlobalScreenshot$10: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageUtils: java.lang.String getMessageDetails(android.content.Context,android.database.Cursor,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.parser.Parser: java.lang.String method()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Dialog: android.view.Window getWindow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: int getVolumeMax()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: int getVideoCodecType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject$Download: java.lang.String getMediaUri()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERIA5String: byte[] getOctets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.base.FrameBranch: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IOnKeyguardExitResult$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.UnsupportedCharsetException: java.lang.String getCharsetName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.VertexFrame: java.nio.ByteBuffer getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.FastScroller: int getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.TrustAnchor: java.lang.String getCAName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelephoneNumber: java.lang.String getIsdnSubaddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.Parser: byte[] getValueBytes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FolderIcon: com.android.launcher2.FolderInfo getFolderInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: java.util.List getActiveAdmins()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AccessControlException: java.security.Permission getPermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.EasyEditSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: int getPasswordTextViewId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getBuiltInZoomControls()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: boolean getSort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: int getProviderNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.AttachmentUtilities: java.io.File getAttachmentFilename(android.content.Context,long,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.NamespaceSupport$Context: java.util.Enumeration getPrefixes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.HostPort: gov.nist.core.Host getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.Time: int getActualMaximum(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapList getListOrEmpty(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentLength: int getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CallbackProxy$UploadFileMessageData: java.lang.String getCapture()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerNative: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getPublicId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.graphics.drawable.Drawable loadDrawable(android.util.TypedValue,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getFileType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.DrmConvertSession: byte[] convert(byte[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner: int getDropDownHorizontalOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountService$Stub$Proxy: java.lang.String[] getSecureContainerList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: short[] getShortArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetService: android.widget.RemoteViews getAppWidgetViews(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Formatter$FormatToken: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.System: java.util.Map getenv()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.BufferedHttpEntity: java.io.InputStream getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyboardView: com.android.inputmethod.keyboard.Keyboard getKeyboard()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.Reader: long skip(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerBase: long getMessageId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: int getAndroidPuaFromVendorSpecificPua(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiDevice: java.lang.String getProductName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.OutputStreamWriter: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Parcel: java.lang.CharSequence readCharSequence()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetService: android.os.Bundle getAppWidgetOptions(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.FullContainerBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.BaseAdapterWithImages: java.util.List access$100(com.android.videoeditor.BaseAdapterWithImages)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getSamplesPerChunk()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Choice: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.BERSequenceParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.EffectColor: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageChannel: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: boolean getForceOneMinuteRefresh()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.fortress.Services: java.util.List getProvidersList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelephoneNumber: java.util.Iterator getParameterNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapMemoryLiteral: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.L10nUtils: java.lang.String getLocalisedString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewDebug: long getViewRootImplCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getFixedFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.Plugin: java.lang.String getFileName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.IOExceptionEvent: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.connectivity.Tethering: int getLastTetherError(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$Spec: int getFlexibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.CountDownLatch$Sync: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HorizontalScrollView: float getLeftFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.AttrImpl: java.lang.String getNodeName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: int[] getInputDeviceIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: int[] getStorageIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PhoneStatusBar: int getStatusBarHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: int getPreferredOptionsPanelGravity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getKeyWidth(android.content.res.TypedArray,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppDataDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.BaseMenuPresenter: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Utilities: android.graphics.Bitmap resampleIconBitmap(android.graphics.Bitmap,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Flag[] getPermanentFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.content.res.Resources getTopLevelResources(java.lang.String,int,android.content.res.Configuration,android.app.LoadedApk)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Sensor: java.lang.String getVendor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.net.DefaultNetworkLayer: javax.net.ssl.SSLServerSocket createSSLServerSocket(int,int,java.net.InetAddress)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessagesAdapter$SearchResultsCursor: int getResultsCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ServerOperation: long getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IAudioFocusDispatcher$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaDatabaseHelper: com.google.android.picasasync.AlbumEntry getAlbumEntry(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.RotateDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Alarms: com.android.deskclock.Alarm getAlarm(android.content.ContentResolver,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Typeface: int getStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: int getDeviceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList: java.util.List getRevokedCertificates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.StringTokenizer: char getNextChar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmUtils: byte[] readBytes(java.io.File)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.AccelerateDecelerateInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractMap: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: boolean[] getIssuerUniqueID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: int getKeyboardType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.Utility: com.android.emailcommon.provider.Account findExistingAccount(android.content.Context,long,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.RouteList getRouteHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERGeneralString: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: int getPeerPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmUtils: android.drm.DrmUtils$ExtendedMetadataParser getExtendedMetadataParser(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getOutAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.graphics.Bitmap getDrawingCache()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.CSeqHeader createCSeqHeader(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ShortToByteBufferAdapter: short get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: boolean getXmlStandalone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.SlideshowActivity$SmilPlayerController: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.SoundClips: com.android.camera.SoundClips$Player getPlayer(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.HardwareRenderer: android.view.HardwareRenderer createGlRenderer(int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Encodable[] toArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.DateSorter: int getIndex(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetServiceImpl: java.util.List getInstalledProviders(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEntry: int getHash()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeSwitcher: android.view.inputmethod.InputMethodSubtype getCurrentSubtype()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.CompatModePackages: java.util.HashMap getPackages()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.TimeUtils: java.util.ArrayList getTimeZonesWithUniqueOffsets(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageMoveObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$FocusTransitionDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SortedMultisets$ElementSet: java.util.SortedSet headSet(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IApplicationToken$Stub$Proxy: long getKeyDispatchingTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.Join: java.lang.String getToTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.BluetoothPhoneService$3: java.lang.String getSubscriberNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo getWordInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Util: android.hardware.Camera$Size getOptimalPreviewSize(android.app.Activity,java.util.List,double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.ReplacementTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PServedUser: java.lang.String getRegistrationState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.TypedValue: float getFraction(float,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.InitManifest: int getPos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRegionMediaElementImpl: org.w3c.dom.smil.SMILRegionElement getRegion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERIA5String: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float getLineMax(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPRequest createACKRequest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AddressParametersHeader: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.LabeledIntent: int getIconResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Equalizer: int[] getBandFreqRange(short)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: float getX(android.view.MotionEvent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: float getY(android.view.MotionEvent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetAddress: java.net.InetAddress getLocalHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: int getTTL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.WorldClockAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: java.lang.String getSuggestSelection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.CompositionTimeToSample: java.util.List getEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SortedMultisets$ElementSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager: float getInclination(float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeDecimalFormat: int getMaximumIntegerDigits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodReadObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int[] getDrawableState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridView: android.widget.Adapter getAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.ViewPager$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.BaseSurfaceHolder: int getRequestedType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.MenuInflater getMenuInflater()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: java.lang.CharSequence getTelephonyPlmn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarView: int getDisplayOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] wrap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ColorDrawable$ColorState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieTransition getBeginTransition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SearchView: int getMaxWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFields: double get(java.lang.String,double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.FolderProperties: java.lang.String getDisplayName(com.android.emailcommon.provider.Mailbox)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getMaxZoom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PhoneStatusBar: int getStatusBarGravity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: android.view.View getEmptyView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.SingleLineTransformationMethod: char[] getReplacement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNoInternationalDialling()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getJavaScriptCanOpenWindowsAutomatically()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.ThumbnailCache: android.graphics.Bitmap get(com.android.videoeditor.widgets.ThumbnailKey)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.PersistentDataStore: android.hardware.display.WifiDisplay[] getRememberedWifiDisplays()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: java.util.List getRunningExternalApplications()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.DuotoneFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTransition: java.lang.String getAlphaMaskFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: byte[] update(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String encodeBody()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.TreeMultiset: java.util.Iterator descendingEntryIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmInfo: byte[] getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingCollection: java.lang.Object[] standardToArray(java.lang.Object[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.AsyncRunner: android.filterfw.core.FilterGraph getGraph()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: long getAppStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getFooterViewsCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.header.Via getViaHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.ParseOptions: boolean getOmitNormalization()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Alarm$DaysOfWeek: int getNextAlarm(java.util.Calendar)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IApplicationToken$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.TabStopSpan$Standard: int getTabStop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Runtime: java.io.InputStream getLocalizedInputStream(java.io.InputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: java.util.List getCompositionTimeEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$600(com.android.ex.chips.BaseRecipientAdapter,android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: int getUidForIntentSender(android.content.IIntentSender)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.IconCache: android.graphics.Bitmap getIcon(android.content.Intent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getTrackInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: libcore.io.StructLinger getsockoptLinger(java.io.FileDescriptor,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IMessenger$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Authenticator: java.lang.String getRequestingScheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: long getStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmInfo: java.lang.String getMimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.FisheyeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getRawTextDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.ResponseEvent: javax.sip.message.Response getResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.DialogFilter: java.lang.String getProcessingInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.CommonTimeConfig: boolean getAutoDisable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getSubtypeLocaleDisplayName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertificateFactory: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getRecentsButton()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ProgressBar: android.view.animation.Interpolator getInterpolator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.Options: boolean getOption(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.AttributeValue: int getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IDisplayContentChangeListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: byte[] getObject(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$BitmapCache: int getBitmapId(android.graphics.Bitmap)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageProcessor[] getMessageProcessors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioService$ScoClient: int getPid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: float getReportedHorizontalFovDegrees()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieEffect: android.graphics.Rect getEndRect()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.Parser: int getEntity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(java.lang.String,android.content.res.CompatibilityInfo,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: long getLastSaved()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableEntry: java.lang.Object setValue(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewStub: int getLayoutResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.UriImage: byte[] getResizedImageData(int,int,int,int,int,android.net.Uri,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.database.SortCursor: java.lang.String getString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredExtnPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.MosaicPreviewRenderer: android.graphics.SurfaceTexture getInputSurfaceTexture()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPObject: java.lang.String debugDump()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.KeyboardLayout: java.lang.String getLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment: java.lang.String[] getFromColumns()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: int getDefaultFixedFontSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.IntToByteBufferAdapter: java.nio.IntBuffer get(int[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Element: int getBytesSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.Buffer: java.nio.Buffer rewind()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: java.lang.String getFilterClassName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getSecureContainerPath(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.graphics.drawable.Drawable getWallpaper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: java.util.Set getPersistedStringSet(java.util.Set)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.seekbar.ProgressBar: android.graphics.drawable.shapes.Shape getDrawableShape()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageViewFragmentBase: com.android.emailcommon.provider.EmailContent$Message getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableDictionary: com.android.inputmethod.latin.ExpandableDictionary$NextWord getBigramWord(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.VendorPolicyLoader: java.lang.String getImapIdValues(java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getCNonce()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug$MemoryInfo: int getOtherSharedDirty(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.DigitalClock$AmPm: java.lang.CharSequence getAmPmText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperclass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaHeaderBox: long getModificationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.Class getRawType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CertificatePolicies: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedGlobalNetworkCallingCodes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.HideReturnsTransformationMethod: char[] getOriginal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getMeasuredWidthAndState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureLibrary: int getSequenceType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.DatePicker: int getMonth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: java.lang.Class getAttributeType(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CertificatePolicies: java.util.List getPolicyInformations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageChannel: gov.nist.core.HostPort getPeerHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.FileURLConnection: int getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.String getSpecificationVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpHandler: int getDefaultPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.HttpRoute: int getHopCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.io.File getFileStreamPath(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getScheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.DelegatingFieldParser: org.apache.james.mime4j.field.FieldParser getParser(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: int getRows()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.X500Name getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.NameValueList: java.lang.Object getValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECParameterSpec: int getCofactor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.server.search.Searchables: java.util.ArrayList getSearchablesInGlobalSearchList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CertTool: java.lang.String[] getKeyStrengthList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.String getQuantityString(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.AlertController$AlertParams$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.LayerDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.SimpleDateFormat: java.util.Date get2DigitYearStart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.beans.PropertyChangeListenerProxy: java.lang.String getPropertyName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.IntentPool: android.content.Intent get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: java.lang.CharSequence getCompletionHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewCellLayout: android.view.View getChildOnPageAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageVolume: int getStorageId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.SensorReader: float[] getAndResetGyroData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.WorkSource: android.os.WorkSource addReturningNewbs(android.os.WorkSource)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: boolean getAllowUserInteraction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMinification()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getVideoProfile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: java.lang.String getCallingPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(android.net.Uri,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: boolean getAudioflag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore$Builder$TmpLSParameter: java.security.KeyStore$ProtectionParameter getProtectionParameter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.wallpaper.RenderScriptWallpaper: android.service.wallpaper.WallpaperService$Engine onCreateEngine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.DragEvent: java.lang.Object getLocalState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: long getLong(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTransition getBeginTransition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getAction(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getCK()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector getProxySelector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.util.DisplayMetrics getDisplayMetricsLocked(int,android.content.res.CompatibilityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type getResolvedType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getRemoveOnCancelPolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getNamespaceCount(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.BackupDataInput: int getDataSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.io.pem.PemHeader: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Authenticator: java.net.InetAddress getRequestingSite()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IPermissionController$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapStore$ImapException: java.lang.String getAlertText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyKeyEvent: long getDownTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: android.app.PendingIntent getCallBackPendingIntent(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.SystemKeyStore: android.security.SystemKeyStore getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.ResourceHelper: com.android.email.ResourceHelper getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Accept: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.TimeListImpl: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Transformation: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getMinimumSlideElementDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.IOHandler: java.net.SocketAddress obtainLocalAddress(java.net.InetAddress,int,java.net.InetAddress,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: java.io.OutputStream getRequestBody()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getValues(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity: android.preference.PreferenceManager getPreferenceManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilParElementImpl$1: org.w3c.dom.smil.TimeList getBegin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.EditTextPreference: java.lang.String getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: int getDoubleTapZoom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy restorePolicyWithId(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Date: long getTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HeaderViewListAdapter: int getFootersCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHttpRequest: org.apache.http.ProtocolVersion getProtocolVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.PhotoModule: byte[] access$4802(com.android.camera.PhotoModule,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getIK()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getAudioSessionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: java.util.Iterator getParameterNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageVolume: int getMtpReserveSpace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: java.lang.String getProjectAudioTrackPCMFilePath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.RFC2109Spec: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: int getsockoptInt(java.io.FileDescriptor,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getScaledMeasuredWidth(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: java.util.List getAllEffects()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.RequestEvent: javax.sip.message.Request getRequest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue: com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.WordComposer: int getCodeAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.NameValueList: gov.nist.core.NameValue getNameValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: int getLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPResponse getLastResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: long getModificationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractQueue: java.lang.Object element()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipProviderImpl: javax.sip.header.CallIdHeader getNewCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputContext$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackRunBox$Entry: long getSampleDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityEvent: int getEventType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: short getShortExtra(java.lang.String,short)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.CommonTimeConfig: int getMasterAnnounceInterval()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardRow: int getDefaultKeyLabelFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.scheme.Scheme: int getDefaultPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: int getNumberOfConnectedOutputs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DoubleArrayBuffer: double get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageVolume: long getMaxFileSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Cubic$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Cubic$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Cubic$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckReceived()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getDeviceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: long getIfModifiedSince()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UiUtilities: android.view.View getViewOrNull(android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: java.lang.Object getInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.util.UiUtil: com.google.android.apps.lightcycle.util.Size getDrawableDimensions(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragLayer$LayoutParams: int getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragLayer$LayoutParams: int getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.cookie.CookieOrigin: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ShortArrayBuffer: java.nio.ShortBuffer get(short[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getRelativeChildOffset(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FloatArrayBuffer: float get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.TrustAnchor: byte[] getNameConstraints()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Allow: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ComputingConcurrentHashMap$ComputedReference: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getMediaPlaybackRequiresUserGesture()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$ViewGroupAction: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: int getMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: com.android.launcher2.LauncherAppWidgetHost getAppWidgetHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.util.Calendar getCalendar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.Paint$Style getStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: java.lang.String getType(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: java.lang.String getHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getSignedBy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsHorizontalScrollView: android.view.View getChildAtPosition(android.view.MotionEvent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.inputmethodservice.KeyboardView$SwipeTracker: float getXVelocity()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaScanner$MyMediaScannerClient: java.lang.String getGenreName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TimePicker$SavedState: int getHour()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: java.lang.String getProtocolVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECFieldF2m: int getFieldSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DialogPopup: java.lang.CharSequence getHintText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ArrayList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.HttpEntityWrapper: long getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NamedNodeMapImpl: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.BerInputStream: int getEndOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getSettingsDescriptionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackBox: com.coremedia.iso.boxes.MediaBox getMediaBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.FileDescriptor: int getInt$()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeDecimalFormat: int getMultiplier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.ContentLanguageHeader createContentLanguageHeader(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.widget.MmsWidgetService$MmsFactory: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.MessageChannel getRequestChannel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Mac: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: java.lang.Object get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMessage: com.android.emailcommon.mail.Body getBody()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.HideReturnsTransformationMethod: android.text.method.HideReturnsTransformationMethod getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getAccountCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore: float getFixedDisplayDensity(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getDomesticCarrierCodeFormattingRule()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.Sender: java.lang.Class getSettingActivityClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CertificateMessage: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.ListeningPointImpl: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: java.lang.String getOwnerInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralName: java.lang.Object getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getPaddingRight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ViewSwitcher: android.view.View getNextView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.SubMenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: org.apache.harmony.luni.lang.reflect.ImplForVariable parseFormalTypeParameter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.BigInteger: int getFirstNonzeroDigit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: java.lang.String getGeneratedImageClip()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.BasicHttpEntity: java.io.InputStream getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AlternativeName: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: boolean getIsDragOverlapping()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ThreePaneLayout: com.android.email.activity.MessageCommandButtonView getInMessageCommandButtons()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.tablet.NotificationPanel: android.view.View getClearButton()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ByteArrayBuilder: android.webkit.ByteArrayBuilder$Chunk getFirstChunk()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: java.util.List getCertificateChain(java.security.cert.X509Certificate)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ActivityStack: java.util.ArrayList processStoppingActivitiesLocked(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: java.lang.String getSuggestIntentAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Currency: java.util.Currency getInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.MissingFormatArgumentException: java.lang.String getFormatSpecifier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.CloseGuard: dalvik.system.CloseGuard get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorImpl: java.util.List getAllAudioTracks()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: boolean getOptionalIconsVisible()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: java.net.CacheResponse getCacheResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.AlertException: byte getDescriptionCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.EffectColor: int getColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.Object getCallerIdentity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannedString: int getSpanStart(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener getSipListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPObject: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.AccountSelectorAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPDate: int getMinute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Hotseat: com.android.launcher2.CellLayout getLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipDescription: int getMimeTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPVersionInfo getVersionInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.ImageCacheService: com.android.mms.util.ImageCacheService$ImageData getImageData(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getSystemSharedLibraryNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.NativeDaemonEvent: int getCmdNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERNumericString: byte[] getOctets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.SuggestionSpanUtils: java.lang.CharSequence getTextWithSuggestionSpan(android.content.Context,java.lang.CharSequence,com.android.inputmethod.latin.SuggestedWords,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Suggest: java.util.concurrent.ConcurrentHashMap getUnigramDictionaries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.TimeUtils: java.util.ArrayList getTimeZones(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes(java.lang.Class,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getPaddingTop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.LegacyConversions: com.android.emailcommon.mail.Message makeMessage(android.content.Context,com.android.emailcommon.provider.EmailContent$Message)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: float getDur()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Iterators: java.lang.Object getOnlyElement(java.util.Iterator)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilParElementImpl$1: org.w3c.dom.NodeList getTimeChildren()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: int getGeneration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPDateHeader: java.util.Calendar getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: java.lang.reflect.Type parseClassTypeSignature()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IInstrumentationWatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: float getTextRunAdvances(java.lang.String,int,int,int,int,int,float[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ExpandableListActivity: android.widget.ExpandableListAdapter getExpandableListAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter: android.content.Intent getRemoteViewsServiceIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpConnection: javax.net.ssl.SSLSocket getSecureSocketIfConnected()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: long getUsableSpace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViews getRemoteViewsAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.AccelerateInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.userdictionary.UserDictionaryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Priority: java.lang.String getPriority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.PKIXParameters: java.security.cert.CertSelector getTargetCertConstraints()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceRandomScript: com.android.commands.monkey.MonkeyEvent getNextEvent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListView: long getPackedPositionForChild(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getIPAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.Metadata: long getLong(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CertificateMessage: java.lang.String getAuthType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: int getSendBufferSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.LinkedList: java.lang.Object getFirst()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureFormats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ListPreference: java.lang.CharSequence[] getEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.util.Iterator getHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: java.lang.String getAudioWaveformFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterPort: android.filterfw.core.FrameFormat getPortFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager$Query: android.database.Cursor runQuery(android.content.ContentResolver,java.lang.String[],android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapT()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapS()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getLineCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.URLUtil: byte[] decode(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl: float getDur()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: android.view.View getPageAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.SettingsActivity: java.lang.CharSequence[][] getAllTimezones()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: android.graphics.Rect getMagnifiedRegionBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.TimeImpl: short getTimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getSIPVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.WorkingMessage: android.net.Uri access$1300(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri,android.content.Context,java.util.HashMap)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.ShortcutAndWidgetContainer: android.view.View getChildAt(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.Welcome: android.content.Intent createAccountShortcutIntent(android.content.Context,java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractSequentialList: java.util.Iterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: float[] getFloatArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.Dialog getDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardStatusView: int getAppWidgetId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: java.util.ArrayList access$400(android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchManager: android.content.ComponentName getWebSearchActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$Keys: java.util.Set createEntrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Validity$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabHost$TabSpec: java.lang.String getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.parser.Lexer: java.lang.String getHeaderValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FolderIcon$FolderRingAnimator: float getOuterRingSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getPixel(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: int getLastIoWaitTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: int getOrdering()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.String getSpecificationTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ToHeader getTo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.AnimationDrawable: int getNumberOfFrames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: java.lang.String getMimeTypeFromFileName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Package: java.lang.String getImplementationTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: float getRadius(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SyncRunner: java.lang.Exception getError()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: boolean getKeepAlive()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getFadingEdgeLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.TimeList getEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.ExemptionMechanism: int getOutputSize(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasastore.PicasaStoreFacade: java.io.File getCacheFile(long,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.BackupDataInput: java.lang.String getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.lang.Number parse(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.Finished: byte[] getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Frame: int getCapacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: int getModifiers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.JarURLConnectionImpl: boolean getUseCaches()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantLock: java.util.Collection getQueuedThreads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.AttributeValue: java.lang.String getHexString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioRecord: int getAudioSessionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IUserManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.ProcessedData: byte[] getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxMoveToAdapter$MailboxMoveToLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getDefaultKeyWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableString: int getSpanFlags(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageMoveObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: int getVendorId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.LightCycleRenderer: com.google.android.apps.lightcycle.panorama.Pano2dPreviewOverlay getPanoPreview2d()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getImeOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.server.search.Searchables: android.content.ComponentName getWebSearchActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.util.AnalyticsHelper: com.google.android.apps.lightcycle.util.AnalyticsHelper getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getStreamMaxVolume(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RemoteControlClient: int getIntPlaybackInformation(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.content.PackageHelper: android.os.storage.IMountService getMountService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.SmoothPagedView$OvershootInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObjectList: java.lang.String encode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Rect getSurfaceFrame()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SharedPreferencesImpl: float getFloat(java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: int getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractPooledConnAdapter: org.apache.http.conn.routing.HttpRoute getRoute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: int getSurfaceLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Format: java.lang.Object parseObject(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.LocaleUtils$RunInLocale: java.lang.Object runInLocale(android.content.res.Resources,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Canvas: int getMaximumBitmapWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: float getDimension(int,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ClipDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: int getReadTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.ParseOptions: boolean getAcceptLatin1()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.IDisplayManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimeBattery()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternView$Cell: int getColumn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Arrays$ArrayList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputContext$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFieldsForLoading: long get(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.SepiaFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getLineStart(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: android.view.View getScrollingIndicator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.MetricAffectingSpan: android.text.style.CharacterStyle getUnderlying()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.RecipientsEditor$RecipientsEditorTokenizer: java.util.List getNumbers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: android.graphics.drawable.Drawable getIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getObjectId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.VideoView: int getBufferPercentage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Vector: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getDoubleTapSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: int getWidgetToResetOnPageFadeOut()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBitString: int getPadBits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MultipartMimeContentImpl: int getContentCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getDepth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannedString: int getSpanEnd(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.Context getBaseContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat getIntlNumberFormat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest: int getDigestLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.OverlaysAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: boolean[] deviceHasKeys(int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.drawable.TextDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.Buffer: java.nio.Buffer reset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.HttpRoute: org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.SyncState: int getState(android.database.sqlite.SQLiteDatabase,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getAudioChannels()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.view.WindowManager$LayoutParams getSearchLayoutParams(android.view.ViewGroup$LayoutParams)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getQueuedThreads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.LinkedHashMap: java.util.Iterator newKeyIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetManager$AssetInputStream: int getAssetInt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.UriCodec: java.lang.String validate(java.lang.String,int,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest: byte[] digest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.os.Bundle getAppWidgetOptions(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.DragEvent: int getAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.ShaderProgram: java.lang.Object getHostValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Handler: android.os.IMessenger getIMessenger()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.TrackMetaData: float getVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.Options: int getOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHttpResponse: org.apache.http.HttpEntity getEntity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharArrayBuffer: char get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.ContentCache: com.android.email.provider.ContentCache$CacheToken getCacheToken(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Folder: com.android.launcher2.FolderInfo getInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.Context getApplicationContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk$ReceiverDispatcher: android.app.IntentReceiverLeaked getLocation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug$MemoryInfo: int getTotalSharedDirty()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: int getFixedContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent$PointerCoords: float getAxisValue(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance(java.lang.String,java.util.Map)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.CallInfo: javax.sip.address.URI getInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ZoomButtonsController: android.view.ViewGroup getContainer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: int getInt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: int getRawResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMap$StandardValues: java.util.Map map()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.QuoteSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.WriteAbortedException: java.lang.Throwable getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.BaseInputConnection: android.text.Editable getEditable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.RetryScheduler: com.android.mms.transaction.RetryScheduler getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: int getPeerPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.ContentImpl: javax.sip.header.ContentTypeHeader getContentTypeHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: int getVerticalOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getQName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: android.graphics.Bitmap getPixels(java.lang.String,int,int,long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl: short getFill()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore: android.webkit.DeviceMotionService getDeviceMotionService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Program: int getTextureCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: java.lang.String getUserName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.encoders.Base64: byte[] decode(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getAllowFileAccess()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Folder: java.util.ArrayList getItemsInReadingOrder(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getRequestTemplate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.spellcheck.DictionaryPool$1: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.EdgeEffect: android.graphics.Rect getBounds(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ComboPreferences: android.content.SharedPreferences getLocal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: short getNodeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharSequenceAdapter: char get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.message.Response getResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: android.os.IBinder getIBinder(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getRightPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: int getTaskForActivity(android.os.IBinder,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: int getCellWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.ListeningPointImpl)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: long getLong(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingObject: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getFirstChunk()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByName(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsMetaData getMetaData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1TaggedObject getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Folder: android.view.View getItemAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Chronometer: long getBase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.Token: java.lang.String getTokenValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getAddressString(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: void getThumbnailList(int,int,long,long,int,int[],android.media.videoeditor.MediaItem$GetThumbnailListCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getTelephonyService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: int getTabCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getMAddrParam()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: java.nio.ByteBuffer get(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.mail.Multipart: com.android.emailcommon.mail.BodyPart getBodyPart(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.BaseSurfaceHolder: int getRequestedHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.Context getApplicationContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: java.lang.String getSubtitle(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Context: java.lang.CharSequence getText(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject$Download: java.lang.String getFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager$CursorTranslator: java.lang.String getString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getLiveEntry(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getSubtitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Inflater: int getTotalIn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: java.net.InetAddress getPeerPacketSourceAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.swipeablelistview.LogTag: java.lang.String getLogTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager$Request: android.app.DownloadManager$Request addRequestHeader(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIds(com.android.server.AppWidgetServiceImpl$Host)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.Name$1: java.util.Collection getValues(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPathValidatorException: java.security.cert.CertPath getCertPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.AsyncTaskLoader: java.lang.Object onLoadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.lang.String format(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.test.IsolatedContext: java.util.List getAndClearBroadcastIntents()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getRootElementName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECFieldF2m: int[] getMidTermsOfReductionPolynomial()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmManagerClient: int getDrmObjectType(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUTF8String: com.android.org.bouncycastle.asn1.DERUTF8String getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getTotalPaddingTop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.UriImage: com.google.android.mms.pdu.PduPart getResizedImageAsPart(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.ForegroundColorSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getQueueLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ArrayAdapter: int getPosition(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: long getHistoricalEventTime(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledDoubleTapSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getItemCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.InvalidityDate: java.util.Date getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Equalizer: short getCurrentPreset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTitleCondensed()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralName: int getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractClientConnAdapter: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: android.text.TextPaint getPaint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.EditPhoneNumberPreference: java.lang.String getStringValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getCompoundPaddingBottom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERVisibleString: com.android.org.bouncycastle.asn1.DERVisibleString getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$TextViewSizeAction: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: com.android.internal.telephony.PhoneConstants$State getPhoneState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header getContentEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getEncryptionAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.SuggestionStripView$SuggestionStripViewParams: int getMaxMoreSuggestionsRow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.YuvImage: int getYuvFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.TrackMetaData: int getLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Inflater: int getAdler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.X509EncodedKeySpec: java.lang.String getFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getBackButton()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.GridLayoutAnimationController: float getColumnDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.HardwareRenderer$GlRenderer: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: android.app.Activity getActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.SuggestionsInfoCompatUtils: int getValueOf_RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.CompletionInfo: int getPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Storage: android.net.Uri newImage(android.content.ContentResolver,java.lang.String,long,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.WriteAbortedException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: float getFloat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.HandlerBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbAccessory: java.lang.String getSerial()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ByteBuffer: java.nio.ByteOrder order()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageListItem$5: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy getAreaCodeMapStorage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Element: int getSubElementOffsetBytes(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getOrientation(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CompoundButton: int getCompoundPaddingLeft()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: java.lang.Object getAnimatedValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: int getPendingAppTransition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$TextViewDrawableAction: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.VideoEditorActivity: com.android.videoeditor.widgets.OverlayLinearLayout getOverlayLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: java.lang.String getHttpParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getResponseCodeOrEmpty()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gms.common.internal.GmsClient: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.BaseAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: long getCurrentPlayTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.usb.UsbDeviceManager: android.hardware.usb.UsbAccessory getCurrentAccessory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress getPeerPacketSourceAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getIsdnSubAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo$Translator getTranslator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getParagraphRight(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getRouteAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieItem: int getOuterRadius()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.GLException: int getError()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObjectList: java.lang.String getIndentation()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.io.File getFilesDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.WaveView: int getSuggestedMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getScaledMeasuredWidth(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl: android.view.WindowLeaked getLocation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserModel: android.widget.ActivityChooserModel get(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(java.io.InputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.crypto.internal.NullCipherSpi: byte[] engineWrap(java.security.Key)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.ForegroundColorSpan: int getForegroundColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: java.util.Iterator getRouteSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedMap$SerializedForm: java.lang.Object readResolve()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.ParseException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: boolean getEnableDebugLogging()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.RuleBasedCollator: java.text.CollationElementIterator getCollationElementIterator(java.text.CharacterIterator)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERGeneralString: byte[] getOctets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore$Builder$BuilderImpl: java.security.KeyStore$ProtectionParameter getProtectionParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.JarURLConnectionImpl: java.security.Permission getPermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.FragmentManager: android.app.FragmentTransaction openTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECPoint: java.math.BigInteger getAffineX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.AlertDialogs: android.app.AlertDialog createAlert(android.content.Context,java.lang.String,int,java.lang.String,java.lang.String,android.content.DialogInterface$OnClickListener,java.lang.String,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.TransitionsAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECPoint: java.math.BigInteger getAffineY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: float getAlphaForPage(int,int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String[] getKeyboardLayouts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessagingPreferenceActivity: android.app.Dialog onCreateDialog(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.Time: int getWeeksSinceEpochFromJulianDay(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer getHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: int getTrafficClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.WindowManagerPolicyThread: java.lang.Thread getThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: int getColor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizeTabHost: int getDescendantFocusability()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBMPString: com.android.org.bouncycastle.asn1.DERBMPString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Boolean: org.apache.harmony.security.asn1.ASN1Boolean getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: byte getByte(java.lang.String,byte)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ColorDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyTouchEvent: java.lang.String getTypeLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1BitString: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.AttrImpl: org.w3c.dom.Element getOwnerElement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.content.PackageMonitor: int getChangingUserId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralSubtree: org.apache.harmony.security.x509.GeneralName getBase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl: android.view.ViewParent getParentForAccessibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TableRow: int getChildrenSkipCount(android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: int getAppOrientation(android.view.IApplicationToken)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: gov.nist.javax.sip.address.TelephoneNumber getTelephoneSubscriber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.auth.x500.X500Principal: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getReadingLevelScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.AlarmClock$AlarmItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.LeadingMarginSpan$Standard: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetServiceImpl: android.os.Bundle getAppWidgetOptions(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getHistoryPictureWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Provider: java.util.Collection values()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo getUserInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: long getCreationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Virtualizer: boolean getStrengthSupported()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.CrossProcessFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.Object getContent(java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: int getPeerPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.EmailContent$Attachment: com.android.emailcommon.provider.EmailContent$Attachment restoreAttachmentWithId(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.PointerTracker: long getDownTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: int getDSTSavings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.protocol.BasicHttpProcessor: int getRequestInterceptorCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.view.View getFocusedChild()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.AliasOptions: int getValidOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,android.net.Uri,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleForItemView(com.android.internal.view.menu.MenuView$ItemView)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.BigInteger: java.math.BigInteger shiftLeftOneBit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.NtpTrustedTime: long getCacheCertainty()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.TransitionsAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getTotalPaddingEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo$ActionKeyInfo: int getKeyCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: long getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkViews$GetViewsWithTextCommand: com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn translateCommand(java.util.List,com.android.commands.monkey.MonkeySourceNetwork$CommandQueue)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.lang.ClassLoader getClassLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.io.pem.PemObject: java.util.List getHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetManager: java.lang.CharSequence getResourceText(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.protocol.BasicHttpProcessor: int getResponseInterceptorCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFields: char get(java.lang.String,char)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.TimeList getBegin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraScreenNail: int getUncroppedRenderWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date: int getDay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.SystemKeyStore: byte[] retrieveKey(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.FragmentManagerImpl: android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.LongToByteBufferAdapter: long get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: double getDouble(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPath: java.lang.Object writeReplace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ToGrayFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpPost: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoViewProxy: android.webkit.WebViewClassic getWebView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: int getMinimumLogicalFontSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1TaggedObject getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.IconListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.Context getReceiverRestrictedContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: java.util.Date getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemClickListener getItemClickListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.RuntimeInit: android.os.IBinder getApplicationObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERPrintableString: com.android.org.bouncycastle.asn1.DERPrintableString getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSMessageHandler getMessageHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getWebSearchActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Element: int getSubElementArraySize(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraHolder: android.hardware.Camera$CameraInfo[] getCameraInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getStorageId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.IRecognitionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ProgressDialog: int getMax()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromMessageUri(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.RenderOverlay: int getWindowPositionY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.HopImpl: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.RenderOverlay: int getWindowPositionX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.From: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.BulletSpan: int getLeadingMargin(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.UUID: long getMostSignificantBits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getExternalStorageAppFilesDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: com.android.server.wm.MagnificationSpec getWindowMagnificationSpecLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: android.view.View getSelectedView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.List getAuthPreferences()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetManager: java.lang.CharSequence getResourceBagText(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IRemoteControlDisplay$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: int getTaskId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: java.lang.CharSequence getSubtitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxFragmentAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.Time: int getJulianMondayFromWeeksSinceEpoch(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DropDownAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.SMILLayoutElement getLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: float getZoomOverviewScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputContext$Stub$Proxy: void getSelectedText(int,int,com.android.internal.view.IInputContextCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View$MeasureSpec: int getMode(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ClientSessionContext: javax.net.ssl.SSLSession getSession(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getBeginLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: java.lang.String getPositionDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragLayer: int getChildDrawingOrder(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: int getLocalSequenceNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPResponse getReliableProvisionalResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteGroup: int getRouteCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getMetaState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extensions: org.apache.harmony.security.x509.Extension getExtensionByOID(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountService$Stub$Proxy: int getEncryptionState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizeTabHost: com.android.launcher2.AppsCustomizePagedView$ContentType getContentTypeForTabTag(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.lang.String getContentEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine: android.os.Handler getHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: java.util.TimeZone getDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.SlidingTab$Slider: int getTabWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Filter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsMetaData getTemporaryMetaData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiDevice getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.String getResourceEntryName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace$ZoomOutInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.sql.Date: int getSeconds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.PackageItemInfo: android.content.pm.ApplicationInfo getApplicationInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OctetString: java.io.InputStream getOctetStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getNationalNumberPattern()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: android.animation.Animator getChangeStateAnimation(com.android.launcher2.Workspace$State,boolean,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: long getTimescale(com.googlecode.mp4parser.authoring.Movie)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager$SensorEventPool: android.hardware.SensorEvent getFromPool()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPDate: int getHour()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.BaseByteBuffer: char getChar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: int getFrameRate(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter$MyCursorHelper: android.database.Cursor moveTo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String encodeSIPHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.X509Certificate: java.util.List getExtendedKeyUsage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.IBatteryStats$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Binder: android.os.UserHandle getCallingUserHandle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.Account: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.framework.ComparisonFailure: java.lang.String getExpected()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodReadObjectNoData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.graphics.Insets getOpticalInsets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.String getString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.DateTime: java.util.Date getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ViewManager: android.webkit.ViewManager$ChildView createView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ResolverActivity: android.graphics.drawable.Drawable loadIconForResolveInfo(android.content.pm.ResolveInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.ByteArrayEntity: java.io.InputStream getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.database.SortCursor: short getShort(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.app.Activity getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.SearchDropTargetBar: android.graphics.Rect getSearchBarBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharBuffer: java.lang.Object array()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: android.graphics.drawable.Drawable getFastDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralName: byte[] getEncodedName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.Transition getTransition(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.SecurityManager: java.lang.Class[] getClassContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.ColorStateList: int getDefaultColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.DownloadManager: boolean getAutoDownloadState(android.content.SharedPreferences)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getLineDescent(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.Invert: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.IDisplayManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterGraph: java.util.Set getFilters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getRingerMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: int getMaxWallpaperLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.io.InputStream getErrorStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getContainerSelector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.ProjectPickerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: long getSequenceNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore: android.webkit.BrowserFrame getBrowserFrame()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.AlarmClock$AlarmItemAdapter: android.os.Bundle getPreviousDaysOfWeekMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$Segment: java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$ReferenceEntry)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalAllocSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: java.util.List getRunningTasks(int)> android.permission.GET_TASKS - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: java.lang.String getTitle(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getMeasuredWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: java.util.ArrayList getExpandedGroupMetadataList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Character: byte getDirectionality(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.ParseOptions: boolean getStrictAliasing()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.res.Resources$Theme getTheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.IResultReceiver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringInternal: int getSpanEnd(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: com.android.internal.widget.LockPatternUtils getLockPatternUtils()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.DecelerateInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IUserManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension$2: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: int getppid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.RecentTasksLoader getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.EditPhoneNumberPreference: java.lang.CharSequence getSummaryOn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.DownloadInfo: java.lang.String getLogMessageForNetworkError(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1StreamParser: com.android.org.bouncycastle.asn1.ASN1Primitive readTaggedObject(boolean,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.ExifInterface: byte[] getThumbnail()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.IsoFile getIsoFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.app.SearchManager getSearchManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.WebView getWebView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.FolderProperties: int getMessageCount(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SyncRunner: android.filterfw.core.FilterGraph getGraph()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getRouting(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackExtendsBox: long getTrackId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getDestinationString(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.AbsoluteSizeSpan: boolean getDip()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPDateTimeImpl: int getMonth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.FileURLConnection: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentLengthHeader getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.mdat.SampleList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.content.res.Resources getResources()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListView: long getExpandableListPosition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LocalActivityManager: android.view.Window destroyActivity(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: int getWallpaperDesiredMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: com.android.launcher2.Folder getOpenFolder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: int getIntCoreSetting(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ActivityInfo: int getThemeResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.AccountSelectorAdapter: long getId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.NativeFrame: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: int getMACLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation$ActivityMonitor: android.app.Instrumentation$ActivityResult getResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItemClassic: java.lang.String getUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RingtoneManager: boolean getStopPreviousRingtone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.LocalePicker$LocaleInfo: java.util.Locale getLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString$AttributedIterator: java.util.Set getAllAttributeKeys()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Keyframe$IntKeyframe: int getIntValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.beetstra.jutf7.Base64Util: int getSextet(byte)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore$TrustedCertificateEntry: java.security.cert.Certificate getTrustedCertificate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getEndLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.ContentInfo: int[] getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.statusbar.StatusBarIconList: int getSlotIndex(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Handler: java.lang.String getEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List queryInstrumentation(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.IntKeyframeSet: java.lang.Object getValue(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.TransitionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerNative: android.app.IActivityManager getDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: int getModifiers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.app.NotificationCompat$Style: android.app.Notification build()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getEllipsizedWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: int getSmallFrameHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.MalformedInputException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNode: int getChildrenLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$Factory: android.webkit.WebViewDatabase getWebViewDatabase(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Runtime: java.lang.Runtime getRuntime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.UnknownFormatConversionException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: java.lang.Throwable getError()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ReplyTo: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getNextFocusForwardId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager: boolean isObbMounted(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmEvent: java.lang.Object getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.RecipientIdCache: java.lang.String getSingleAddressFromCanonicalAddressInDb(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessages(com.android.emailcommon.service.SearchParams,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: int getCurrentPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CallbackProxy$UploadFile: android.net.Uri getResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: int getAudioSamplingFrequency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion getLatestVersion(java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.BasicManagedEntity: java.io.InputStream getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: int getSelectedNavigationIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.Dictionary getMainDictionary()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmEvent: int getUniqueId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: float getTopFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.ExtendedKeyUsage: java.util.List getExtendedKeyUsage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getOpaque()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ShapeDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.VideoView: int getCurrentPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.server.search.Searchables: android.content.ComponentName getGlobalSearchActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.KeyGenerator: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.io.GraphReader: android.filterfw.core.FilterGraph readGraphResource(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.NinePatch: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getUseWideViewPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertStore: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getMinZoomScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getEndLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.util.logging.Level getLevel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ServerOperation: int getResponseCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.TransformedImmutableList: com.google.common.collect.ImmutableList subList(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageCompose: android.content.Intent getMessageComposeIntent(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: java.lang.String getInputEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.GLFrame: int getTextureId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetDecoder: float maxCharsPerByte()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int[] getBlockIndices()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.graphics.Matrix getInverseMatrix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Collator: java.text.Collator getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Expires: int getExpires()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.ImageViewTouchBase: float getScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputBinding: android.view.inputmethod.InputConnection getConnection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HeaderViewListAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstNodeFactory: com.google.common.collect.BstNode createLeaf(com.google.common.collect.BstNode)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getLastAudibleStreamVolume(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.EventLog$Event: java.lang.Object getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.InReplyTo: java.lang.String getCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SortedMultisets$DescendingMultiset: com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getLocalTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.Join: java.lang.String getCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: float distanceInfluenceForSnapDuration(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.RFC2965Spec: org.apache.http.Header getVersionHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getDirectionDescriptionsResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyMotionEvent: int getAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: int getWindowLayoutType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: java.lang.String getNonResourceString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.ResponseHeaders: java.lang.String getEtag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.conn.ClientConnectionManager getManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.Transaction: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageCompose$ActionSpinnerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.SAXParseException: int getLineNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.FileLock: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageUtils: java.lang.String getLocalNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.Recycler$MmsRecycler: int getMessageLimit(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: java.lang.String getCharacters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: float getTextScaleX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.content.res.Configuration getConfiguration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.NotificationTransaction: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getToIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.CodeSource: java.net.URL getLocation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.HttpConnectionMetricsImpl: long getSentBytesCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.TextBody: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Sensor: float getMaximumRange()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout: boolean getUseDefaultMargins()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension: org.apache.harmony.security.x509.BasicConstraints getBasicConstraintsValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl$2: android.graphics.Rect getSurfaceFrame()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: int getUniqueId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.SaturateFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternUtils: java.lang.String getNextAlarm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Primitive: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.VertexFrame: java.lang.Object getObjectValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryPermissionsByGroup(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.IAccessibilityManagerClient$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.RegionModel: int getLeft()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getMinEms()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Key: int getMoreKeyLabelFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: android.graphics.ColorFilter getColorFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SimpleSessionDescription$Media: int getBandwidth(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.graphics.Typeface getTypeface()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.HeaderSet: int getResponseCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getOpaque()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.State getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDeviceInfo: java.lang.String getModel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.codec.binary.Base64: byte[] discardNonBase64(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.security.cert.Certificate[] getLocalCertificates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.WeakHashMap: java.util.WeakHashMap$Entry getEntry(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie2: int[] getPorts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getLeft()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.EllipticCurve: java.math.BigInteger getA()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.EllipticCurve: java.math.BigInteger getB()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore$AutoFillData: java.lang.String getPreviewString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.MessageItem: long getMessageId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: int getTTLParam()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Switch: int getCompoundPaddingRight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Warning: java.lang.String getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: int getSpanFlags(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.CompatUtils: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.MultiTapKeyListener: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBitString: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String getOriginatingIOI()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeDecimalFormat: int getMaximumFractionDigits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.Xfermode getXfermode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.sax.Element: android.sax.Element getChild(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Parcel: java.lang.Object[] readTypedArray(android.os.Parcelable$Creator)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URL: java.lang.String getFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedVisibleInsets(android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackFragmentBox: com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox getTrackFragmentHeaderBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.opengl.DrawableGL: com.google.android.apps.lightcycle.opengl.Shader getShader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERT61String: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RelativeLayout$DependencyGraph$Node: android.widget.RelativeLayout$DependencyGraph$Node getNextPoolable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.RoutedRequest: org.apache.http.conn.routing.HttpRoute getRoute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable getFrame(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridView: int getRequestedColumnWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings: java.lang.String getGTalkDeviceId(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getDrawingCacheBackgroundColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getLineAtCoordinate(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetwork$CommandQueueImpl: com.android.commands.monkey.MonkeyEvent getNextQueuedEvent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RemoteControlClient: int getRcseId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.PackageManagerBackupAgent: java.util.Set getRestoredPackages()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncManager: java.lang.String formatTime(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.NioUtils: java.io.FileDescriptor getFD(java.nio.channels.FileChannel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.SuggestionSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: java.lang.CharSequence getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ContainerEncryptionParams: long getAuthenticatedDataStart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable getDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader,byte[],javax.sip.header.ContentTypeHeader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: long getSendRecurringAccessibilityEventsInterval()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout: int getColumnCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerOnePane: int getLayoutId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getMaxWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: int getCellLayoutChildId(long,int,int,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: boolean isDataConnectivityPossible()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFrameRates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPETag: java.lang.String getETag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager: java.util.List access$000(android.os.storage.StorageManager)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: char getPercent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: java.io.File getSessionBaseDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.net.InetAddress getInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.app.Activity getActivity(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: long getSelectedItemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.RegularImmutableList$1: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.UserAgent: java.util.ListIterator getProduct()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredInternationalPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,int,float[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: android.webkit.WebSettings getSettings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxFragmentAdapter: long getId(android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeader: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension: byte[] access$300(org.apache.harmony.security.x509.Extension)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.common.widget.CompositeCursorAdapter: com.android.common.widget.CompositeCursorAdapter$Partition getPartition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: java.lang.String getString(android.content.res.TypedArray,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.lang.String[] getSystemSharedLibraryNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.XmlUtils: java.util.ArrayList readListXml(java.io.InputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.SMILElement getBody()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.ContentImpl: javax.sip.header.ContentDispositionHeader getContentDispositionHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager: java.lang.String getMimeTypeForDownloadedFile(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.AlbumCollectorJson: java.util.Map getEntryFieldMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getChildSelector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getEmulatedStorageObbSource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone getTimeZone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.EngineParameters: int getMaxPlayBufferCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignedData: java.util.List getSignerInfos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.PBEKeySpec: int getKeyLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getThreadExternalAllocCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.util.Rfc822Token: java.lang.String getComment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaPlayer: android.media.Metadata getMetadata(boolean,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Looper: java.lang.Thread getThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmRights: byte[] getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternUtils: int getFallbackAppWidgetId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IAudioRoutesObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl$1: org.w3c.dom.NodeList getTimeChildren()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: short getShort(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList reverse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getLastAudibleMasterVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getPageNearestToCenterOfScreen()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.RequestEvent: javax.sip.Dialog getDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.HTMLScanner: java.lang.String getPublicId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: int getAnimationStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.TransitionDrawable$TransitionState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getEllipsisCount(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeyKeyEvent: long getEventTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbManager: android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Require: java.lang.String getOptionTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeader: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfoByViewId(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: long getEventTimeNano()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.NetworkLayer getNetworkLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: int getTitleColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ViewAnimator: boolean getAnimateFirstView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.parsers.FactoryConfigurationError: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppCacheDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.SuggestionSpan: int getUnderlineColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer getTimer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.DownloadProvider$SqlSelection: java.lang.String[] getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalOrientation(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager$FastBitmapDrawable: int getMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalToolMinor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry nextEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner: int getDropDownWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.EnglishReasonPhraseCatalog: java.lang.String getReason(int,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.ListeningPointImpl getListeningPoint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.graphics.Rect sendOurVisibleRect()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multisets$UnmodifiableMultiset: java.util.Set elementSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioSystem: java.lang.String getDeviceName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.seekbar.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.Header getHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Lists$AbstractListWrapper: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Equalizer: short getNumberOfPresets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getTouchMinor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.IntArrayBuffer: int get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.X509Name: com.android.org.bouncycastle.asn1.x509.X509Name getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespacePrefix(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaFile: java.lang.String getMimeTypeForFile(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getHintId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getSelectedRoute(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.PanoramaFrameOverlay: int getTextureId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ThreadLocal: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor wrapCursor(android.database.Cursor,boolean,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,boolean,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Hotseat: int getOrderInHotseat(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Set getCriticalExtensionOIDs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPMetaImpl: java.util.Calendar getPropertyCalendar(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.InCallUiState: com.android.phone.Constants$CallStatusCode getPendingCallStatusCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: libcore.net.http.RequestHeaders getRequestHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateUtils: java.lang.String getDayOfWeekString(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: int getPortServer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputBinding: android.os.IBinder getConnectionToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: long getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: java.util.ArrayList getUniqueAspectRatiosList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getFixedLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap: java.util.Map asMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.BigInteger: byte[] toByteArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: javax.sip.ListeningPoint createListeningPoint(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.UploadsDatabaseHelper getUploadsDatabaseHelper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormat: java.lang.String getNegativePrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingIterator: java.lang.Object delegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.OverlayType: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SettingsValues: java.lang.String getInputAttributesDebugString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getCharset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ComponentInfo: int getIconResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.auth.BasicScheme: java.lang.String getSchemeName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.SearchDropTargetBar: int getTransitionInDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsApp: com.android.mms.util.ThumbnailManager getThumbnailManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.SimpleImageFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.profiler.HprofData: int getDepth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IProcessObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadsDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalX(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalY(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView: int getDividerHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.CountingTimerView: java.lang.String getTimeString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmSupportInfo: java.util.Iterator getFileSuffixIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.ApiService$IntentProcessor: java.util.Iterator getIntentQueueIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.VignetteFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.SuggestionSpan: int getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TableRow: android.view.View getVirtualChildAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: float getAttributeFloatValue(java.lang.String,java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation$Cache: com.android.mms.data.Conversation get(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ListFragment: long getSelectedItemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeDecimalFormat: java.lang.String getNegativeSuffix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.TransitionAlpha: int getBlendingPercent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getScrollBarFadeDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.DatePicker: android.widget.CalendarView getCalendarView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.SortedMultisets$ElementSet: com.google.common.collect.Multiset multiset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.performance.Throughput: float getFramesPerSecond()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekFastDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UEventObserver$UEvent: java.lang.String get(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.SingleLineTransformationMethod: char[] getOriginal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaHeaderBox: long getCreationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.message.Response createReliableProvisionalResponse(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.BackupManager: android.app.backup.RestoreSession beginRestoreSession()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: short getShort(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.BreakIterator: java.text.BreakIterator getWordInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Authenticator: java.net.Authenticator$RequestorType getRequestorType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableList: java.util.List subList(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.core.NameValue getNameValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getVibrateSetting(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: javax.sip.address.Hop getHop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ListFragment: int getSelectedItemPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.AccessibilityDelegateCompat: java.lang.Object getBridge()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.SparseLongArray: long get(int,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterSurfaceView: android.filterfw.core.GLEnvironment getGLEnv()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.Configuration getConfiguration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IRestoreSession$Stub$Proxy: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getNavDump()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DateKeyListener: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyPair: java.security.PrivateKey getPrivate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.TransferPipe: android.os.ParcelFileDescriptor getWriteFd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getEllipsisCount(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FastBitmapDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilPlayer: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.widget.RemoteViews getAppWidgetViews(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$WrappedList: java.lang.Object set(int,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.statusbar.StatusBarIconList: com.android.internal.statusbar.StatusBarIcon getIcon(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getPreviewFrameRate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.primitives.Ints$IntArrayAsList: java.lang.Integer get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getAxisValue(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice$MotionRange: int getSource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.Gesture: java.util.ArrayList getStrokes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEntry: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: int getVideoTransitionBehaviour(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getCompoundPaddingTop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: int getIndex(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherModel: com.android.launcher2.FolderInfo getFolderById(android.content.Context,java.util.HashMap,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.Context createDisplayContext(android.view.Display)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IRingtonePlayer$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ActivityRecord: long getKeyDispatchingTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle$NoFallbackControl: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalSize(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: android.webkit.WebViewProvider getWebViewProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.AcceptLanguageHeader createAcceptLanguageHeader(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.CursorEntityIterator: android.content.Entity next()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: int getWidgetPageIndex(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.TreeMultiset: java.util.Iterator entryIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.LexerCore: gov.nist.core.Token match(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: java.lang.String getWritePermission()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.ProgramVertex: int getInputCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IUserManager$Stub$Proxy: java.util.List getUsers(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CRLDistributionPoints: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardCodesSet: int getCode(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramPacket: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.provider.ExchangeDirectoryProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentSender: int getCreatorUid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.AnimatedRotateDrawable$AnimatedRotateState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.ParserCursor: int getPos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractList: java.util.Iterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: int getMaximumIntegerDigits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: android.text.Layout$Directions getLineDirections(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getAttributeNamespace(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.DownloadHandler: com.android.providers.downloads.DownloadHandler getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getBlockNetworkImage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker$InputTextFilter: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.ICU: java.util.Locale[] getAvailableDecimalFormatSymbolsLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessages(int,int,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] decrypt(byte,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEntry: int getDestinationType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: int disableApnType(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getMeasuredHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.util.Date getCreationDate(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.PatternMatcher: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.AllCapsTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.WeakReferenceThreadLocal: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.MathContext: int getPrecision()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.Ringer$Worker: android.os.Looper getLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MemoryBlock: long getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getISO3Country()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String getToTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString$AttributedIterator: java.util.Map getAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.Transaction: com.android.mms.transaction.TransactionState getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.IntentResolverOld: java.util.Iterator filterIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertStore: java.lang.String getDefaultType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.SubMenuBuilder: android.view.Menu getParentMenu()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageProcessor: int getDefaultTargetPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ShapeDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ScrollingTabContainerView: com.android.internal.widget.ScrollingTabContainerView$TabView access$300(com.android.internal.widget.ScrollingTabContainerView,android.app.ActionBar$Tab,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingCollection: java.lang.String standardToString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.WordIterator: int getBeginning(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.PBEKeySpec: byte[] getSalt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageVolume: java.io.File getPathFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.StatFs: int getFreeBlocks()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$PrivateHandler: android.os.Looper getUiLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.UserInfo: int getUserType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.SparseIntArray: int get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.From: java.lang.String getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Type: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.QueryController getQueryController()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PanelView$FlingTracker: float getYVelocity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapElement getKeyedElementOrNull(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.PolicyManager: android.view.FallbackEventHandler makeNewFallbackEventHandler(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.LabeledIntent: java.lang.String getSourcePackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Program$BaseProgramBuilder: int getCurrentConstantIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float getPrimaryHorizontal(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.graphics.Bitmap getFavicon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: java.lang.String getString(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.StatusLine: java.lang.String getReasonPhrase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.SecretKeyFactory: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ShortcutPickerFragment$AccountPickerLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.X500NameStyle getDefaultStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.Recycler: com.android.mms.util.Recycler$SmsRecycler getSmsRecycler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ScrollBarDrawable: int getSize(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableDictionary: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.app.KeyguardManager getKeyguardManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: android.net.http.SslCertificate getCertificate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Lists$Partition: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.NameValue: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getActionItems()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: int getAudioCodecType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Throwable: java.lang.Throwable getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.LatinIME: int getCurrentAutoCapsState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: int getDropDownHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.MosaicFrameProcessor: int createMosaic(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.GalParser: com.android.exchange.provider.GalResult getGalResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: float getTotalCpuPercent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.SeekBarDialogPreference: android.widget.SeekBar getSeekBar(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizeTabHost: android.view.View getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: int getResponseCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getParentNode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getEllipsizedWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.app.Activity getActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraActivity: long getShutterToPictureDisplayedTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.SynthesisRequest: android.os.Bundle getParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: android.view.View getPageAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Primitive: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getLineTop(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getBottomPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: float getFloat(java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.EditableInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ContrastFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getDefaultTextEncodingName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.app.LoadedApk getPackageInfoNoCheck(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] getDefaultCipherSuites()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.GLUtils: int getInternalFormat(android.graphics.Bitmap)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RequestLine: java.lang.String getVersionMinor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabWidget: int getChildDrawingOrder(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getChannelCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.WebViewProvider$ScrollDelegate getScrollDelegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideshowModel: int getTotalMessageSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.ResponseEvent: javax.sip.ClientTransaction getClientTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.PlaybackQueueItem: android.speech.tts.TextToSpeechService$UtteranceProgressDispatcher getDispatcher()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: int getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeBodyPart: com.android.emailcommon.mail.Body getBody()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FocusOnlyTabWidget: int getChildTabIndex(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getXPrecision()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: java.lang.String getIndent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getChildOffset(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasastore.PicasaStoreFacade: java.io.File getCacheDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.BaseAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.util.List subList(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getRecipientLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.EmailContent$Attachment: com.android.emailcommon.provider.EmailContent$Attachment[] restoreAttachmentsWithMessageId(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizePagedView: int getSaveInstanceStateIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: android.os.Bundle getExtras()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.LongBuffer: java.nio.LongBuffer get(long[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHttpResponse: java.lang.String getReason(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint getPaint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Long: java.lang.Long getLong(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetHostView: int getAppWidgetId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type getOwnerType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.ManageSimMessages: android.database.Cursor access$100(com.android.mms.ui.ManageSimMessages)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: float getOutlineAlphaForPage(int,int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONArray: java.lang.String getString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: boolean[] getSubjectUniqueID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.StatFs: int getAvailableBlocks()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.textservice.SpellCheckerInfo: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider$Transport: java.lang.String getProviderName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatConversionException: char getConversion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.content.ComponentName getComponent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getCompoundDrawablePadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getDisplayVariant()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getColumnPos(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker: boolean getWrapSelectorWheel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.AdditionalSubtype: android.view.inputmethod.InputMethodSubtype createAdditionalSubtype(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: int indexOf(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.common.widget.CompositeCursorAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.EditText: android.text.Editable getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ArrayAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.SlideshowActivity$SmilPlayerController: int getBufferPercentage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ErrorInfoList getErrorInfoHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.TimerObj: long getTimesupTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiSelector: int getInt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ServerSocket: java.net.SocketImpl getImpl$()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: long getTotalSpace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstNode: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getGrParam()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DateTimeKeyListener: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERPrintableString: byte[] getOctets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup: android.net.sip.SipProfile getLocalProfile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsVerticalScrollView: int getHorizontalFadingEdgeLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.BreakIterator: java.text.BreakIterator getWordInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: long getSourceNodeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle$Control: java.util.ResourceBundle$Control getNoFallbackControl(java.util.List)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: java.util.Locale getTextLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AllowEventsList: java.util.ListIterator getMethods()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: int getPointerCount(android.view.MotionEvent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Formatter$FormatToken: int getArgIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: java.net.InetAddress ioctlInetAddress(java.io.FileDescriptor,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabWidget: android.view.View getChildTabViewAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: int getPackageScreenCompatMode(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.SensorReader: int getNumGyroSamples()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: int getUserHandle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getDisplayLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: int getStatusCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Enumerated: org.apache.harmony.security.asn1.ASN1Enumerated getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getScanCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItem: android.webkit.WebHistoryItem clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONObject: java.lang.Object get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: int getLargestPoolSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.HttpEntityWrapper: java.io.InputStream getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.HandlerBox: java.lang.String getHandlerType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFieldsForLoading: java.io.ObjectStreamClass getObjectStreamClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socks4Message: byte[] getBytes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.LabeledIntent: int getLabelResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.pm.PackageManager getPackageManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.HeaderGroup: org.apache.http.Header getCondensedHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ThreePaneLayout: int getLeftPaneId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.RuleBasedCollatorICU: java.lang.String getRules()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportOffsetX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportOffsetY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: char getMatch(char[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FloatToByteBufferAdapter: float get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.DatePicker: long getMinDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.Context,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeHeader: java.lang.String[] getHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Ordering: com.google.common.collect.Ordering nullsLast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.ScreenRotationAnimation: android.view.animation.Transformation getEnterTransformation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpRequestBase: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: int getRetryCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: java.lang.String getBackgroundColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetEncoder: byte[] replacement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: int getInjectedPointerDownCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.InCallUiState: com.android.phone.InCallUiState$ProgressIndicationType getProgressIndication()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractSortedSetMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPersonalNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.InvalidClassException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogManager: java.lang.Object getInstanceByClass(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.SendTransaction: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20DisplayList: int getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERVisibleString: byte[] getOctets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.CallLogAsync: android.os.AsyncTask getLastOutgoingCall(com.android.phone.CallLogAsync$GetLastOutgoingCallArgs)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl: android.view.AccessibilityInteractionController getAccessibilityInteractionController()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementTimeImpl: org.w3c.dom.smil.TimeList getBegin()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.Transaction: int getServiceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewDatabaseClassic: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.FormatFlagsConversionMismatchException: java.lang.String getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.PointerTracker$TimeRecorder: long getLastLetterTypingTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.CallNotifier: boolean getIsCdmaRedialCall()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RelativeLayout: int getBaseline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.BaseStatusBar: com.android.systemui.statusbar.StatusBarIconView addNotificationViews(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.GenericObject: java.lang.Class getClassFromName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getBranchId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.HeaderSet: int[] getHeaderList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.ParcelFileDescriptor: int getFd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaItem: android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getClipSettings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.SuggestionSpan: java.lang.String getNotificationTargetClassName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.base.CharMatcher: com.google.common.base.CharMatcher precomputed()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1OctetStringParser parser()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebBackForwardListClassic: int getCurrentIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: int getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.ParserAdapter$AttributeListAdapter: java.lang.String getValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.String: byte[] getBytes(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TextToSpeech: java.util.List getEngines()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.opengl.DeviceOrientedSprite: android.graphics.PointF getPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ClientSessionContext: javax.net.ssl.SSLSession getSession(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ComboPreferences: java.lang.String getString(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.URLSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getUserAtHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: android.view.View getActionView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipData: android.graphics.Bitmap getIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.ContentInfo: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getKeyboardDevice()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Images$Media: android.graphics.Bitmap getBitmap(android.content.ContentResolver,android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getToolMajor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: int getParameter(int[],byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> android.permission.READ_SMS android.permission.READ_SYNC_SETTINGS android.permission.READ_SOCIAL_STREAM android.permission.WRITE_SOCIAL_STREAM android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$EntryFactory: com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$ReferenceEntry,com.google.common.collect.MapMakerInternalMap$ReferenceEntry)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieAudioTrack getAudioTrack(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] read(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmInfoRequest: java.lang.Object get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getStale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: long getAppBoundaryEndTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputContextCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest: byte[] digest(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.KeyValueMap: float getFloat(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.graphics.Bitmap getTaskTopThumbnail(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.io.File getExternalFilesDir(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.ProgressBar: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getSystemAudioRoute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getHorizontalFadingEdgeLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Canvas: int getDensity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.OrientationEKF: double[] getGLMatrix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: java.lang.CharSequence getTextFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager: java.util.List getSensorList(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: boolean getExactPacketLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractClientConnAdapter: java.net.InetAddress getRemoteAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageChannel: gov.nist.core.HostPort getViaHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTransition: java.lang.Class getTypeClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Transition: int getBehavior()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.SMILElement getHead()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.StringTokenizer: java.lang.String getNextToken(char)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getFromIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(android.content.pm.ActivityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.Property: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.profiler.PortableThreadSampler: java.lang.StackTraceElement[] getStackTrace(java.lang.Thread)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.FastXmlSerializer: int getDepth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.ISchedulingPolicyService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERNumericString: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpPut: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: long getTimelineDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] wrap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewFragment: android.webkit.WebView getWebView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Supported: java.lang.String getOptionTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager$FastBitmapDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator listIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: com.android.org.bouncycastle.asn1.ASN1GeneralizedTime getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20DisplayList: int getNativeDisplayList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFieldsForLoading: short get(java.lang.String,short)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: int getItemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.CommonTimeUtils: java.lang.String transactGetString(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: float getChildrenScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.View getCustomView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Any: org.apache.harmony.security.asn1.ASN1Any getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams: byte getFc()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.RingtonePreference: int getRingtoneType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getFadeTop(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getPeerProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: int getVendorSpecificSjisFromAndroidPua(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedCharacterIterator$Attribute: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: java.lang.String getFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.AttachmentUtilities: java.io.File getAttachmentDirectory(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Throwable: java.lang.String getLocalizedMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$WrappedCollection: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ResizableIntArray: int get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getX(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: short getNodeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpRetryException: java.lang.String getLocation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: java.lang.String getOriginAddress(java.net.URL)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.text.Editable getEditableText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.SurfaceView$4: android.view.Surface getSurface()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getSolidColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.SubjectPublicKeyInfo$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getBlockLeftEdge(int,int,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: float getVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher$CameraWidgetInfo getCameraWidgetInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getParagraphLeft(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.Util: android.hardware.Camera$Size getOptimalVideoSnapshotPictureSize(java.util.List,double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ViaList getViaHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebBackForwardList: int getCurrentIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.BaseAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.HorizontalScrollView: float getRightFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.RestoreSession: int getAvailableRestoreSets(android.app.backup.RestoreObserver)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.NativeDaemonEvent: java.lang.String getField(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftValueReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getModifiers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.message.Request getRequest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.GradientDrawable$Orientation getOrientation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: com.android.launcher2.Hotseat getHotseat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Security$SecurityDoor: java.util.List getAliases(java.security.Provider$Service)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.SynthesisRequest: int getSpeechRate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: java.lang.String getParameters(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1Integer getIndirectReference()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPublicExponent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.SyncTaskProvider getManualPhotoUploadTaskProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: com.android.internal.view.menu.MenuItemImpl getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: java.util.Iterator getListeningPoints()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.io.Files$1: java.io.FileInputStream getInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.TextLine: int getOffsetToLeftRightOf(int,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: org.apache.harmony.security.x509.Extensions getCrlEntryExtensions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker: int getInitialCapacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.CountDownLatch: long getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbInterface: int getInterfaceSubclass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap$WrappedCollection: java.util.Collection getDelegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: long getNextId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getDomain()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: int getLteOnCdmaMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.BackgroundColorSpan: int getBackgroundColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getFirstLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: char getChar(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.FastScroller$ScrollFade: int getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.MessagingNotification: long getSmsThreadId(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.logging.LogFactory$2: java.lang.Object run()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomControlExternal: android.webkit.ZoomControlExternal$ExtendedZoomControls getControls()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ViewAnimator: int getDisplayedChild()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.ResponseHeaders: java.util.Date getLastModified()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.SlidingTab$Slider: int getTabHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.SynthesisRequest: java.lang.String getCountry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHttpResponse: java.util.Locale getLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackRunBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getLineAscent(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: long getChildId(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.MessageFormat: java.text.Format[] getFormats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ref.FinalizerReference: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountServerBaseFragment: android.os.Bundle getSettingsModeArgs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getEllipsizedWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.IInputManager$Stub$Proxy: int[] getInputDeviceIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERNumericString: com.android.org.bouncycastle.asn1.DERNumericString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IApplicationToken$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager createInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipProviderImpl: javax.sip.ClientTransaction getNewClientTransaction(javax.sip.message.Request)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Utils: int getGrayColorId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERVisibleString: com.android.org.bouncycastle.asn1.DERVisibleString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.SensorReader: float getImuOrientationDegrees()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.XMPException: int getErrorCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaProperties: int[] getSupportedVideoCodecs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: android.graphics.Bitmap getUserIcon(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IUserManager$Stub$Proxy: int getUserHandle(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getActionMasked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.accessibility.KeyCodeDescriptionMapper: java.lang.String getDescriptionForKey(android.content.Context,com.android.inputmethod.keyboard.Keyboard,com.android.inputmethod.keyboard.Key,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: char getMinusSign()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.io.File getSharedPrefsFile(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.ExemptionMechanism: byte[] genExemptionBlob()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Key: int getAltCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createDoubleFormat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: android.content.res.Resources getResources(android.app.ActivityThread)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Window: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMapEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.EnumSet: java.lang.Object writeReplace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getPaddingEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Dialog: int getVolumeControlStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.TransitionSliding: int getDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.view.View getCurrentView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.ExpandHelper$ViewScaler: int getNaturalHeight(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.RootInputStream: int getLineNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x501.Name$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.FocusOverlayManager: java.util.List getMeteringAreas()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.layout.LayoutManager: com.android.mms.layout.LayoutParameters getLayoutParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindow$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterSurfaceView: int getSurfaceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult getCacheFile(java.lang.String,java.util.Map)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View$AttachInfo$InvalidateInfo: android.view.View$AttachInfo$InvalidateInfo getNextPoolable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderProxy: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.PointerIcon: android.view.PointerIcon load(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: int getRepeatMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request createCancel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.message.Request createAck(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1Primitive getDataValueDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageVolume: java.lang.String getDescription(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMultipart: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.VendorPolicyLoader: android.os.Bundle getPolicy(java.lang.String,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTransition: long getAppDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList createAsList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: int getProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: android.view.ContextMenu$ContextMenuInfo getMenuInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap: java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$ReferenceEntry)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getSystemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternView$Cell: int getRow()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Accept: gov.nist.javax.sip.header.MediaRange getMediaRange()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: android.view.View getCustomView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.swipeablelistview.SwipeableListView: android.view.View getChildContentView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorage: int getStorageId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceGroupAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.PlainDatagramSocketImpl: byte getTTL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: android.view.View getSelectedView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.ScaleXSpan: float getScaleX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SimpleFrame: java.lang.Object getObjectValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ComponentName: java.lang.String getShortClassName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbInterface: int getEndpointCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: java.lang.CharSequence getIterableTextForAccessibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ActionMode: java.lang.Object getTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SimpleCursorAdapter: int getStringConversionColumn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalToolMajor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout access$1900(android.widget.RemoteViewsAdapter$RemoteViewsMetaData,int,android.view.View,android.view.ViewGroup,java.lang.Object,android.view.LayoutInflater,android.widget.RemoteViews$OnClickHandler)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebBackForwardListClassic: android.webkit.WebHistoryItem getItemAtIndex(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilMediaElementImpl: java.lang.String getSrc()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.MessageFormat: java.text.Format[] getFormatsByArgumentIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorage: long getReserveSpace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: java.lang.String getAttributeName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: com.android.launcher2.Workspace getWorkspace()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralName$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.DateSorter: long getBoundary(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: android.view.InputDevice getInputDeviceByDescriptor(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.TextureView: int getLayerType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.File: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: int getNonDecorDisplayHeight(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.UnderlineSpan: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.SubjectPublicKeyInfo: byte[] getSubjectPublicKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getIconId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Currency: java.util.Currency getInstance(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: byte[] access$000(org.apache.harmony.security.x509.AuthorityKeyIdentifier)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalOrientation(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver$UEventInfo: java.lang.String getDevName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: android.content.ComponentName getComponentName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.WebChromeClient getWebChromeClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.PointerIcon: int getStyle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerBase: com.android.email.activity.MessageOrderManager getMessageOrderManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Keyframe: float getFraction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ServerRequestHandler: long getConnectionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.AlignmentSpan$Standard: int getSpanTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.io.CharStreams$1: java.io.StringReader getInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.io.CharStreams$2: java.io.InputStreamReader getInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: java.lang.String getInfinity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getValuesPerSample()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.io.CharStreams$4: java.io.Reader getInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: java.util.HashMap getLastNonConfigurationChildInstances()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.sql.Date: int getHours()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.power.DisplayPowerState: int getScreenBrightness()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.PowerProfile: double getBatteryCapacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpRequestBase: org.apache.http.RequestLine getRequestLine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.FtpURLConnection: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getMaxEms()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.BerInputStream: int getTagOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.MapEntry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IWallpaperManager$Stub$Proxy: int getWidthHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.PluginManager: java.lang.String[] getPluginDirectories()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Deflater: int getAdler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.compat.CompatUtils: java.lang.Object getFieldValue(java.lang.Object,java.lang.Object,java.lang.reflect.Field)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityOptions: android.graphics.Bitmap getThumbnail()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: int lastIndexOf(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.io.Resources$1: java.io.InputStream getInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringInternal: java.lang.Object[] getSpans(int,int,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.AsyncQueryHandler: android.os.Handler createHandler(android.os.Looper)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetSocketAddress: java.net.InetAddress getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleSizeBox: long getSampleCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: int getThemeResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.Parser: java.lang.Object getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.io.CharStreams$3: java.io.OutputStreamWriter getOutput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$UnmodifiableSetMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.Authority: gov.nist.core.HostPort getHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioRecord: int getNotificationMarkerPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.message.Response createResponse(int,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader,javax.sip.header.ContentTypeHeader,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getClassAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.Host: java.lang.String getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.PointCloud$WaveManager: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractSetMultimap: java.util.Collection createCollection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ResponseCache: java.net.ResponseCache getDefault()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.validation.Validator: boolean getFeature(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.SecurityManager: boolean getInCheck()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FileChannelImpl: java.io.FileDescriptor getFD()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getServerKeyType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.backup.IBackupTransport$Stub$Proxy: android.content.Intent configurationIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RingtoneManager: boolean getIncludeDrm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SyncSampleBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.NtpTrustedTime: long getCacheAge()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.InputPort: android.filterfw.core.Filter getSourceFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.BaseExpandableListAdapter: long getCombinedGroupId(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxFinder: com.android.email.Controller$Result getControllerResultsForTest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Maps$TransformedEntriesMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.TextureView: android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsVerticalScrollView: int getVerticalFadingEdgeLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionSettings: int getProxyPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.CheckedInputStream: java.util.zip.Checksum getChecksum()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Warning: int getCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$TabListener getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type[] getActualTypeArguments()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyDetector: int getTouchX(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyDetector: int getTouchY(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultimap: java.lang.Object delegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.runner.BaseTestRunner: java.lang.String processArguments(java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SipSession: android.net.sip.SipProfile getPeerProfile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.ContentRestrictionFactory: com.android.mms.model.ContentRestriction getContentRestriction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: long[] getMatrix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.ICancellationSignal$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Scroller: int getStartY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Scroller: int getStartX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TimePicker: java.lang.Integer getCurrentMinute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.SessionExpires: int getExpires()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: short getShort(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getLineForOffset(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: void getVisibleWindowsForDisplay(int,java.util.List)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.view.View getSelectedView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: int getAspectRatio()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.content.res.ColorStateList getTextColors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Frame: int getBindingType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getNextMediaItem(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.NistSipMessageFactoryImpl: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.SignatureSpi: java.security.AlgorithmParameters engineGetParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaFacade: java.lang.String getAuthority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.header.Contact getMyContactHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate$1: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.framework.TestSuite: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: android.app.PendingIntent getSendSmsFromNotificationPendingIntent(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpConnection: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.TwoStatePreference: boolean getDisableDependentsState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieItem: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.AlphaBlendFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore: android.webkit.WebViewClassic getWebViewClassic()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: java.lang.StringBuilder getFilterableStringBuilder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.TimedText: android.graphics.Rect getBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedMap: java.lang.Object writeReplace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getTranslationY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getTranslationX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.RecipientIdCache: java.util.List getAddresses(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.net.URI)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextAfterCursor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getBranch()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.screenshot.GlobalScreenshot$5: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.screenshot.GlobalScreenshot$4: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.LogEntries$DeviceInfoEntry: com.android.inputmethod.latin.LogEntries$DeviceInfoEntry getInstance(long,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipDescription: java.lang.CharSequence getLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: java.lang.String getTargetPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherAppWidgetHostView: int getDescendantFocusability()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.LocatorImpl: java.lang.String getPublicId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.KeyUsage: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridView: int getNumColumns()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: java.nio.ByteBuffer get(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout$SpannedEllipsizer: int getSpanStart(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.widget.Adapter getAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.Credentials: int getUid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine$1: java.util.Map getHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.content.res.Configuration getConfiguration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.Object getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.os.Bundle getInputExtras(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$TabImpl: android.graphics.drawable.Drawable getIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: int getDeviceSubclass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String getLocalIp()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEntry: long getContactId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.CollationElementIteratorICU: int getMaxExpansion(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Canvas: int getMaximumBitmapHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.WorkingMessage: java.lang.CharSequence getSubject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.PluginManager: android.webkit.PluginManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ClientOperation: javax.obex.HeaderSet getReceivedHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.EditPhoneNumberPreference: java.lang.String getRawPhoneNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.PackedIntVector: int getValue(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalExternalAllocSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipData$Item: java.lang.String getHtmlText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.VelocityTrackerCompat: float getXVelocity(android.view.VelocityTracker,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: char getAlphabeticShortcut()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.DownloadDrmHelper: java.lang.String getOriginalMimeType(android.content.Context,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.SAXException: java.lang.Exception getException()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.InputSource: java.io.InputStream getByteStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.RecipientListActivity$RecipientListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BufferedHeader: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb: android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.profiler.HprofData: int getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: long getDefaultSampleDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString$AttributedIterator: int getEndIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.base.Optional$Absent: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: java.nio.ByteBuffer get(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatWidthException: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.FillLightFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: java.lang.Throwable getThrown()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.PointCloud$WaveManager: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getOverScrollMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.AsyncTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.InputStreamEntity: long getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extensions: java.util.Set getCriticalExtensions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.GlowPadView: int getDirectionDescriptionsResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: gov.nist.javax.sip.address.Authority getAuthority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListView: long getPackedPositionForGroup(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpURLConnection: boolean getInstanceFollowRedirects()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: int getHeightGap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: int getHorizontalOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.SensorReader: double getHeadingDegrees()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ColorDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.crypto.RandomBitsSupplier: byte[] getRandomBits(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: java.lang.String getSnippet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Script$FieldBase: android.renderscript.Allocation getAllocation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getNextPage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.TextToSpeech: java.lang.String getDefaultEngine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: int getMaxAgeSeconds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPServerTransaction findPendingTransaction(gov.nist.javax.sip.message.SIPRequest)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ResourceUtils: float getFraction(android.content.res.TypedArray,int,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeNamespace(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardCircleFramedDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEntry: long getExpirationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: java.lang.CharSequence getText(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View$DragShadowBuilder: android.view.View getView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getDefaultUserAgentForLocale(android.content.Context,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ListFragment: android.widget.ListAdapter getListAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: long getUIAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.PagerAdapter: float getPageWidth(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.jar.JarEntry: java.util.jar.Attributes getAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.FolderProperties: int getMessageCount(android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams: int getFrequency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMessage: java.lang.String getFirstHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: float getBottomFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.Replaces: gov.nist.javax.sip.header.CallIdentifier getCallIdentifer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Window: android.view.Window getContainer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.util.ZoneInfo: int getRawOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.SecureRandom: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Transition: android.media.videoeditor.MediaItem getAfterMediaItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: int getNextLocationOffset(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityInteractionClient: java.util.List findAccessibilityNodeInfosByText(int,int,long,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.RuleBasedCollatorICU: java.text.CollationKey getCollationKey(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.RuntimeInit$1: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Currency: int getDefaultFractionDigits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getCaption()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getDimension(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getPublicExponent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarView: java.lang.CharSequence getSubtitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.BaseObj: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: android.database.Cursor getChild(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.Sender: com.android.email.mail.Sender getInstance(android.content.Context,com.android.emailcommon.provider.Account)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ExpiresHeader getExpires()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.OutputPort: android.filterfw.core.InputPort getBasePort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ThreadGroup: int getMaxPriority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.scheme.SchemeRegistry: java.util.List getSchemeNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.OverlayRenderer: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.FileTypeBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URI: java.lang.String getRawQuery()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.WindowManagerImpl: android.view.Display getDefaultDisplay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ComboPreferences: float getFloat(java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.Equalizer: int getCenterFreq(short)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.ExtensionHeader createMinSEHeader(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.CookieSpecBase: java.lang.String getDefaultPath(org.apache.http.cookie.CookieOrigin)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragLayer: android.view.View getAnimatedView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Key: java.lang.String getOutputText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.EventListenerProxy: java.util.EventListener getListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.opengl.Shader: int getAttribute(int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getSolidColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getDefaultMMSMessagesPerThread()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListView: android.widget.ExpandableListAdapter getExpandableListAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable: float getScaleY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.DatePicker: int getYear()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable: float getScaleX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.DropBoxManager$Entry: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace$ZInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.BerInputStream: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$EmptyList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ApplicationParameter: byte[] getAPPparam()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: long getUserActivityTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridView: int getGravity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor wrapCursor(android.database.Cursor,boolean,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,boolean,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: java.lang.String getDeviceUID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.inputmethodservice.InputMethodService: int getCandidatesHiddenVisibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getBeginColumn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.CursorLoader: java.lang.String[] getSelectionArgs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BufferedHeader: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTheme: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extensions$1: java.util.Collection getValues(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: java.net.InetAddress getPeerInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoView: int getCurrentState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Handler: java.util.logging.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IVibratorService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeMessage: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Messenger: android.os.IBinder getBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.RenderScriptGL: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.StatusLine: java.lang.String getSipVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: int getInt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getMasterVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IIntentSender$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEntry: java.lang.String getDestination()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.AdditionalSubtype: android.view.inputmethod.InputMethodSubtype[] createAdditionalSubtypesArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Lists$StringAsImmutableList$1: java.lang.Character get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.shapes.Shape: android.graphics.drawable.shapes.Shape clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.TimeUtils: java.util.TimeZone getTimeZone(int,boolean,long,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: android.os.UpdateLock getUpdateLock()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.LongArrayBuffer: long get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: int getInputMethodMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUniversalString: com.android.org.bouncycastle.asn1.DERUniversalString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getSearchLight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Choreographer: long getFrameTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String getSubserviceIdentifiers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.FileTypeBox: java.lang.String getMajorBrand()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.FtpURLConnection: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.MulticastSocket: java.net.InetAddress getInterface()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsIndexMetaData getMetaDataAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.security.cert.Certificate[] getServerCertificates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEditTextView: android.graphics.drawable.Drawable getChipBackground(com.android.ex.chips.RecipientEntry)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.Gesture: int getStrokesCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.DefaultTargetAuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ComputingConcurrentHashMap: java.lang.Object getOrCompute(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: char getChar(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeUtility: java.lang.String getHeaderParameter(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: float getInvDefaultScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.events.EventImpl: int getSeekTo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Utils: java.lang.String getCityName(com.android.deskclock.worldclock.CityObj,com.android.deskclock.worldclock.CityObj)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MainKeyboardView: int getAltCodeKeyWhileTypingAnimAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.ControlPanelEffect: java.lang.String getParameterString(android.content.Context,java.lang.String,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ContainerEncryptionParams: java.security.spec.AlgorithmParameterSpec getEncryptionSpec()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.AlertController: android.widget.ListView getListView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HeaderViewListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo getDeviceInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getObjectHandle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: boolean getDoInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.GlobalActions$MyAdapter: com.android.internal.policy.impl.GlobalActions$Action getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPathValidatorException: int getIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: long getLong()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getKeyCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: android.content.Intent getIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.HttpConnectionMetricsImpl: long getRequestCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getWindowVisibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Accept: float getQValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItemClassic: byte[] getFlattenedData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProviderOperation: android.content.ContentProviderResult apply(android.content.ContentProvider,android.content.ContentProviderResult[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.AppsCustomizePagedView: java.lang.String getCurrentPageDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer: int getMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ViewAnimator: android.view.animation.Animation getInAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.OverScroller: int getStartX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.OverScroller: int getStartY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.PlainSocketImpl: java.lang.Object getOption(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate$1: byte[] getSigAlgParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: float getLineLeft(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$TransformedEntriesListMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: boolean isMusicActive()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IWallpaperManagerCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.DefaultMapStorage: java.lang.String getDescription(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: int getInputMethodMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.DropBoxManager: boolean isTagEnabled(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertificateFactory: java.util.Iterator getCertPathEncodings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Time$1: java.lang.Object getObjectToEncode(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.InCallTouchUi: int getTouchUiHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: int getInt(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.X509NameEntryConverter: com.android.org.bouncycastle.asn1.ASN1Primitive convertHexEncoded(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.BERTaggedObjectParser: int getTagNo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: int getTransportState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getGlobalSearchActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: long getCSeq()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$ActionPopupWindow: int getTextOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getPointerId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.ResponseHeaders: libcore.net.http.RawHeaders getHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: float[] mapPointFromParentToView(android.view.View,float,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: int getLastIdleTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.UriPermissionOwner$ExternalToken: com.android.server.am.UriPermissionOwner getOwner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideModel: com.android.mms.model.VideoModel getVideo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.EngineParameters: int getTargetFrames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.TransactionTerminatedEvent: javax.sip.ClientTransaction getClientTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getPreviewFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabHost: android.view.View getCurrentTabView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getSource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle$Control: java.util.List getFormats(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getShowVisualIndicator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaHeaderBox: long getTimescale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieItem: float getCenter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteCategory getCategory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: long getReceivedPointerDownTime(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageProcessor: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.RouteTracker: int getHopCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.DownloadProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodClient$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IWallpaperManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: int getInt(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.BackupDataInputStream: java.lang.String getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSpinner: android.os.Parcelable onSaveInstanceState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: float getFloat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getViaHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Event: java.lang.String getEventType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: android.view.View getContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.HttpConnectionMetricsImpl: java.lang.Object getMetric(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getOverrideParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.MessageDisplay: android.graphics.Bitmap access$100(com.google.android.apps.lightcycle.panorama.MessageDisplay,java.lang.String,int,android.graphics.Typeface,float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.VideoFrameProcessor: float[] getRotationEstimate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: float getFraction(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.Credentials: int getPid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: java.lang.reflect.Field getReflectionField(java.io.ObjectStreamField)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.UriImage: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.String getDataString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getScaleY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: byte getByte(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getScaleX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.layout.HVGALayoutParameters: int getImageHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getUnicodeChar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: int getUserAgent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.security.cert.Certificate[] getLocalCertificates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: java.lang.Object getTag(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$Axis: int[] getTrailingMargins()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.MultiValueMapImpl: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: char getDigit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$MakeCallCommand: int getTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PanelView$FlingTracker: float getXVelocity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserModel: android.content.pm.ResolveInfo getActivity(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getRootDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.RealSystemFacade: java.lang.Long getRecommendedMaxBytesOverMobile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: int getInstallLocation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: android.graphics.drawable.Drawable getBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String getCallId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScrollDefaultDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageObject: java.lang.String debugDump()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: int getCountryCodeForRegion(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.Learner: java.util.ArrayList getInstances()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DOMConfiguration getDomConfig()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.LomoishFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.HorizontalScrollView: float getLeftFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Security: java.security.Provider[] getProviders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmRightsManager: android.drm.mobile1.DrmRightsManager getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMap: java.lang.Object remove(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: float getFocusX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: float getFocusY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.ControllerResultUiThreadWrapper: com.android.email.Controller$Result getWrappee()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.MemoryFile: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.AttachmentTypeSelectorAdapter$AttachmentListItem: int getCommand()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.BreakIterator: java.text.BreakIterator getCharacterInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: int getDestinationTypeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ClientOperation: int getResponseCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: java.lang.String getStackName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.RestoreSession: int restoreAll(long,android.app.backup.RestoreObserver)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SuggestionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewGridLayout: android.view.View getChildOnPageAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeySpecParser: java.lang.String getOutputText(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.TextureView: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: int getMaxStaleSeconds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.LayoutTransition: java.util.List getTransitionListeners()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.NativeDaemonEvent: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.SecretKeyFactory: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SharedPreferencesImpl: long getLong(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStatusInfo: int getLastFailureMesgAsInt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalAxisValue(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.DrawableHolder: float getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.DrawableHolder: float getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableCollection: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPathValidator: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: gov.nist.javax.sip.header.Protocol getSentProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: void getContent(java.nio.ByteBuffer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.AccessibilityDelegateCompatJellyBean$1: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormat: java.lang.String getNegativeSuffix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterFunction: android.filterfw.core.FilterContext getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getLabelId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IRestoreObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERT61String: com.android.org.bouncycastle.asn1.DERT61String getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews: java.lang.String getPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getCapacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xml.ExpatParser$ExpatLocator: java.lang.String getSystemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: gov.nist.core.NameValueList getAuthParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.ShortcutInfo: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable getDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getComment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.ProvisionParser: com.android.emailcommon.provider.Policy getPolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.FileUtils: java.io.File getProjectsRootDir(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBufferAdapter: double getDouble(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getToolMinor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.ProcessStats: com.android.internal.os.ProcessStats$Stats getWorkingStats(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.io.pem.PemGenerationException: java.lang.Throwable getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getLineCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ArrayListMultimap: java.util.List get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.content.PackageMonitor: java.lang.String getPackageName(android.content.Intent)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MovieHeaderBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.lang.String getString(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getZipCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserModel: int getActivityIndex(android.content.pm.ResolveInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ScaleDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputEvent: android.view.InputDevice getDevice()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getTargetPosition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager: long getActiveNetworkWarningBytes(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEditTextView: android.text.Spannable getSpannable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAlbumId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebBackForwardList: android.webkit.WebBackForwardList clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.AppGlobals: java.lang.String getInitialPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Folder$OpenMode getMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.PKIXParameters: java.util.Set getInitialPolicies()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewCellLayout: int getContentWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Hashtable$HashtableEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.AbstractHttpMessage: org.apache.http.HeaderIterator headerIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.text.NumberFormat getNumberInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.RegionModel: int getTop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasastore.PicasaStoreFacade: java.io.File getAlbumCoverCacheFile(long,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getSubtypeDisplayName(android.view.inputmethod.InputMethodSubtype,android.content.res.Resources)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModel: java.lang.String getSrc()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.util.ZoneInfoDB: java.lang.String getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getMimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: com.android.mms.data.ContactList getRecipients()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.LayoutSelectorAdapter: java.util.List getData(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ArrayDeque: java.lang.Object getFirst()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl: float getXVelocity(android.view.VelocityTracker,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Movie: long getNextTrackId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageDeleteObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.PowerProfile: int getNumSpeedSteps()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingSet: java.lang.Object delegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItemClassic: java.lang.String getOriginalUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: long getLocalSeqNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver: java.lang.String getResultData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: int getLastVisiblePosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbEndpoint: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.LocalePicker$LocaleInfo: java.lang.String getLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.math.BigInteger getSerialNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getPictureFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: char getPerMill()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.StringTokenizer: java.util.Vector getLines()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.mail.Message: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: int getDeviceProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.FragmentManagerImpl: int getBackStackEntryCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.ImageCacheService: byte[] getBytes(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeDecimalFormat: int getMinimumFractionDigits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieEffect getEffect()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.IllegalFormatCodePointException: int getCodePoint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getDatabasePath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DocumentFragment createDocumentFragment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerBase: java.lang.String getSearchHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DialerKeyListener: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.widget.EmailWidget: android.widget.RemoteViews getLoadingView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getFantasyFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Maps$1: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: java.net.NetworkInterface getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.io.ByteStreams$4: java.io.InputStream getInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Number: short shortValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getSmsToMmsTextThreshold()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.io.ByteStreams$1: java.io.ByteArrayInputStream getInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ColorDrawable: int getColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: android.filterfw.core.SerializedFrame$DirectByteInputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieTransition getTransition(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModel: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.io.ByteStreams$5: java.io.InputStream getInput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedSet: java.util.Iterator iterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ThreePaneLayout: int getMiddlePaneId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable: float getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.TargetDrawable: float getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.BlobCache: byte[] lookup(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentType: gov.nist.javax.sip.header.MediaRange getMediaRange()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMultimap: java.util.Set keySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERIA5String: com.android.org.bouncycastle.asn1.DERIA5String getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: float getBoundedScrollProgress(int,android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILDocument getDocument(com.android.mms.model.SlideshowModel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyCharacterMap: char getMatch(int,char[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter: int getRouteCountStatic()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.Class[] getDeclaredClasses()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Iterators$11: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Iterators$12: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Type: android.renderscript.Element getElement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Enum: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IRemoteControlClient$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AcceptLanguage: java.lang.String getLanguageRange()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.header.Via getViaHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getHeaderField(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ComboPreferences: boolean getBoolean(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.validation.Schema getSchema()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Scroller: int getFinalY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Scroller: int getFinalX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.KeyChain: java.security.PrivateKey getPrivateKey(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.Types: java.lang.reflect.Type[] getClonedTypeArray(org.apache.harmony.luni.lang.reflect.ListOfTypes)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.Metadata: byte[] getByteArray(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.auth.callback.PasswordCallback: char[] getPassword()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.ProcessedData: java.lang.String getSubscriptionId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountManagerResponse$Stub: android.accounts.IAccountManagerResponse asInterface(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.PluginList getPluginList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: int getDescendantFocusability()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.ProvisionParser: boolean getRemoteWipe()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientAlternatesAdapter: java.util.HashMap getMatchingRecipients(android.content.Context,java.util.ArrayList)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentFilter: java.lang.String getDataType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.BodyDescriptor: java.lang.String getTransferEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralSubtree: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.TransitionAlpha: java.lang.String getPNGMaskFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasastore.HttpUtils: org.apache.http.conn.ClientConnectionManager getConnectionManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertificateFactorySpi: java.util.Iterator engineGetCertPathEncodings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.Metadata: java.util.Date getDate(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackRunBox$Entry: long getSampleSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiDevice: int getDisplayHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.MulticastSocket: java.net.NetworkInterface getNetworkInterface()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: int getDestinationId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmInfoRequest: java.lang.String getMimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantLock$Sync: java.lang.Thread getOwner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable: int getResourceId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.Property: java.lang.Class getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.PointCloud: float getScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: android.graphics.Rect getDisplayFrameLw()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ClientSession: javax.obex.HeaderSet disconnect(javax.obex.HeaderSet)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTransition: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioRecord: int getChannelCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.SparseArray: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilPlayer: com.android.mms.dom.smil.SmilPlayer getPlayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipEntry: long getCrc()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Lists$TwoPlusArrayList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.DialogPreference: java.lang.CharSequence getDialogMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: android.view.MotionEvent getLastReceivedEvent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.InsetDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.EasSyncService: boolean getValidateRedirect(com.android.exchange.EasResponse,com.android.emailcommon.provider.HostAuth)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipboardManager: java.lang.CharSequence getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.PluginList: java.util.List getList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.common.widget.CompositeCursorAdapter: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.OverScroller: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SocketFactory getSocketFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ProcessRecord: java.lang.String[] getPackageList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1OctetString getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.FragmentManagerImpl: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.CursorLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Element getElementById(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: int getSelectedItemPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: int getLength(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.auth.AuthScope: java.lang.String getScheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameFormat: int getDimensionCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Hotseat: int getCellXFromOrder(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IMediaScannerListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyStylesSet: com.android.inputmethod.keyboard.internal.KeyStyle getKeyStyle(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: float getReportedHorizontalFovDegrees()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Currency: java.util.Set getAvailableCurrencies()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription loadFirstTask()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: java.lang.String getNodeValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getVolumeState(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getDisplayZoomControls()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.AbsActionBarView: int getContentHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$StaticVarGetter: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String[] getHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.util.Rfc822Token: java.lang.String getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaDatabaseHelper: com.google.android.picasasync.PicasaDatabaseHelper get(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.beans.PropertyChangeSupport: java.beans.PropertyChangeListener[] getPropertyChangeListeners(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUTCTime: java.util.Date getAdjustedDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Handler: java.lang.String getMessageName(android.os.Message)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.RequestWrapper: org.apache.http.HttpRequest getOriginal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature: byte[] sign()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: java.lang.String getPositionDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: java.lang.String getLocation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUniversalString: byte[] getOctets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.TimeStamp: long getTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.TimeToSampleBox getTimeToSampleBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.CipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$EasyEditPopupWindow: int getVerticalLocalPosition(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertPathValidator: java.lang.String getDefaultType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AcceptLanguage: java.util.Locale getAcceptLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.BasicConstraints: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.FileTransforms: java.io.InputStream getUncompressedStream(java.io.InputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: com.google.android.apps.lightcycle.util.Size getPhotoSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECFieldF2m: java.math.BigInteger getReductionPolynomial()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.service.wallpaper.WallpaperService$Engine: int getDesiredMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: long getBoundaryBeginTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Protocol: java.lang.String getProtocolVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.OtherName: byte[] getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: java.lang.String getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.FieldPosition: int getBeginIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.DefaultClientConnection: org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$MemoryUsageCounter: int getMemoryUsage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.profiler.HprofData: java.util.List getThreadHistory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.StorageManager: java.io.File getDownloadDataDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.BoringLayout: int getParagraphDirection(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedThreads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getInputEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.ServiceRecord: int getLastStartId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Builder getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarView: int getNavigationMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.MediaModel: android.net.Uri getUri()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.Rfc822Output: java.lang.String getNextBoundary()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SuggestedWords: java.util.ArrayList getFromApplicationSpecifiedCompletions(android.view.inputmethod.CompletionInfo[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaProperties: android.util.Pair[] getSupportedResolutions(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: byte[] doFinal(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Notification$Style: android.widget.RemoteViews getStandardView(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPDate: java.util.Calendar getJavaCal()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxFragmentAdapter$MailboxFragmentLoader: android.database.Cursor loadInBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.parser.Parser: gov.nist.javax.sip.parser.Lexer getLexer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FastBitmapDrawable: android.graphics.Bitmap getBitmap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralSubtrees: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSet: java.lang.Object writeReplace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: long getBoundaryEndTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getSerifFontFamily()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Currency: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.PlainDatagramSocketImpl: int getTimeToLive()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getLinkTextColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaInformationBox: com.coremedia.iso.boxes.SampleTableBox getSampleTableBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.SimpleCache: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaEriText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity: android.preference.PreferenceActivity$Header onGetNewHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipEntry: java.lang.String getComment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getDomain()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.PackageSettingBase: java.util.HashSet getEnabledComponents(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.KeyValueMap: int getInt(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Collator: java.util.Locale[] getAvailableLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONArray: long getLong(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: java.lang.String getResourceName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.BinaryDictionaryGetter: java.lang.String getCacheFileName(java.lang.String,java.lang.String,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.AsYouTypeFormatter getAsYouTypeFormatter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: boolean getPackageAskScreenCompat(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.RouteTracker: org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: java.lang.String[] getAvailableIDs(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getNamespacePrefix(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: double getDoubleExtra(java.lang.String,double)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.SocketChannelImpl$SocketAdapter: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.ReasonCode: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: android.net.Uri getUri()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableCollection$Builder: com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicStatusLine: java.lang.String getReasonPhrase()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableMap: java.util.Set keySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.NativeDaemonEvent: int getCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getUserAgentString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.FullContainerBox: java.util.List getBoxes(java.lang.Class,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.CallIdentifier: java.lang.String getLocalId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.Host: java.net.InetAddress getInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.FullContainerBox: void getContent(java.nio.ByteBuffer)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Accept: java.lang.String getContentSubType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getKeyboardLayoutSetDisplayName(android.view.inputmethod.InputMethodSubtype)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentTasksLoader: android.graphics.drawable.Drawable getFullResDefaultActivityIcon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: android.content.Context getActivityContext(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantLock$Sync: int getHoldCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Overlay: long getStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.os.ParcelableCompatCreatorHoneycombMR2: java.lang.Object createFromParcel(android.os.Parcel)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DropDownAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.BinderInternal: long getLastGcTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSpinner: android.widget.Adapter getAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getPrivateExponent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getRelativeChildOffset(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideModel: com.android.mms.model.MediaModel get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.TimeZones: java.lang.String getDisplayName(java.lang.String[][],java.lang.String,boolean,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: int getReceiveUdpBufferSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getCommentURL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getCompoundPaddingRight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.util.Set keySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.GLUtils: java.lang.String getEGLErrorString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.NumberFormat: java.text.NumberFormat getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.AccessibilityNodeInfoHelper: android.graphics.Rect getVisibleBoundsInScreen(android.view.accessibility.AccessibilityNodeInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.AbsSavedState: android.os.Parcelable getSuperState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: long getMediaItemBeginTime(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageProcessor: int getMaximumMessageSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Parcel: java.io.Serializable readSerializable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ListOfVariables: java.lang.reflect.TypeVariable[] getArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MessageFactoryImpl: java.lang.String getDefaultContentEncodingCharset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: int getActiveClientTransactionCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UiUtilities: android.view.View getView(android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getExternalStorageAppDataDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Thread: java.lang.Thread$State getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getVisibleTitleHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountAuthenticator$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: int getAudioChannels()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ProgressDialog: int getProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionBundle: java.lang.String getMmscUrl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: int getTextZoom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityOptions: android.os.IRemoteCallback getOnAnimationStartListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListPopupWindow: long getSelectedItemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.GlowPadView: int getSuggestedMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DEROctetStringParser: java.io.InputStream getOctetStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyCharacterMap: char getDisplayLabel(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ScaleDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: int getDefaultFontSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.GlobalActions$MyAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: long getLastReceivedUpPointerDownTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: java.lang.String getProfileFilePath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.DigitalSignature: byte[] sign()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: java.lang.String getLocalName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String getFromTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.LinkedList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.StorageManager$ObbListenerDelegate: android.os.storage.OnObbStateChangeListener getListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PopupManager: com.android.camera.ui.PopupManager getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1StringType: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ImageCombineFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.util.BasicLruCache: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: org.apache.harmony.security.x509.GeneralNames getAuthorityCertIssuer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$10: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getQop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic$PrivateHandler: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Security: java.util.Set getAlgorithms(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ListView: int getFooterViewsCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.BitmapRegionDecoder: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetSocketAddress: java.lang.String getHostName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation: android.os.Bundle getBinderCounts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.drm.DrmUtils: java.lang.String getConvertExtension(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: boolean getMaxBiometricUnlockAttemptsReached()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterView: int getPositionForView(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Validity: java.util.Date getNotBefore()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getLastMediaItemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViewsAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoView: int getTextureName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl$HttpUrlConnectionDelegate: java.net.SecureCacheResponse getCacheResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ComponentName: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.PropertyValuesHolder: java.lang.Object getAnimatedValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getTopPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.pm.PackageManager,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.LeadingMarginSpan$Standard: int getLeadingMargin(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraHolder: int getBackCameraId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CertificateList: byte[] access$300(org.apache.harmony.security.x509.CertificateList)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.geometry.Rectangle: float getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.StringUtils: java.lang.String getTimestampAsString(android.content.Context,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.NetObject: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMap$StandardKeySet: java.util.Map map()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IUiModeManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmConstraintInfo: java.util.Date getStartDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters getCameraParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.MemoryBlock$NonMovableHeapBlock: byte[] array()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoView: int getVideoLayerId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: java.lang.String getDefaultUserAgent(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceScreen: android.app.Dialog getDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: int getInt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.transport.MailTransport: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadsManager: long addManualUpload(com.google.android.picasasync.UploadTaskEntry)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.camera.CameraUtility: java.lang.String getFlashMode(com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.WebSettings getSettings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.beetstra.jutf7.Base64Util: byte getChar(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.mail.Multipart: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Canvas: javax.microedition.khronos.opengles.GL getGL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: java.util.List getDecodingTimeEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ProcessManager$ProcessImpl: java.io.InputStream getErrorStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: java.lang.String getMultiParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.ContentCache$CacheToken: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapString$1: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridView: int getHorizontalSpacing()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ListActivity: android.widget.ListView getListView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.Utils: java.lang.String getStackTrace(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay getActiveDisplay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.SuggestionStripView: com.android.inputmethod.latin.SuggestedWords getSuggestions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageListFragment: com.android.email.MessageListContext getListContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner: int getGravity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmRawContent: int getContentLength(android.drm.mobile1.DrmRights)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Keyboard: com.android.inputmethod.keyboard.Key[] getNearestKeys(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapMemoryLiteral: java.io.InputStream getAsStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.Transaction: com.android.mms.transaction.TransactionSettings getConnectionSettings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharSequenceAdapter: char get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: int getInteger(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ProgressDialog: int getSecondaryProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.LexerCore: java.lang.String getRest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: boolean getBaselineAlignBottom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientChip: long getDataId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.AuthenticatedAttributes: java.util.List getAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Registrant: android.os.Handler getHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: java.util.Map getRequestProperties()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion getProtocolVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.AbstractList$SubAbstractList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gms.common.internal.GmsClient: java.util.ArrayList access$100(com.google.android.gms.common.internal.GmsClient)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTransition: int getAlphaMaskBlendingPercent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String getTerminatingIOI()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ContextThemeWrapper: int getThemeResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.security.interfaces.RSAPublicKey getRSAPublicKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterGraph: android.filterfw.core.Filter getFilter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyCharacterMap: android.view.KeyCharacterMap$FallbackAction getFallbackAction(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.JarURLConnection: java.util.jar.Attributes getAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.TextKeyListener$NullKeyListener: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.DrawableHolder: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.SurfaceTexture: long getTimestamp()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.StateListDrawable$StateListState getStateListState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$NullEntry: int getHash()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getVerticalOffset(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getMarqueeRepeatLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ListPreference: java.lang.String getEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getStorageEncryptionStatus(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.MathContext: java.math.RoundingMode getRoundingMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.AttachmentTypeSelectorAdapter: java.util.List getData(int,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getThreadExternalAllocSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.input.PersistentDataStore: java.lang.String[] getKeyboardLayouts(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.HTML5VideoView: boolean getReadyToUseSurfTex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.DrawableHolder: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.ICU: java.lang.String[] getISOCountries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.content.res.Configuration applyConfigCompatMainThread(int,android.content.res.Configuration,android.content.res.CompatibilityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getLineBaseline(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.SizeAdaptiveLayout: android.view.View getModestyPanel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.CorrectionInfo: int getOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.RealSystemFacade: android.net.NetworkInfo getActiveNetworkInfo(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: java.util.List getRunningExternalApplications()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMapEntry: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.AccessibilityIterators$AbstractTextSegmentIterator: int[] getRange(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$ArrayAdapterWithButtons: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: android.text.Layout$Alignment getAlignment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getLeftPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack$NativeEventHandlerDelegate: android.os.Handler getHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.storage.StorageManagerFactory: com.google.android.apps.lightcycle.storage.StorageManager getStorageManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.NameConstraints: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: java.net.InetAddress getsockoptInAddr(java.io.FileDescriptor,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.Credentials: int getGid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogRecord: java.util.logging.Level getLevel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.AssetManager: boolean getResourceValue(int,int,android.util.TypedValue,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: int getChildCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.NotificationData$Entry: android.view.View getLargeView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabHost: java.lang.String getCurrentTabTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.TimePicker: int getLayoutId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getPivotY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPDateTimeImpl: int getNanoSecond()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getPivotX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ErrorInfo: javax.sip.address.URI getErrorInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.FloatArrayBuffer: float get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1StreamParser: com.android.org.bouncycastle.asn1.ASN1Encodable readObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.UserHistoryDictionaryBigramList: java.util.HashMap getBigrams(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IVibratorService$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.LocalePicker$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.SerializeOptions: int getPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraScreenNail: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.Presenter: com.android.mms.model.Model getModel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: int getPeerPacketSourcePort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: float getX(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: boolean isBouncing()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: float getY(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: int getServerTransactionTableSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DoubleArrayBuffer: double get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: com.coremedia.iso.boxes.Box getMediaHeaderBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.CallTime: long getCallDuration(com.android.internal.telephony.Call)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.TaskDescription: android.graphics.Bitmap getThumbnail()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.provider.GalResult$GalData: java.lang.String get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getWidth(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMap: java.util.Set entrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: char getDecimalSeparator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.SubjectKeyIdentifier: byte[] getKeyIdentifier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakValueReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERPrintableString: com.android.org.bouncycastle.asn1.DERPrintableString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientAlternatesAdapter: java.util.HashMap getMatchingRecipients(android.content.Context,java.util.ArrayList,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.HttpHost: java.lang.String getSchemeName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(com.android.videoeditor.service.MovieTransition)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation$ActivityResult: android.content.Intent getResultData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.view.View getChildAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: int getComponentEnabledSetting(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.AccessibilityDelegateCompat: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: java.lang.CharSequence getContentDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaApi: int getAlbums(com.google.android.picasasync.UserEntry,com.google.android.picasasync.PicasaApi$EntryHandler)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamField: java.lang.String getTypeString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNode: java.util.List getUnmodifiableChildren()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getAttributeIntValue(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.ListPreference: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InterfaceAddress: short getNetworkPrefixLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: android.view.View getActionView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.WaveformData: int getFrameDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gms.common.internal.GmsClient: java.util.ArrayList access$200(com.google.android.gms.common.internal.GmsClient)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.DefaultRouter: java.util.ListIterator getNextHops(javax.sip.message.Request)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: int getViaPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.ContentCache: java.util.Map getSnapshot()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.IntentResolver: java.lang.Object newResult(android.content.IntentFilter,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: gov.nist.javax.sip.header.extensions.ReferencesHeader createReferencesHeader(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaImageItem: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.PagerAdapter: java.lang.CharSequence getPageTitle(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.EmailContent: android.net.Uri save(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.JarURLConnection: java.util.jar.Manifest getManifest()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: float getHorizontalViewAngle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.DefaultClientConnection: java.net.Socket getSocket()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: int getBottomPaddingOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetEncoder: float maxBytesPerChar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$BitmapReflectionAction: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.SimpleTimeZone: int getOffset(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.codec.binary.Hex: byte[] encode(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardRow: int getDefaultBackgroundType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.NameValueList: java.util.Iterator getNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.content.Context getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: byte[] getKeyIdentifier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: float getAnimatedFraction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternView$SavedState: java.lang.String getSerializedPattern()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: int getResourceId(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Daemons$Daemon: java.lang.StackTraceElement[] getStackTrace()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigestSpi: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.NativeFrame: int[] getInts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getNextFocusUpId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.SimpleTimeZone: int getRawOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Formatter$FormatToken: char getConversionType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.content.PackageMonitor: android.os.Handler getRegisteredHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.textservice.SpellCheckerSubtype: int getNameResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getScheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation$Cache: com.android.mms.data.Conversation$Cache getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: libcore.net.http.HttpEngine getHttpEngine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.util.List leadingDigitPatterns()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.RDN: com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue getFirst()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.LayerDrawable$LayerState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IUiModeManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: java.net.SocketAddress getsockname(java.io.FileDescriptor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageProcessor: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.PackageSettingBase: int getEnabled(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getLineCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.PKIXParameters: boolean getPolicyQualifiersRejected()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.MailboxList: org.apache.james.mime4j.field.address.Mailbox get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getEmailAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.InputSource: java.lang.String getPublicId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getReasonPhrase(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Formatter: java.lang.String getHead(java.util.logging.Handler)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socks4Message: java.lang.String getErrorString(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout$ViewCluster: int[] getEdge(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaSyncHelper: com.google.android.picasasync.PicasaSyncHelper getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: int getFileType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.animation.Animator startDelay(int,android.animation.Animator)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.LexerCore: java.lang.String getString(char)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuView: int getWindowAnimations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilMediaElementImpl: org.w3c.dom.smil.TimeList getEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.FtpHandler: int getDefaultPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ui.PieRenderer: int getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledWindowTouchSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: android.media.videoeditor.WaveformData getWaveformData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getFirstArgument(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERUniversalString: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getNextFocusDownId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilMediaElementImpl: float getDur()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: boolean isMicrophoneMute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestions$Divider: android.graphics.drawable.Drawable getIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.DialogTimeoutEvent: javax.sip.Dialog getDialog()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.TrackMetaData: java.util.Date getCreationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientAlternatesAdapter: com.android.ex.chips.RecipientEntry getRecipientEntry(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPTransaction getLastTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.logging.LogConfigurationException: java.lang.Throwable getCause()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.IntentResolver: java.util.Iterator filterIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Keyboard: com.android.inputmethod.keyboard.ProximityInfo getProximityInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getStatusByAccountAndAuthority(android.accounts.Account,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: java.lang.CharSequence getImeActionLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: com.android.emailcommon.provider.EmailContent$Attachment[] doInBackground(java.lang.Long[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.net.DefaultNetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Utils$ScreensaverMoveSaverRunnable$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Chronometer: java.lang.String getFormat()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SearchView: java.lang.CharSequence getQueryHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.IssuingDistributionPoint: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: int getAppVolume()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: android.webkit.WebSettings$TextSize getTextSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.BufferedHttpEntity: long getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.NodeImpl: java.lang.String getTextContent()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.Object getParm(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.downloads.DownloadProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.AbstractSyncAdapter: android.content.ContentProviderResult[] safeExecute(java.lang.String,java.util.ArrayList)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: float getBackgroundAlphaMultiplier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioManager: int getStreamVolume(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyboardLayoutSet: com.android.inputmethod.keyboard.Keyboard getKeyboard(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ResolverActivity$ResolveListAdapter: java.lang.Object getItem(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ClipDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector: int getDisplayInitialOrientationDegrees()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.Object[] getSigners()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.database.SortCursor: byte[] getBlob(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: java.lang.String getClassName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.CodeSigner: java.security.Timestamp getTimestamp()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$902(com.android.ex.chips.BaseRecipientAdapter,java.util.List)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getViewWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.IBatteryStats$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Frame: android.filterfw.core.Frame release()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: android.content.res.Resources getResources()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CertificateRequest: java.lang.String[] getTypesAsString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: java.util.List getRunningAppProcesses()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: int getResponseCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.CommonTimeConfig: byte getMasterElectionPriority()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.SecurityManager: java.lang.Class currentLoadedClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: int getItemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView$HitTestResult: int getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.DragView: android.graphics.Point getDragVisualizeOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo createContextMenuInfo(android.view.View,int,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaMetadataRetriever: byte[] getEmbeddedPicture()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.usb.UsbDeviceManager: java.lang.String access$400()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Fragment: android.app.Fragment getParentFragment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.security.Provider getProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.validation.ValidatorHandler: boolean getFeature(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: android.view.ActionProvider getActionProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getAddressLine2()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getAddressLine1()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: int getCurrentUser()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.PowerManager: boolean isWakeLockLevelSupported(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.net.Uri getData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Handler: java.util.logging.Formatter getFormatter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Security: java.lang.String getAlgorithmProperty(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getPlaybackHeadPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.TunnelRefusedException: org.apache.http.HttpResponse getResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.TimeStamp: int getTimeDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.sax.Children: android.sax.Element getOrCreate(android.sax.Element,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress getPeerPacketSourceAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.view.View findFocus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.ChunkOffsetBox getChunkOffsetBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.OverScroller: int getFinalX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.OverScroller: int getFinalY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List queryIntentServices(android.content.Intent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTheme: int getPreviewMovieResId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideModel: com.android.mms.model.AudioModel getAudio()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingMapEntry: java.lang.Object delegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstanceForFullKeyboard()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DoubleToByteBufferAdapter: double get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.TempDirectory: java.io.File getTempDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getMaxImageHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.LayoutTransition: long getStagger(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.File)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: int[] getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.ButtonDropTarget: com.android.launcher2.DropTarget getDropTargetDelegate(com.android.launcher2.DropTarget$DragObject)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.AbstractSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Date: int getTimezoneOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getSentBy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.TimeStamp: float getTimeStamp()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.Object getApplicationData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmRightsManager: java.util.List getRightsList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Program$BaseProgramBuilder: int getCurrentTextureIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.Object[] getEnumConstants()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.LongArrayBuffer: java.nio.LongBuffer get(long[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.LinkedList: java.lang.Object getLast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getBlockNetworkLoads()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.fortress.Services: java.security.Provider getProvider(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.MultipartMimeContentImpl: java.util.Iterator getContents()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ProxyRequire: java.lang.String getOptionTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ITransientNotification$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.RFC2109Spec: org.apache.http.Header getVersionHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.JarURLConnectionImpl: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor getThreadAuditor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.CountingTimerView$UnsignedTime: float getLabelWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeDecimalFormat: java.lang.String getPositivePrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List intlNumberFormats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ResourceUtils: float getFraction(android.content.res.TypedArray,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Canvas: android.graphics.DrawFilter getDrawFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SimpleAdapter: android.widget.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x501.Name getIssuer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Chronometer: android.widget.Chronometer$OnChronometerTickListener getOnChronometerTickListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.widgets.MediaLinearLayout: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.AbstractStringBuilder: char[] getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RAck: java.lang.String getMethod()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsApp: android.drm.DrmManagerClient getDrmManagerClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.VendorPolicyLoader: com.android.email.VendorPolicyLoader getInstance(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.ProcessManager$ProcessImpl: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.display.PersistentDataStore: android.hardware.display.WifiDisplay getRememberedWifiDisplay(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$3: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$4: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$5: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getResponseMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.BasicPoolEntryRef: org.apache.http.conn.routing.HttpRoute getRoute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$1: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$2: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$8: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$9: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DEREnumerated: java.math.BigInteger getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$6: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.PagerAdapter: int getItemPosition(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkVars$7: java.lang.String get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleDependencyTypeBox: java.util.List getEntries()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RawHeaders: libcore.net.http.RawHeaders getAll(java.util.Set)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getCountry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable: int getMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Switch: android.graphics.drawable.Drawable getThumbDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: java.lang.Object getApplicationData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ArrayDeque: java.lang.Object getLast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.PackageManagerBackupAgent: com.android.server.PackageManagerBackupAgent$Metadata getRestoredMetadata(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Window: int getFeatures()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getMimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelephoneNumber: java.lang.String getPhoneNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl: float getYVelocity(android.view.VelocityTracker,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.BitmapOverlayFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.UploadTaskEntry: com.google.android.picasasync.UploadTaskEntry createNew(android.content.ContentValues,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout: float getDistanceFromCell(float,float,int[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Region: android.graphics.Rect getBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.LayoutModel: java.util.ArrayList getRegions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup: int getPersistentDrawingCache()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ListActivity: int getSelectedItemPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.RuleBasedBreakIterator: java.text.CharacterIterator getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.String: byte[] getBytes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.VideoView: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Mesh: int getPrimitiveCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive getObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getOpenGlDefaultFieldOfViewDegrees()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ObexHelper: byte[] getTagValue(byte,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.ResourceBundle$Control)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.lang.String format(java.util.Date)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token jjFillToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: int getRetransmitTimer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$InternalThumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options,android.net.Uri,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.SuggestionSpan: java.lang.String[] getSuggestions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieOverlay: long getAppDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.wm.WindowState: int getSystemUiVisibility()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getMagnifiedRegionCenterX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getMagnifiedRegionCenterY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SlideModel: int getSlideSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackBox: com.coremedia.iso.boxes.TrackHeaderBox getTrackHeaderBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.NotificationController: android.text.SpannableString getNewMessageTitle(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.EventLogger: libcore.io.EventLogger$Reporter getReporter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IInputFilterHost$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageCleanItem nextPackageToClean(android.content.pm.PackageCleanItem)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.DERBoolean getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Overlay: java.util.Map getUserAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.Element getDocumentElement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetSocketAddress: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getTargetHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.net.VpnConfig: android.app.PendingIntent getIntentForStatusPanel(android.content.Context,com.android.internal.net.VpnConfig)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$NullEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: float getCameraDistance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.IUsageStats$Stub$Proxy: com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.io.File getCacheDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl$2: android.view.Surface getSurface()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.NameValue: java.lang.Object getValueAsObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEntry: java.lang.String getDestinationLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession$SuggestionsCache: com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession$SuggestionsParams getSuggestionsFromCache(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.BinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: java.lang.Object get()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.BaseObj: int getID(android.renderscript.RenderScript)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ResolverActivity: android.graphics.drawable.Drawable getIcon(android.content.res.Resources,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.message.SIPRequest createRequest(gov.nist.javax.sip.address.SipUri,gov.nist.javax.sip.header.Via,gov.nist.javax.sip.header.CSeq,gov.nist.javax.sip.header.From,gov.nist.javax.sip.header.To)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl: float getX(android.view.MotionEvent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpObjectInfo: int getAssociationDesc()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl: float getY(android.view.MotionEvent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsg()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.io.pem.PemHeader: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.GlowPadView: int getScaledSuggestedMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.AudioTrack: int getAudioBitrate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: int getCallState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getSecond()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DropDownAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IThumbnailRetriever$Stub$Proxy: android.graphics.Bitmap getThumbnail(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getSystemId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AlertInfo: javax.sip.address.URI getAlertInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IRemoteVolumeObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: char getNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorImpl: java.util.List getAllTransitions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerBase: long getActualAccountId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Entity: java.util.ArrayList getSubValues()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: javax.sip.header.Header getFirst()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: int getChildrenSkipCount(android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.sip.SipSharedPreferences: java.lang.String getSipCallOption()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AlgorithmParameters: byte[] getEncoded(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: org.apache.harmony.luni.lang.reflect.ImplForVariable parseTypeVariableSignature()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Sequence$1: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SimpleSessionDescription: int getBandwidth(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: java.util.List getUsers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getMaxMessageSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.cookie.CookieSpecRegistry: org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String,org.apache.http.params.HttpParams)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: int getAboveUniverseLayer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.ListPreference: java.lang.CharSequence getSummary()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getUserSystemDirectory(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName(android.content.res.Resources)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.SensorReader: float getAngularVelocitySquaredRad()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: java.io.File getPanoDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabHost$FactoryContentStrategy: android.view.View getContentView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: int getMessageCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$TransformedEntriesMultimap$TransformedEntries$1$1: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getQop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.Charset: java.util.Set aliases()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstMutationResult: com.google.common.collect.BstNode getChangedRoot()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection getDialogs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.entity.BasicHttpEntity: long getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.auth.AuthSchemeRegistry: org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.InfoAccessSyntax: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.ButtonDropTarget: android.graphics.drawable.Drawable getCurrentDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.PatternMatcher: java.lang.String getPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TimePicker: java.lang.Integer getCurrentHour()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPServerTransaction getInviteTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.SensorReader: boolean getEkfEnabled()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)> android.permission.WRITE_SETTINGS android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.CHANGE_CONFIGURATION - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: float getContentAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: int getProcessLimit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountServiceListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: int getStyleAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite getByCode(byte,byte)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.DisplayList getDisplayList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterFactory: android.filterfw.core.Filter createFilterByClassName(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.NotificationController$NotificationThread: android.os.Looper getLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.mail.Address: java.lang.String getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ViewAnimator: android.view.View getCurrentView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.TrustAnchor: javax.security.auth.x500.X500Principal getCA()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: android.os.IBinder getFocusedWindowToken()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.PlainSocketImpl: java.io.OutputStream getOutputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: java.lang.String getCurrentPageDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getSuggestedMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ColorDrawable: int getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: float getParameterAsFloat(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: float getFloat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.PopupWindow: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.OtherName: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: float getFloat(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.NodeList getTimeChildren()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.provider.cert.X509CertImpl: java.util.Date getNotAfter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.ExemptionMechanism: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.InputConnectionWrapper: int getCursorCapsMode(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableMap: java.util.Set entrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.X500Name getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: long getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MessageList: android.content.Intent createFroyoIntent(android.content.Context,com.android.emailcommon.provider.Account)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.clientauthutils.AuthenticationHelper getSecureAuthenticationHelper(gov.nist.javax.sip.clientauthutils.SecureAccountManager,javax.sip.header.HeaderFactory)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.SerializablePermission: java.lang.String getActions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: java.lang.String getDefaultUserAgent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.drawable.TextDrawable: int getOpacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.QwertyKeyListener: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: android.graphics.Bitmap getFavicon()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.util.TimeZone getTimeZone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie: int[] getPorts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.MetaKeyKeyListener: int getMetaState(long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ContainerEncryptionParams: long getEncryptedDataStart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: java.lang.String getPackageResourcePath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.Extension: boolean getCritical()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gms.panorama.internal.PanoramaClientImpl: java.lang.String getServiceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Loader: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable: int getWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager$ZInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getValue(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.BackStackRecord: int getTransition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentDisposition: java.lang.String getHandling()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: java.lang.String getPluginsPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: char getDisplayLabel()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: android.preference.Preference$OnPreferenceClickListener getOnPreferenceClickListener()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicStatusLine: org.apache.http.ProtocolVersion getProtocolVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.KeyboardSwitcher: com.android.inputmethod.keyboard.MainKeyboardView getMainKeyboardView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IOnKeyguardExitResult$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Surface: android.os.IBinder getBuiltInDisplay(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Boolean getPropertyBoolean(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FolderIcon: boolean getTextVisible()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaVideoItem: long getBoundaryEndTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalY(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalX(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.MultiTapKeyListener: android.text.method.MultiTapKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: int getConfigDisplayWidth(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AcceptLanguageList: gov.nist.javax.sip.header.AcceptLanguage getLast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.IntentPool: android.content.Intent get(android.content.Context,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.JarURLConnection: java.net.URL getJarFileURL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.EngineParameters: int getStartPositionMillis()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity$HeaderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamField: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.SuggestionStripView$SuggestionStripViewParams: java.lang.CharSequence getAddToDictionaryWord()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.security.cert.Certificate[] getPeerCertificates()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getSavedIpAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: int getRemoteSequenceNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager$FastBitmapDrawable: int getMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl$20: java.lang.Object getService(android.app.ContextImpl)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithmName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Permission: java.security.PermissionCollection newPermissionCollection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignedData$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmInfo: int getInfoType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.StaticChunkOffsetBox: long getContentSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.Effect: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedView: int getCurrentPage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilPlayer$TimelineEntry: double getOffsetTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: java.lang.String getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.WallpaperManager: int getDesiredMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.musicfx.ControlPanelEffect: int getParameterInt(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout$ViewCluster: int[] getTopEdge()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.TimeUtils: java.lang.String getTimeZoneDatabaseVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPw(android.content.pm.PackageParser$Package,com.android.server.pm.PackageSetting,java.lang.String,com.android.server.pm.SharedUserSetting,java.io.File,java.io.File,java.lang.String,int,android.os.UserHandle,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Null: com.android.org.bouncycastle.asn1.ASN1Null getInstance(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableList: java.lang.Object set(int,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPDuplicateHeaderException: gov.nist.javax.sip.message.SIPMessage getSIPMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.TransitionAlpha: java.lang.String getMaskFilename()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraHolder: int getFrontCameraId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.MailboxFragmentAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.PinListEntry: java.lang.String getCommonName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.StrictMode$AndroidBlockGuardPolicy: int getPolicyMask()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getSaveFormData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getKeyWidth(android.content.res.TypedArray)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.am.CoreSettingsObserver: android.os.Bundle getCoreSettingsLocked()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.KeyEvent: int getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.SmsReceiver: com.android.mms.transaction.SmsReceiver getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.geometry.Quad: float getBoundingWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.ZipEntry: long getTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.ComponentInfo: android.content.pm.ApplicationInfo getApplicationInfo()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy getThreadPolicy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.HideReturnsTransformationMethod: char[] getReplacement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.FocusFinder: android.view.FocusFinder getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.lang.String[][] internalZoneStrings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: boolean getAllowFileAccess()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine: int getLogRecSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.inputmethodservice.Keyboard: int getMinWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.RAckHeader createRAckHeader(int,int,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.TypedArray: int getInt(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameManager: android.filterfw.core.FilterContext getContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.BodyDescriptor: java.lang.String getBoundary()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.util.logging.Logger getParent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long getDelay(java.util.concurrent.TimeUnit)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.crypto.internal.NullCipherSpi: byte[] engineGetIV()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MediaHeaderBox: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: int getMaxHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DatagramChannelImpl: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getLongPressTimeout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.ActionBarView$HomeView: int getStartOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieAudioTrack: long getBoundaryBeginTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpRetryException: java.lang.String getReason()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.BlendFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub$Proxy: float getWindowCompatibilityScale(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Activity: android.app.Application getApplication()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Null: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.util.ListIterator listIterator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20TextureLayer: android.view.HardwareCanvas getCanvas()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.HostPort: int getPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.mail.Folder: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TreeMap$Node: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getDigestMD5withoutLast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: java.lang.String getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Quad$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Quad$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: int getUserAgent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: float getScrollProgress(int,android.view.View,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Quad$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.FormatFlagsConversionMismatchException: char getConversion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.SensorReader: float[] getFilterOutput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.QueryController: android.view.accessibility.AccessibilityNodeInfo getAccessibilityRootNode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: float getBackgroundAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: android.util.SparseLongArray getChildNodeIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.Cipher: int getOutputSize(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Field: short getShort(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelephoneNumber: gov.nist.core.NameValueList getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDeviceInfo: java.lang.String getManufacturer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getScrollY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getScrollX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getScrollY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ContentType: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: int getScrollX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getContentType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt32Format(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.BodyDescriptor: java.lang.String getMimeType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.ToGrayFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView$WebViewTransport: android.webkit.WebView getWebView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int getSelectedItemsNum()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmConstraintInfo: java.util.Date getEndDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode findChildByName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: java.lang.String[] getSupportedCipherSuites()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.TreeMultiset$LiveEntry: java.lang.Object getElement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.SynthesisRequest: java.lang.String getVariant()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.Recycler$MmsRecycler: long getThreadId(android.database.Cursor)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DropDownAdapter: int getItemViewType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PrefetchHelper$PrefetchContext: int getDownloadFailCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.BaseRecipientAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Canvas: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: int getLayoutDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.message.Request createRequest(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaProperties: int[] getAllSupportedAspectRatios()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getInviteTransaction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: android.os.Looper getMainLooper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Sensor: int getMinDelay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalExternalFreedSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getNamespace(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaSyncHelper: java.util.ArrayList getUsers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetDecoder: java.lang.String replacement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getFirst(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Security: java.security.Provider[] getProviders(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle,android.os.UserHandle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.SocketImpl: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.PolicyInformation: java.lang.String getPolicyIdentifier()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.TimeZones$ZoneStringsCache: java.lang.Object create(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Sensor: float getResolution()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ExpandableListActivity: long getSelectedPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getEdgeFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBitString: byte[] getBytes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.EngineParameters: float getInitialRate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: org.w3c.dom.Attr getAttributeNode(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker: com.google.common.collect.MapMakerInternalMap$Strength getKeyStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.lang.String getResourceBundleName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: float getShadowDx()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: float getShadowDy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.IntArrayBuffer: int get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ServerSocketChannelImpl: java.io.FileDescriptor getFD()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.utility.Utility: java.lang.String[] getRowColumns(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.ChipsRecipientAdapter: int getItemLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.Calendar getCalendar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getExtendedPaddingBottom()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: boolean getAdjustViewBounds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FrameManager: android.filterfw.core.GLEnvironment getGLEnvironment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.provider.EmailProvider: android.database.sqlite.SQLiteDatabase getDatabase(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: java.util.Locale getTextServicesLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.MmsConfig: int getMaxSizeScaleForPendingMmsAllowed()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: float getTextSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Currency: java.lang.String getSymbol(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.widget.MmsWidgetService$MmsFactory: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation,java.lang.Runnable)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getPlaybackRate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.conn.HttpHostConnectException: org.apache.http.HttpHost getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: int getUidForSharedUser(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.PendingIntent: java.lang.String getCreatorPackage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.DeliveryReportActivity$MmsReportRequest: java.lang.String getRecipient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetAddress: java.lang.String getCanonicalHostName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.MovieHeaderBox: long getCreationTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams getParams()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.ui.RecipientsEditor: int getRecipientCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.DuplicateNameValueList: java.lang.String getParameter(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: long getTimeDelta()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.Keyframe$FloatKeyframe: java.lang.Object getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.NumberPicker: int getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getTouchMinor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HorizontalScrollView: int getMaxScrollAmount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: float getScaleFactor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Telephony$Mms: java.lang.String getMessageBoxName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore$PasswordProtection: char[] getPassword()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.PKIXParameters: java.util.Set getTrustAnchors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MiniThumbFile: long getMagic(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.url.JarURLConnectionImpl: int getContentLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.RingtonePreference: boolean getShowSilent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date: int getMonth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamField: java.lang.Class getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.SignedData: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: float getScaleFactor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DocumentType getDoctype()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter$RouteInfo: int getPlaybackStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ByteBuffer: java.lang.Object array()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate$1: java.util.Date getNotAfter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Protocol: java.lang.String getProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.ObjectStreamClass: long getSerialVersionUID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionState: int getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CallbackProxy: int getProgress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.util.Recycler$SmsRecycler: int getMessageLimit(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.BlockGuard$BlockGuardPolicyException: int getPolicyViolation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: libcore.net.http.HttpEngine getHttpEngine()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.HttpResponse receiveResponseHeader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.VerificationParams: int getInstallerUid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.InputManager: int getPointerSpeed(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabHost: int getCurrentTab()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.TintFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CacheManager$CacheResult: int getHttpStatusCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstNode: com.google.common.collect.BstNode getChild(com.google.common.collect.BstSide)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILDocument getDocument(com.google.android.mms.pdu.PduBody)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.ValueAnimator: int getRepeatMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie2: java.lang.String getCommentURL()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetHost: int[] getAppWidgetIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getChildIndexForRelativeOffset(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ZoomButtonsController: android.view.View getZoomControls()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.InvalidityDate: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Any: int getEncodedLength(org.apache.harmony.security.asn1.BerOutputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.icu.NativeBreakIterator: java.text.CharacterIterator getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Maps$ImprovedAbstractMap: java.util.Set entrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFieldsForLoading: byte get(java.lang.String,byte)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager getDPM()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: java.util.Currency getCurrency()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.BreakIterator: java.util.Locale[] getAvailableLocales()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getBottomPadding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapString: byte[] access$000()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint[] getListeningPoints()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherViewPropertyAnimator: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.EmailContent: com.android.emailcommon.provider.EmailContent getContent(android.database.Cursor,java.lang.Class)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.soundrecorder.Recorder: int getMaxAmplitude()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RetryAfter: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getPositionX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getPositionY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.mobile1.DrmConstraintInfo: long getInterval()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.xmp.XmpUtil: com.adobe.xmp.XMPMeta createXMPMeta()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: char getAlphabeticShortcut()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.DragEvent: android.content.ClipDescription getClipDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl: int getDisplayOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.backup.LocalTransport: long getCurrentRestoreSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Display: java.lang.String getAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Authenticator: java.lang.String getRequestingProtocol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Object[] toArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.graphics.drawable.Drawable getBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView$Marquee: float getMaxFadeScroll()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: long getProjectDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.Preferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.AccessibilityInteractionController$PrivateHandler: java.lang.String getMessageName(android.os.Message)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.InsertQuickResponseDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateUtils: java.lang.CharSequence getRelativeDateTimeString(android.content.Context,long,long,long,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.State getOriginalState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.HandlerBox: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: float[] mapPointFromViewToParent(android.view.View,float,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.FilterFunction: android.filterfw.core.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.cert.X509Certificate: java.util.Collection getIssuerAlternativeNames()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SimpleAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.AbsoluteSizeSpan: int getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.XMPNodeUtils: java.lang.String serializeNodeValue(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebBackForwardListClassic: boolean getClearPending()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RequestHeaders: java.lang.String getProxyAuthorization()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.DHParameters: byte[] getPrime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.IInstrumentationWatcher$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SimpleAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ServerOperation: int getMaxPacketSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSeekBar: int getThumbOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: short getShort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Element: int getSubElementCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.SetupData: java.lang.String getUsername()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorImpl: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.PosterizeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getCompoundPaddingLeft()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.backup.IBackupTransport$Stub$Proxy: long getCurrentRestoreSet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.util.Rfc822Token: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.Mp4TrackImpl: com.coremedia.iso.boxes.AbstractMediaHeaderBox getMediaHeaderBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractPoolEntry: java.lang.Object getState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebHistoryItem: java.lang.String getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.ServerSocket: java.net.InetAddress getInetAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.PluginManager: java.lang.String getPluginSharedDataDirectory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.opengl.EGLObjectHandle: int getHandle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getInputEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SimpleFrame: int[] getInts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.options.PropertyOptions: int getValidOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.lang.String getSceneMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.lang.String getCanonicalName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.method.CharacterPickerDialog$OptionsAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.Ticker$Segment: android.text.StaticLayout getLayout(java.lang.CharSequence)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.Format: java.lang.String format(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine: com.android.internal.util.IState getCurrentState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebView: android.webkit.WebView$HitTestResult getHitTestResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: android.content.Intent getIntent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Throwable: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeader: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ComboPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getVoiceLanguageModeId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.OvershootInterpolator: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.MoreKeysKeyboard: int getDefaultCoordX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.sip.SipSessionGroup$MakeCallCommand: android.net.sip.SipProfile getPeerProfile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.MultiWaveView: int getSuggestedMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewRootImpl: android.view.View getView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneGlobals: android.app.Activity getPUKEntryActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.timer.TimerFragment: com.android.deskclock.timer.TimerFragment$TimersListAdapter createAdapter(android.content.Context,android.content.SharedPreferences)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.TimeImpl: double getResolvedOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ResolverActivity$ResolveListAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: android.webkit.WebBackForwardListClient getWebBackForwardListClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ISyncContext$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: byte[] getEncoded()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$HashIterator: com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getDefaultDensity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: long getBoundaryEndTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.widget.EmailWidget: android.widget.RemoteViews getViewAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.regex.PatternSyntaxException: int getIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.input.IInputManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.CdmaPhoneCallState: boolean getAddCallMenuStateAfterCallWaiting()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.ExchangeService: java.lang.String getDeviceId(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: android.view.View getView(int,android.view.View,android.view.ViewGroup)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.X509Name: com.android.org.bouncycastle.asn1.x509.X509Name getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessages(java.lang.String[],com.android.emailcommon.mail.Folder$MessageRetrievalListener)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: float getTextRunAdvances(java.lang.CharSequence,int,int,int,int,int,float[],int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.NativeDaemonConnector: java.util.ArrayList doCommand(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityEvent: int getAction()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl: java.lang.String getContentEncoding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Quart$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebStorage$Origin: long getQuota()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: java.lang.String getSentProtocolField()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createByteFormat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: int getAspectRatio()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.auth.DigestScheme: java.lang.String getSchemeName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManager: int getLargeMemoryClass()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getOrientation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: int[] getIntArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: java.lang.String getDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.AppWidgetService: int[] getAppWidgetIds(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.CollationElementIterator: int getOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.math.BigInt: int getNativeBIGNUM()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Quart$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.widget.multiwaveview.Ease$Quart$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(java.io.InputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbInterface getInterface(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.IOExceptionEvent: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.LocalSocketAddress$Namespace: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SimpleAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: boolean getFillAfter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk: java.lang.String getResDir()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1InputStream: com.android.org.bouncycastle.asn1.ASN1EncodableVector buildEncodableVector()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpURLConnectionImpl: java.net.Proxy getProxy()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getViaHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String[] getBandwidthTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ActivityChooserModel: android.content.pm.ResolveInfo getDefaultActivity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.BaseExpandableListAdapter: long getCombinedChildId(long,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTransition: java.lang.String getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: java.lang.String getHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.ElementSequentialTimeContainerImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.IDisplayManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceGroupAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.LayoutModel: com.android.mms.model.RegionModel getTextRegion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<junit.framework.TestCase: junit.framework.TestResult createResult()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getPeerName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CertificateList: org.apache.harmony.security.x509.TBSCertList getTbsCertList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.Frame: int getRefCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl$HttpsEngine: javax.net.ssl.SSLSocketFactory getSslSocketFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: android.widget.ExpandableListAdapter getAdapter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Mesh: android.renderscript.Mesh$Primitive getPrimitive(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.NativeBuffer: int getElementSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.gms.panorama.internal.IPanoramaCallbacks$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.CRLDistributionPoints$1: java.util.Collection getValues(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchManager: android.content.Intent getAssistIntent(android.content.Context,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: gov.nist.core.DuplicateNameValueList getMultiParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.NewInstance: java.lang.ClassLoader getClassLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.CloseGuard: dalvik.system.CloseGuard$Reporter getReporter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraActivity: long getJpegCallbackFinishTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: android.os.Bundle getExtras()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioRecord: int getAudioSource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.MenuBuilder: android.view.View getHeaderView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Unsupported: java.lang.String getOptionTag()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.emoji.EmojiFactory: java.lang.String getAndroidPuaFromVendorSpecificPua(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.EventLog$Event: int getThreadId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.adapter.MoveItemsParser: int getStatusCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.mms.util.DownloadDrmHelper: java.lang.String getOriginalMimeType(android.content.Context,java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: boolean getFillBefore()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchManager: java.util.List getGlobalSearchActivities()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONArray: double getDouble(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug$MemoryInfo: int getOtherPrivateDirty(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.SecurityPolicy: int getInactiveReasons(com.android.emailcommon.provider.Policy)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.io.EmulatedFields$ObjectSlot: java.lang.Object getFieldValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.exchange.provider.ExchangeDirectoryProvider: long getAccountIdByName(android.content.Context,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListConnector: android.widget.ExpandableListConnector$PositionMetadata getFlattenedPos(android.widget.ExpandableListPosition)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebStorageClassic: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.InetAddress: java.lang.String getHostName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.Preference: int getWidgetLayoutResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getMountedObbPath(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.RawHeaders: java.lang.String get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: java.lang.String getType(java.lang.String,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.widget.MmsWidgetService$MmsFactory: android.widget.RemoteViews getViewAt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.RFC2965Spec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceFragment: android.widget.ListView getListView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractClientConnAdapter: int getRemotePort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.DialogPreference: int getDialogLayoutResource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.AbstractClientConnAdapter: javax.net.ssl.SSLSession getSSLSession()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SubscriptionState: int getRetryAfter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AdapterViewAnimator: android.view.ViewGroup$LayoutParams createOrReuseLayoutParams(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.VelocityTracker: float getXVelocity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.internal.KeySpecParser: java.lang.String getLabel(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.animation.Animation: long computeDurationHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.sip.SipSharedPreferences: int getProfilesCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getIdAttribute()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FastBitmapDrawable: int getIntrinsicWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Workspace: android.view.View getViewForTag(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.HttpURLConnection: int getResponseCode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.util.VersionInfo: java.lang.String getRelease()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOff()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.DownloadManager: java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.NativeFrame: int getCapacity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.UDPMessageChannel: java.lang.String getPeerAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilLayoutElementImpl: org.w3c.dom.NodeList getRegions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.sensor.SensorReader: float getAccelInPlaneRotationRadians()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: int getPageCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DecimalFormatSymbols: char getGroupingSeparator()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Element: int getVectorSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.AudioTrack: int getNotificationMarkerPosition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTransition getMidTransition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ClipDrawable$ClipState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.RemoteCallbackList: int getRegisteredCallbackCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.message.MultipartMimeContent getMultipartMimeContent()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.cert.X509Certificate$1: java.security.Principal getSubjectDN()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.SerializedFrame: java.lang.Object getObjectValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)> android.permission.READ_PHONE_STATE android.permission.CHANGE_NETWORK_STATE - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$StrongEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: char getChar(java.lang.String,char)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.util.encoders.Hex: byte[] decode(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeaderElement: int getParameterCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.ReentrantReadWriteLock: int getQueueLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebBackForwardList: int getSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.IHardwareService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UserManager: int getUserCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.MovieMediaItem: long getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.BaseAdapterWithImages: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable getStateDrawable(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.widget.MmsWidgetService$MmsFactory: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getNextFocusLeftId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getDisplayName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.chips.RecipientEntry: long getDataId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.impl.conn.tsccm.BasicPoolEntryRef getWeakRef()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.ReadOnlyDirectByteBuffer: byte[] protectedArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: int getMinimumWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.core.NameValue: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore$AutoFillData: int getQueryId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ArrayAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.PhoneWindowManager: int getConfigDisplayHeight(int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1SequenceParser parser()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ScaleGestureDetector: long getEventTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: int getEventType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BufferedHeader: int getValuePos()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.DatagramSocketImpl: java.io.FileDescriptor getFileDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: java.util.List getMetadataList()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SearchView: int getInputType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getScrollX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: int getScrollY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Bitmap: int getDensity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.XmlPullAttributes: int getAttributeNameResource(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.HandlerThread: int getThreadId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: int getParameter(int,byte[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: gov.nist.core.HostPort getHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.obex.ServerOperation: java.lang.String getType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Date: int getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getNumberOfBlocks()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.usb.UsbStorageActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.PBEKeySpec: char[] getPassword()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiDevice: int getDisplayRotation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.sip.DialogState: javax.sip.DialogState getObject(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getOffsetToLeftOf(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Class: java.net.URL getResource(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Editor$SelectionEndHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TabHost: android.widget.TabWidget getTabWidget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getDelta()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getUan()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewCore: android.webkit.WebSettingsClassic getSettings()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.ViewRootImpl getViewRootImpl()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.model.RegionModel: java.lang.String getFit()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CompoundButton: int getCompoundPaddingRight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstMutationResult: com.google.common.collect.BstNode getOriginalTarget()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getButtonState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.charset.CharsetDecoder: float averageCharsPerByte()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.ActionBarPolicy: int getMaxActionButtons()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.io.ForwardingOs: int getsockoptByte(java.io.FileDescriptor,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.security.auth.callback.PasswordCallback: java.lang.String getPrompt()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerSearchTwoPane: int getLayoutId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.ISerialManager$Stub$Proxy: java.lang.String[] getSerialPorts()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.LazyEncodedSequence: java.util.Enumeration getObjects()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.BaseByteBuffer: char getChar(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.LongBuffer: java.lang.Object array()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPServerTransaction getRetransmissionAlertTransaction(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.Socket: java.io.InputStream getInputStream()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransport()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Spinner$DialogPopup: int getVerticalOffset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.NullVibrator: android.os.NullVibrator getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.TrackHeaderBox: int getAlternateGroup()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: char getChar(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraScreenNail: float getAlpha()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.MessageChannel: gov.nist.core.HostPort getHostPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.luni.lang.reflect.ImplForVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.database.SortCursor: int getType(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Multimaps$TransformedEntriesMultimap: java.util.Collection get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: char getChar(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.RecipientAdapter: int getItemLayout()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbInterface: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiSelector: int getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,com.android.mms.data.ContactList,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultimap: java.util.Map backingMap()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.Gesture: float getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Annotation: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: java.lang.String getCallingPackage(android.os.IBinder)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapList getKeyedListOrEmpty(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.transport.MailTransport: java.net.InetAddress getLocalAddress()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.SuggestionSpan: java.lang.String getLocale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup$MarginLayoutParams: int getLayoutDirection()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.Logger: org.apache.harmony.xnet.provider.jsse.Logger$Stream getStream(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputContextCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.String getAttribute(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Hashtable$HashIterator: java.util.Hashtable$HashtableEntry nextEntryNotFailFast()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.CameraActivity: long getCaptureStartTime()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.PolicyInformation$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaPlayer$TrackInfo: java.lang.String getLanguage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.uiautomator.Launcher$Command: java.lang.String name()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.DirectByteBuffer: float getFloat(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.AttrImpl: java.lang.String getValue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.OutputPort: android.filterfw.core.InputPort getTargetPort()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getResponse()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.DERBMPString: java.lang.String getString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: long getLong(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.locks.LockSupport: java.lang.Object getBlocker(java.lang.Thread)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.PreferenceActivity: android.widget.Button getNextButton()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Locale: java.lang.String getVariant()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.CharArrayBuffer: char get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.ThreePaneLayout: int getVisiblePanes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ims.SecurityAgree: int getSPIServer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CookieManager: android.webkit.CookieManager getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.LoaderManagerImpl: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.commands.monkey.MonkeySourceNetworkViews$GetChildren: com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn query(android.view.accessibility.AccessibilityNodeInfo,java.util.List)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$ReflectionAction: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.AttrImpl: org.w3c.dom.Node getPreviousSibling()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.AccessibilityIterators$CharacterTextSegmentIterator: android.view.AccessibilityIterators$CharacterTextSegmentIterator getInstance(java.util.Locale)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AutoCompleteTextView: android.graphics.drawable.Drawable getDropDownBackground()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertificate: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.ReflectiveProperty: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.IKeyChainAliasCallback$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.DropBoxManager: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.NinePatchDrawable: android.graphics.Insets getLayoutInsets()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: java.lang.String getValue(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.json.JSONArray: int getInt(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.GestureLibrary: java.util.ArrayList getGestures(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.Notification$Builder: android.app.Notification getNotification()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getViaHost()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.IWindowManager$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.IKeyChainAliasCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup$ChildListForAccessibility: int getChildIndex(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.InputDevice: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getThreadAllocSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.RetryAfter: int getRetryAfter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.VolumePreference$SeekBarVolumizer: android.widget.SeekBar getSeekBar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getInstance(android.os.Looper)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.BackStackRecord: int getId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: float getFloat(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalFreedSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.UEventObserver$UEvent: java.lang.String get(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getSelectedText(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.IRecognitionListener$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.providers.userdictionary.UserDictionaryProvider: java.lang.String getType(android.net.Uri)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ListFragment: android.widget.ListView getListView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpsURLConnectionImpl$HttpsEngine: java.net.HttpURLConnection getHttpConnectionToCache()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.gesture.Gesture: long getID()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SearchView: int getImeOptions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.LinearLayout: int getDividerWidth()> android.permission.STOP_APP_SWITCHES - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpStorage: java.lang.String getDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.MediaArtistNativeHelper getNativeContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ResolverActivity$ResolveListAdapter: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.SocketChannelImpl$SocketAdapter: java.io.FileDescriptor getFileDescriptor$()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.ListMap: gov.nist.javax.sip.header.SIPHeaderList getList(gov.nist.javax.sip.header.SIPHeader)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Currency: java.lang.String getSymbol()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Type: int getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getPhoneNumber()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Surface$CompatibleCanvas: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$DayStats[] getDayStatistics()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PanelHolder: int getPanelIndex(com.android.systemui.statusbar.phone.PanelView)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.TextView: int getShadowColor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ImmutableSortedAsList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.ex.variablespeed.EngineParameters: float getWindowOverlapDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getLineBottom(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: java.lang.String getPackageName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Type: int getZ()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Type: int getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: int getTextGlyphs(java.lang.String,int,int,int,int,int,char[])> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.kxml2.io.KXmlParser: java.lang.String getPositionDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettings: int getMinimumFontSize()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContextWrapper: java.lang.String getPackageName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.Layout: int getOffsetForHorizontal(int,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.CompatibilityInfo$Translator: android.graphics.Region getTranslatedTouchableArea(android.graphics.Region)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Environment: java.io.File getExternalStorageAppMediaDirectory(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FastBitmapDrawable: int getMinimumHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.xnet.provider.jsse.TrustManagerImpl: java.security.cert.X509Certificate[] getAcceptedIssuers()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebViewClassic: float getDefaultZoomScale()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.AlertController: android.widget.Button getButton(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.LockPatternUtils: long getLockoutAttemptDeadline()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.HttpConnectionMetricsImpl: long getResponseCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.Paint: int getBidiFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.mtp.MtpDevice: java.lang.String getDeviceName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.Lists$StringAsImmutableList: java.lang.Character get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.Intent: java.lang.String getScheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.worldclock.WorldClockAdapter: long getItemId(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.RuntimePermission: java.lang.String getActions()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.widget.MmsWidgetService$MmsFactory: android.widget.RemoteViews getLoadingView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.videoeditor.MediaArtistNativeHelper: java.lang.String getProjectPath()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<dalvik.system.profiler.HprofData: java.util.Set getSamples()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.GridLayout$Axis: int[] getLeadingMargins()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.i18n.phonenumbers.NumberParseException: com.android.i18n.phonenumbers.NumberParseException$ErrorType getErrorType()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getCurrentFailedPasswordAttempts(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String getScheme()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewStub: android.view.LayoutInflater getLayoutInflater()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.internet.MimeHeader: java.lang.String getFirstHeader(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: java.lang.String getProcessName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.ParametersHeader: int getParameterAsHexInt(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isActivePasswordSufficient(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.Sensor: float getPower()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.InsetDrawable$InsetState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.PipeImpl$PipeSourceChannel: java.io.FileDescriptor getFD()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityManagerProxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: short getShort(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.MessageDigest: java.lang.String toString()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.pkcs7.SignedData getSignedData()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.DropBoxManager$Entry: int getFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.os.AtomicFile: java.io.File getBaseFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.SizeAdaptiveLayout: android.animation.Animator getTransitionAnimation()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPDialog: javax.sip.message.Request createPrack(javax.sip.message.Response)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Signature: java.lang.String getAlgorithm()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.RegularImmutableSortedSet: com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.uiautomator.core.UiSelector: boolean getBoolean(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSpinner: int getChildWidth(android.view.View)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.Policy: android.net.Uri save(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox: com.coremedia.iso.boxes.fragment.SampleFlags getDefaultSampleFlags()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.HardwareRenderer: boolean initializeIfNeeded(int,int,android.view.Surface)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug: int getGlobalExternalFreedCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.BodyDescriptor: java.lang.String getCharset()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: java.math.BigInteger getUserCertificate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ApplicationPackageManager: int getApplicationEnabledSetting(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.DateTimeField: java.util.Date getDate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.MediaRouter: int getRouteCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.AnimatedRotateDrawable: int getIntrinsicHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.URLConnection: boolean getDoOutput()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<javax.crypto.spec.PBEKeySpec: int getIterationCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewGridLayout: int getCellCountY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.PagedViewGridLayout: int getCellCountX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.MissingResourceException: java.lang.String getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.Security: java.security.Provider getProvider(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.DrawableHolder: float getScaleY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.DrawableHolder: float getScaleX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.FocusOnlyTabWidget: android.view.View getSelectedTab()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.harmony.security.x509.GeneralSubtree$1: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.JarURLConnection: java.util.jar.JarEntry getJarEntry()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.mail.store.imap.ImapUtility: java.lang.String[] getImapRangeValues(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$CheckedMap$CheckedEntry: java.lang.Object getKey()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.ViewConfiguration: int getScaledEdgeSlop()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.DynamicLayout: int getLineDescent(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.james.mime4j.field.address.parser.ParseException: java.lang.String getMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.googlecode.mp4parser.authoring.builder.TwoSecondIntersectionFinder: long getDuration(com.googlecode.mp4parser.authoring.Track)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.IRemoteControlDisplay$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.AbsSpinner$RecycleBin: android.view.View get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ImfUtils: android.view.inputmethod.InputMethodManager getInputMethodManager(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.animation.Animator interpolator(android.animation.TimeInterpolator,android.animation.Animator)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.recent.RecentTasksLoader: android.graphics.drawable.Drawable getFullResIcon(android.content.res.Resources,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterpacks.imageproc.FlipFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.LauncherAppWidgetHostView: android.view.View getErrorView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.CallID: gov.nist.javax.sip.header.CallIdentifier getCallIdentifer()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageProcessor,javax.sip.address.Hop)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.setup.SetupData: int getFlowMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getOpenGlMaxFieldOfViewDegrees()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.Launcher: com.android.launcher2.SearchDropTargetBar getSearchBar()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Protocol: java.lang.String getProtocolName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ExpandableListActivity: long getSelectedId()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.NotificationManager: android.app.INotificationManager getService()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.BstPath: com.google.common.collect.BstPath getPrefix()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.os.Debug$MemoryInfo: int getOtherPss(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.transaction.TransactionState: android.net.Uri getContentUri()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.service.VideoEditorProject: int getMediaItemCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.Program: java.lang.String getTextureName(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getKeyboardLayoutSetName(android.view.inputmethod.InputMethodSubtype)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.style.CharacterStyle$Passthrough: android.text.style.CharacterStyle getUnderlying()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.speech.tts.SynthesisRequest: java.lang.String getText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.ChoiceFormat: double[] getLimits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HeaderViewListAdapter: int getHeadersCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.AbstractMultiset: java.util.Set createEntrySet()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.HttpConnectionMetricsImpl: long getReceivedBytesCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.DefaultUserTokenHandler: java.lang.Object getUserToken(org.apache.http.protocol.HttpContext)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.PagedView: float maxOverScroll()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$1: java.lang.Float get(com.android.internal.policy.impl.keyguard.SlidingChallengeLayout)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(java.lang.String,android.content.res.CompatibilityInfo,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Quint$1: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Quint$2: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.widget.multiwaveview.Ease$Quint$3: float getInterpolation(float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Challenge: java.lang.String getSignature()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: java.lang.String getSearchHint()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: java.lang.String getComment()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.Menu getMenu()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: char getChar(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.xml.sax.helpers.AttributesImpl: int getIndex(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Switch: java.lang.CharSequence getTextOff()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.GradientDrawable: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.CallbackProxy$UploadFileMessageData: android.webkit.CallbackProxy$UploadFile getUploadFile()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.HeapByteBuffer: long getLong()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.shapes.Shape: float getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.launcher2.CellLayout$ViewCluster: int[] getBottomEdge()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.ActionBarPolicy: int getStackedTabMaxWidth()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.RFC2965Spec: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: int getPointerIdBits()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SipProfile: int getCallingUid()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.net.sip.SimpleSessionDescription$Fields: int getBandwidth(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.videoeditor.util.ImageUtils: android.graphics.Bitmap scaleImage(java.lang.String,int,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HorizontalScrollView: float getRightFadingEdgeStrength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.android.picasasync.PicasaFacade: com.google.android.picasasync.PicasaFacade get(android.content.Context)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor getDescriptor()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.address.SipUri: java.lang.String getTransportParam()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipStack getSipStack()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.HeaderViewListAdapter: int getViewTypeCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.backup.IFullBackupRestoreObserver$Stub: android.os.IBinder asBinder()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.SIPDate: int getSecond()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.AsyncRunner: java.lang.Exception getError()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.RemoteViews$SetDrawableParameters: java.lang.String getActionName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.ZoomManager: android.view.View getExternalZoomPicker()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.RegularImmutableMap$Values$1: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.zip.Deflater: long getBytesRead()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.GradientDrawable$GradientState: int getChangingConfigurations()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<libcore.net.http.HttpEngine: libcore.net.http.ResponseHeaders getResponseHeaders()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.ContextImpl: android.content.Context getOuterContext()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.lang.reflect.Array: short getShort(java.lang.Object,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.ExpandableListView: int getFlatListPosition(long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.DragEvent: float getY()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.DragEvent: float getX()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.CursorTreeAdapter: android.widget.Filter getFilter()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.coremedia.iso.boxes.SampleTableBox: com.coremedia.iso.boxes.SampleSizeBox getSampleSizeBox()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMakerInternalMap$SoftEntry: com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.policy.impl.keyguard.KeyguardSecurityContainer: com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper getFlipper()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.nio.LongToByteBufferAdapter: long get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.cookie.BestMatchSpec: int getVersion()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSyncManager: java.lang.Object clone()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.database.SortCursor: int getCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.StateMachine: android.os.Message getCurrentMessage()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: int getIndex()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.GLES20Canvas: int saveLayerAlpha(float,float,float,float,int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: int getHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.client.methods.HttpOptions: java.util.Set getAllowedMethods(org.apache.http.HttpResponse)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.AttributedString$AttributedIterator: int getRunStart()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.Toast: int getDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.ccil.cowan.tagsoup.AttributesImpl: int getLength()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getEnterFadeDuration()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.usb.UsbDevice: int getInterfaceCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.text.StaticLayout: int getEllipsisStart(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.drm.DrmUtils: byte[] readBytes(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient getClient()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.mms.layout.LayoutManager: com.android.mms.layout.LayoutManager getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.res.XmlBlock$Parser: float getAttributeFloatValue(int,float)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.client.AbstractHttpClient: int getRequestInterceptorCount()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.MotionEvent: float getHistoricalSize(int,int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.camera.ActivityBase: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.ActionBarPolicy: int getTabContainerHeight()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.phone.PhoneInterfaceManager: int getDataState()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTitle()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.view.View: android.view.View$AccessibilityDelegate getAccessibilityDelegate()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.webkit.WebSettingsClassic: boolean getAllowFileAccessFromFileURLs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<org.apache.http.message.BasicHeaderElement: org.apache.http.NameValuePair[] getParameters()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.latin.ExpandableDictionary$NextStaticWord: com.android.inputmethod.latin.ExpandableDictionary$Node getWordNode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.emailcommon.provider.EmailContent: com.android.emailcommon.provider.EmailContent restoreContentWithId(android.content.Context,java.lang.Class,android.net.Uri,java.lang.String[],long)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.internal.util.TypedProperties: java.lang.String getString(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingIterator: java.lang.Object next()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.app.SearchableInfo: int getSearchButtonText()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View getStatusBarView()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.provider.Settings$Global: java.lang.String getBluetoothInputDevicePriorityKey(java.lang.String)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.widget.SuggestionsAdapter: int getQueryRefinement()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.ForwardingCollection: java.lang.Object[] toArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.deskclock.Alarm$DaysOfWeek: boolean[] getBooleanArray()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.email.NotificationController: int getRingerMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.security.Credentials: android.security.Credentials getInstance()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.AcceptLanguageList: gov.nist.javax.sip.header.AcceptLanguage getFirst()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getOIDs()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.security.AccessControlContext: java.security.DomainCombiner getDomainCombiner()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.inputmethod.keyboard.Key: int getMoreKeysColumn()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.renderscript.ProgramRaster: android.renderscript.ProgramRaster$CullMode getCullMode()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.filterfw.core.VertexFrame: float[] getFloats()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<java.util.Collections$CheckedList: java.lang.Object get(int)> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.google.common.collect.MapMaker: com.google.common.base.Equivalence getValueEquivalence()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.preference.VolumePreference$SavedState: android.preference.VolumePreference$VolumeStore getVolumeStore()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.header.Via: java.lang.String getSentByField()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<android.hardware.display.IDisplayManager$Stub$Proxy: int[] getDisplayIds()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<com.android.server.accessibility.ScreenMagnifier$DisplayProvider: android.view.Display getDisplay()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentDispositionHeader getContentDisposition()> - @DSSource({DSSourceKind.NO_CATEGORY}) 
