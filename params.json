{"name":"Droidsafe-src","tagline":"DroidSafe Android Static Analysis Source Repository","body":"\r\n# DroidSafe #\r\n## A Platform for Android Application Analysis##\r\n\r\nThe DroidSafe project develops novel program analysis techniques to diagnose and remove malicious code from Android mobile applications. The DroidSafe project is developed by MIT's ??? and the [Kestrel Institute](http://www.kestrel.edu/). The core of our system is a static taint / information flow analysis that operates on either Java bytecode for an application or an application's APK.  The DroidSafe team co-designed a semantic model of Android runtime behaviors and a static information flow analysis suite to tackle.\r\n\r\nThe DroidSafe system includes:\r\n\r\n1. Comprehensive, accurate, and precise Android runtime semantics model.  The model was seeded with the Java code from the Android Open Source Project's (AOSP) implementation of Android 4.4.1.  The DroidSafe team then automatically and manually added semantics to this model to account for native code semantics and runtime code semantics not included in the AOSP Java code.  The model includes a manually-verified core that accounts for over 98% of API calls in Android applications.  The model provides a single language solution for Android static analysis.\r\n\r\n1. A comprehensive set of sensitive source method calls defined on the Android API version 4.4.1.\r\n\r\n1. A comprehensive set of sink method calls that can exfiltrate information beyond application boundaries defined on Android API version 4.4.1\r\n\r\n1. Scalable and precise global static analysis optimized for the information flow problem on Android.  This includes a deeply object sensitive global points to analysis with a custom solver, and a global call-site sensitive, object-sensitive, field-sensitive, and flow-insensitive taint analysis.\r\n\r\n1. A plugin for the [Eclipse IDE](https://eclipse.org/) designed to help a trusted human analyst rapidly triage an unknown Android application.  The plugin, called the DroidSafe Navigator, presents our information flow analysis and points to analysis results overlaid on the source code for an application.  The DroidSafe Navigator also includes features to guide an analyst to sensitive portions of an application based on API usage and implementation idioms.\r\n\r\nOur recent publication below demonstrates that the DroidSafe information flow analysis system achieves unprecedented precision and accuracy for Android information flow analysis (as measured on a standard previously published set of benchmark applications). Furthermore, DroidSafe detects all malicious information flow leaks inserted into 24 real-world Android applications by three independent, hostile Red-Team organizations. The previous state-of-the art analysis, in contrast, detects less than 10% of these malicious flows. \r\n\r\n### Publications ###\r\n\r\n * [Information Flow Analysis of Android Applications in DroidSafe](http://people.csail.mit.edu/mgordon/papers/droidsafe-ndss-2015.pdf). Michael I. Gordon, Deokhwan Kim, Jeff Perkins, Limei Gilham, Nguyen Nguyen, and Martin Rinard. NDSS 2015, San Diego, CA, February, 2015.\r\n\r\n### Application Benchmarks\r\n\r\nThe DroidSafe team contributed 40 micro-applications to the [DroidBench](https://github.com/secure-software-engineering/DroidBench) Android Information Flow benchmark suite.  The malicious Android applications from APAC cannot be release at this time due to our contract with DARPA.\r\n\r\n### Authors and Contributors\r\n@mgordon is the DroidSafe project leader at MIT.\r\n\r\n### Support or Contact\r\ndroidsafe@lists.csail.mit.edu","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}